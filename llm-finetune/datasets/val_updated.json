[{"sql": "SELECT count(*) FROM singer", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM singer ", "text": "", "input": "How many singers do we have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT count(*) FROM singer", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM singer ", "text": "", "input": "What is the total number of singers?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "output": "ORDER BY DESC age FROM PROJECT name, country, age FROM singer ", "text": "", "input": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC", "output": "ORDER BY DESC age FROM PROJECT name, country, age FROM singer ", "text": "", "input": "What are the names, countries, and ages for every singer in descending order of age?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "output": "PROJECT AVG(age), MIN(age), MAX(age) FROM AGGREGATE AVG(age), MAX(age), MIN(age) FROM SELECT WHERE country = 'France' FROM singer ", "text": "", "input": "What is the average, minimum, and maximum age of all singers from France?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'", "output": "PROJECT AVG(age), MIN(age), MAX(age) FROM AGGREGATE AVG(age), MAX(age), MIN(age) FROM SELECT WHERE country = 'France' FROM singer ", "text": "", "input": "What is the average, minimum, and maximum age for all French singers?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "output": "LIMIT 1 FROM ORDER BY age FROM PROJECT song_name, song_release_year FROM singer ", "text": "", "input": "Show the name and the release year of the song by the youngest singer.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1", "output": "LIMIT 1 FROM ORDER BY age FROM PROJECT song_name, song_release_year FROM singer ", "text": "", "input": "What are the names and release years for all the songs of the youngest singer?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "output": "PROJECT DISTINCT country FROM SELECT WHERE age > 20 FROM singer ", "text": "", "input": "What are all distinct countries where singers above age 20 are from?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT DISTINCT country FROM singer WHERE age  >  20", "output": "PROJECT DISTINCT country FROM SELECT WHERE age > 20 FROM singer ", "text": "", "input": "What are  the different countries with singers above age 20?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "output": "PROJECT country, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY country FROM singer ", "text": "", "input": "Show all countries and the number of singers in each country.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT country ,  count(*) FROM singer GROUP BY country", "output": "PROJECT country, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY country FROM singer ", "text": "", "input": "How many singers are from each country?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "output": "PROJECT song_name FROM SELECT WHERE age > PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM singer FROM singer ", "text": "", "input": "List all song names by singers above the average age.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)", "output": "PROJECT song_name FROM SELECT WHERE age > PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM singer FROM singer ", "text": "", "input": "What are all the song names by singers who are older than average?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "output": "PROJECT LOCATION, name FROM SELECT WHERE capacity BETWEEN 5000 AND 10000 FROM stadium ", "text": "", "input": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000", "output": "PROJECT LOCATION, name FROM SELECT WHERE capacity BETWEEN 5000 AND 10000 FROM stadium ", "text": "", "input": "What are the locations and names of all stations with capacity between 5000 and 10000?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "select max(capacity), average from stadium", "output": "PROJECT MAX(capacity), average FROM AGGREGATE MAX(capacity) FROM stadium ", "text": "", "input": "What is the maximum capacity and the average of all stadiums ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "select avg(capacity) ,  max(capacity) from stadium", "output": "PROJECT AVG(capacity), MAX(capacity) FROM AGGREGATE MAX(capacity), AVG(capacity) FROM stadium ", "text": "", "input": "What is the average and maximum capacities for all stadiums ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC average FROM PROJECT name, capacity FROM stadium ", "text": "", "input": "What is the name and capacity for the stadium with highest average attendance?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC average FROM PROJECT name, capacity FROM stadium ", "text": "", "input": "What is the name and capacity for the stadium with the highest average attendance?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE YEAR = 2014 OR YEAR = 2015 FROM concert ", "text": "", "input": "How many concerts are there in year 2014 or 2015?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE YEAR = 2014 OR YEAR = 2015 FROM concert ", "text": "", "input": "How many concerts occurred in 2014 or 2015?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "output": "PROJECT T2.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.stadium_id FROM JOIN AS T1 FROM concert WITH AS T2 FROM stadium ON T1.stadium_id = T2.stadium_id ", "text": "", "input": "Show the stadium name and the number of concerts in each stadium.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id", "output": "PROJECT T2.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.stadium_id FROM JOIN AS T1 FROM concert WITH AS T2 FROM stadium ON T1.stadium_id = T2.stadium_id ", "text": "", "input": "For each stadium, how many concerts play there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name, T2.capacity FROM AGGREGATE COUNT(*) GROUP BY T2.stadium_id FROM SELECT WHERE T1.year >= 2014 FROM JOIN AS T1 FROM concert WITH AS T2 FROM stadium ON T1.stadium_id = T2.stadium_id ", "text": "", "input": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t2.name, t2.capacity FROM AGGREGATE COUNT(*) GROUP BY t2.stadium_id FROM SELECT WHERE t1.year > 2013 FROM JOIN AS t1 FROM concert WITH AS t2 FROM stadium ON t1.stadium_id = t2.stadium_id ", "text": "", "input": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT YEAR FROM AGGREGATE COUNT(*) GROUP BY YEAR FROM concert ", "text": "", "input": "Which year has most number of concerts?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT YEAR FROM AGGREGATE COUNT(*) GROUP BY YEAR FROM concert ", "text": "", "input": "What is the year that had the most concerts?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "output": "PROJECT name FROM SELECT WHERE stadium_id NOT IN PROJECT stadium_id FROM concert FROM stadium ", "text": "", "input": "Show the stadium names without any concert.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)", "output": "PROJECT name FROM SELECT WHERE stadium_id NOT IN PROJECT stadium_id FROM concert FROM stadium ", "text": "", "input": "What are the names of the stadiums without any concerts?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30", "output": "INTERSECT PROJECT country FROM SELECT WHERE age > 40 FROM singer WITH PROJECT country FROM SELECT WHERE age < 30 FROM singer ", "text": "", "input": "Show countries where a singer above age 40 and a singer below 30 are from.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "output": "EXCEPT PROJECT name FROM stadium WITH PROJECT T2.name FROM SELECT WHERE T1.year = 2014 FROM JOIN AS T1 FROM concert WITH AS T2 FROM stadium ON T1.stadium_id = T2.stadium_id ", "text": "", "input": "Show names for all stadiums except for stadiums having a concert in year 2014.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014", "output": "EXCEPT PROJECT name FROM stadium WITH PROJECT T2.name FROM SELECT WHERE T1.year = 2014 FROM JOIN AS T1 FROM concert WITH AS T2 FROM stadium ON T1.stadium_id = T2.stadium_id ", "text": "", "input": "What are the names of all stadiums that did not have a concert in 2014?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id", "output": "PROJECT T2.concert_name, T2.theme, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.concert_id FROM JOIN AS T1 FROM singer_in_concert WITH AS T2 FROM concert ON T1.concert_id = T2.concert_id ", "text": "", "input": "Show the name and theme for all concerts and the number of singers in each concert.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id", "output": "PROJECT t2.concert_name, t2.theme, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY t2.concert_id FROM JOIN AS t1 FROM singer_in_concert WITH AS t2 FROM concert ON t1.concert_id = t2.concert_id ", "text": "", "input": "What are the names , themes , and number of singers for every concert ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "output": "PROJECT T2.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.singer_id FROM JOIN AS T1 FROM singer_in_concert WITH AS T2 FROM singer ON T1.singer_id = T2.singer_id ", "text": "", "input": "List singer names and number of concerts for each singer.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id", "output": "PROJECT T2.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.singer_id FROM JOIN AS T1 FROM singer_in_concert WITH AS T2 FROM singer ON T1.singer_id = T2.singer_id ", "text": "", "input": "What are the names of the singers and number of concerts for each person?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "output": "PROJECT T2.name FROM SELECT WHERE T3.year = 2014 FROM JOIN AS T2 FROM singer WITH JOIN AS T1 FROM singer_in_concert WITH AS T3 FROM concert ON T1.concert_id = T3.concert_id ON T1.singer_id = T2.singer_id ", "text": "", "input": "List all singer names in concerts in year 2014.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014", "output": "PROJECT T2.name FROM SELECT WHERE T3.year = 2014 FROM JOIN AS T2 FROM singer WITH JOIN AS T1 FROM singer_in_concert WITH AS T3 FROM concert ON T1.concert_id = T3.concert_id ON T1.singer_id = T2.singer_id ", "text": "", "input": "What are the names of the singers who performed in a concert in 2014?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "output": "PROJECT name, country FROM SELECT WHERE song_name LIKE '%Hey%' FROM singer ", "text": "", "input": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'", "output": "PROJECT name, country FROM SELECT WHERE song_name LIKE '%Hey%' FROM singer ", "text": "", "input": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "output": "INTERSECT PROJECT T2.name, T2.location FROM SELECT WHERE T1.Year = 2014 FROM JOIN AS T1 FROM concert WITH AS T2 FROM stadium ON T1.stadium_id = T2.stadium_id WITH PROJECT T2.name, T2.location FROM SELECT WHERE T1.Year = 2015 FROM JOIN AS T1 FROM concert WITH AS T2 FROM stadium ON T1.stadium_id = T2.stadium_id ", "text": "", "input": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015", "output": "INTERSECT PROJECT T2.name, T2.location FROM SELECT WHERE T1.Year = 2014 FROM JOIN AS T1 FROM concert WITH AS T2 FROM stadium ON T1.stadium_id = T2.stadium_id WITH PROJECT T2.name, T2.location FROM SELECT WHERE T1.Year = 2015 FROM JOIN AS T1 FROM concert WITH AS T2 FROM stadium ON T1.stadium_id = T2.stadium_id ", "text": "", "input": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE stadium_id = LIMIT 1 FROM ORDER BY DESC capacity FROM PROJECT stadium_id FROM stadium FROM concert ", "text": "", "input": "Find the number of concerts happened in the stadium with the highest capacity .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE stadium_id = LIMIT 1 FROM ORDER BY DESC capacity FROM PROJECT stadium_id FROM stadium FROM concert ", "text": "", "input": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE stadium ( Stadium_ID number, Location text, Name text, Capacity number, Highest number, Lowest number, Average number, PRIMARY KEY(Stadium_ID)); CREATE TABLE singer ( Singer_ID number, Name text, Country text, Song_Name text, Song_release_year text, Age number, Is_male others, PRIMARY KEY(Singer_ID)); CREATE TABLE concert ( concert_ID number, concert_Name text, Theme text, Stadium_ID text, Year text, PRIMARY KEY(concert_ID), FOREIGN KEY(Stadium_ID) REFERENCES stadium (Stadium_ID)); CREATE TABLE singer_in_concert ( concert_ID number, Singer_ID text, PRIMARY KEY(concert_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID), FOREIGN KEY(concert_ID) REFERENCES concert (concert_ID)); "}, {"sql": "SELECT count(*) FROM pets WHERE weight  >  10", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE weight > 10 FROM pets ", "text": "", "input": "Find the number of pets whose weight is heavier than 10.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT count(*) FROM pets WHERE weight  >  10", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE weight > 10 FROM pets ", "text": "", "input": "How many pets have a greater weight than 10?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "output": "LIMIT 1 FROM ORDER BY pet_age FROM PROJECT weight FROM pets ", "text": "", "input": "Find the weight of the youngest dog.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "output": "LIMIT 1 FROM ORDER BY pet_age FROM PROJECT weight FROM pets ", "text": "", "input": "How much does the youngest dog weigh?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "output": "PROJECT MAX(weight), petType FROM AGGREGATE MAX(weight), COUNT(*) GROUP BY petType FROM pets ", "text": "", "input": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "output": "PROJECT MAX(weight), petType FROM AGGREGATE MAX(weight), COUNT(*) GROUP BY petType FROM pets ", "text": "", "input": "List the maximum weight and type for each type of pet.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.age > 20 FROM JOIN AS T1 FROM student WITH AS T2 FROM has_pet ON T1.stuid = T2.stuid ", "text": "", "input": "Find number of pets owned by students who are older than 20.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.age > 20 FROM JOIN AS T1 FROM student WITH AS T2 FROM has_pet ON T1.stuid = T2.stuid ", "text": "", "input": "How many pets are owned by students that have an age greater than 20?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.sex = 'F' AND T3.pettype = 'dog' FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T2.petid = T3.petid ON T1.stuid = T2.stuid ", "text": "", "input": "Find the number of dog pets that are raised by female students (with sex F).", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.sex = 'F' AND T3.pettype = 'dog' FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T2.petid = T3.petid ON T1.stuid = T2.stuid ", "text": "", "input": "How many dog pets are raised by female students?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT count(DISTINCT pettype) FROM pets", "output": "PROJECT COUNT(DISTINCT pettype) FROM AGGREGATE COUNT(DISTINCT pettype) FROM pets ", "text": "", "input": "Find the number of distinct type of pets.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT count(DISTINCT pettype) FROM pets", "output": "PROJECT COUNT(DISTINCT pettype) FROM AGGREGATE COUNT(DISTINCT pettype) FROM pets ", "text": "", "input": "How many different types of pet are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "output": "PROJECT DISTINCT T1.Fname FROM SELECT WHERE T3.pettype = 'cat' OR T3.pettype = 'dog' FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T3.petid = T2.petid ON T1.stuid = T2.stuid ", "text": "", "input": "Find the first name of students who have cat or dog pet.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "output": "PROJECT DISTINCT T1.Fname FROM SELECT WHERE T3.pettype = 'cat' OR T3.pettype = 'dog' FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T3.petid = T2.petid ON T1.stuid = T2.stuid ", "text": "", "input": "What are the first names of every student who has a cat or dog as a pet?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "output": "INTERSECT PROJECT t1.fname FROM SELECT WHERE t3.pettype = 'cat' FROM JOIN AS t1 FROM student WITH JOIN AS t2 FROM has_pet WITH AS t3 FROM pets ON t3.petid = t2.petid ON t1.stuid = t2.stuid WITH PROJECT t1.fname FROM SELECT WHERE t3.pettype = 'dog' FROM JOIN AS t1 FROM student WITH JOIN AS t2 FROM has_pet WITH AS t3 FROM pets ON t3.petid = t2.petid ON t1.stuid = t2.stuid ", "text": "", "input": "Find the first name of students who have both cat and dog pets .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "output": "INTERSECT PROJECT T1.Fname FROM SELECT WHERE T3.pettype = 'cat' FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T3.petid = T2.petid ON T1.stuid = T2.stuid WITH PROJECT T1.Fname FROM SELECT WHERE T3.pettype = 'dog' FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T3.petid = T2.petid ON T1.stuid = T2.stuid ", "text": "", "input": "What are the students' first names who have both cats and dogs as pets?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "output": "PROJECT major, age FROM SELECT WHERE stuid NOT IN PROJECT T1.stuid FROM SELECT WHERE T3.pettype = 'cat' FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T3.petid = T2.petid ON T1.stuid = T2.stuid FROM student ", "text": "", "input": "Find the major and age of students who do not have a cat pet.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "output": "PROJECT major, age FROM SELECT WHERE stuid NOT IN PROJECT T1.stuid FROM SELECT WHERE T3.pettype = 'cat' FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T3.petid = T2.petid ON T1.stuid = T2.stuid FROM student ", "text": "", "input": "What major is every student who does not own a cat as a pet, and also how old are they?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "output": "EXCEPT PROJECT stuid FROM student WITH PROJECT T1.stuid FROM SELECT WHERE T3.pettype = 'cat' FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T3.petid = T2.petid ON T1.stuid = T2.stuid ", "text": "", "input": "Find the id of students who do not have a cat pet.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "output": "EXCEPT PROJECT stuid FROM student WITH PROJECT T1.stuid FROM SELECT WHERE T3.pettype = 'cat' FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T3.petid = T2.petid ON T1.stuid = T2.stuid ", "text": "", "input": "What are the ids of the students who do not own cats as pets?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "output": "PROJECT T1.fname, T1.age FROM SELECT WHERE T3.pettype = 'dog' AND T1.stuid NOT IN PROJECT T1.stuid FROM SELECT WHERE T3.pettype = 'cat' FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T3.petid = T2.petid ON T1.stuid = T2.stuid FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T3.petid = T2.petid ON T1.stuid = T2.stuid ", "text": "", "input": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "output": "PROJECT T1.fname, T1.age FROM SELECT WHERE T3.pettype = 'dog' AND T1.stuid NOT IN PROJECT T1.stuid FROM SELECT WHERE T3.pettype = 'cat' FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T3.petid = T2.petid ON T1.stuid = T2.stuid FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T3.petid = T2.petid ON T1.stuid = T2.stuid ", "text": "", "input": "What is the first name of every student who has a dog but does not have a cat?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "output": "LIMIT 1 FROM ORDER BY pet_age FROM PROJECT pettype, weight FROM pets ", "text": "", "input": "Find the type and weight of the youngest pet.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "output": "LIMIT 1 FROM ORDER BY pet_age FROM PROJECT pettype, weight FROM pets ", "text": "", "input": "What type of pet is the youngest animal, and how much does it weigh?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "output": "PROJECT petid, weight FROM SELECT WHERE pet_age > 1 FROM pets ", "text": "", "input": "Find the id and weight of all pets whose age is older than 1.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "output": "PROJECT petid, weight FROM SELECT WHERE pet_age > 1 FROM pets ", "text": "", "input": "What is the id and weight of every pet who is older than 1?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "output": "PROJECT AVG(pet_age), MAX(pet_age), pettype FROM AGGREGATE COUNT(*), AVG(pet_age), MAX(pet_age) GROUP BY pettype FROM pets ", "text": "", "input": "Find the average and maximum age for each type of pet.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "output": "PROJECT AVG(pet_age), MAX(pet_age), pettype FROM AGGREGATE COUNT(*), AVG(pet_age), MAX(pet_age) GROUP BY pettype FROM pets ", "text": "", "input": "What is the average and maximum age for each pet type?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "output": "PROJECT AVG(weight), pettype FROM AGGREGATE COUNT(*), AVG(weight) GROUP BY pettype FROM pets ", "text": "", "input": "Find the average weight for each pet type.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "output": "PROJECT AVG(weight), pettype FROM AGGREGATE COUNT(*), AVG(weight) GROUP BY pettype FROM pets ", "text": "", "input": "What is the average weight for each type of pet?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "output": "PROJECT DISTINCT T1.fname, T1.age FROM JOIN AS T1 FROM student WITH AS T2 FROM has_pet ON T1.stuid = T2.stuid ", "text": "", "input": "Find the first name and age of students who have a pet.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "output": "PROJECT DISTINCT T1.fname, T1.age FROM JOIN AS T1 FROM student WITH AS T2 FROM has_pet ON T1.stuid = T2.stuid ", "text": "", "input": "What are the different first names and ages of the students who do have pets?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "output": "PROJECT T2.petid FROM SELECT WHERE T1.Lname = 'Smith' FROM JOIN AS T1 FROM student WITH AS T2 FROM has_pet ON T1.stuid = T2.stuid ", "text": "", "input": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "output": "PROJECT T2.petid FROM SELECT WHERE T1.Lname = 'Smith' FROM JOIN AS T1 FROM student WITH AS T2 FROM has_pet ON T1.stuid = T2.stuid ", "text": "", "input": "What is the id of the pet owned by the student whose last name is 'Smith'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "output": "PROJECT COUNT(*), T1.stuid FROM AGGREGATE COUNT(*) GROUP BY T1.stuid FROM JOIN AS T1 FROM student WITH AS T2 FROM has_pet ON T1.stuid = T2.stuid ", "text": "", "input": "Find the number of pets for each student who has any pet and student id.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "output": "PROJECT COUNT(*), t1.stuid FROM AGGREGATE COUNT(*) GROUP BY t1.stuid FROM JOIN AS t1 FROM student WITH AS t2 FROM has_pet ON t1.stuid = t2.stuid ", "text": "", "input": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "output": "PROJECT T1.fname, T1.sex FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T1.stuid FROM JOIN AS T1 FROM student WITH AS T2 FROM has_pet ON T1.stuid = T2.stuid ", "text": "", "input": "Find the first name and gender of student who have more than one pet.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "output": "PROJECT T1.fname, T1.sex FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T1.stuid FROM JOIN AS T1 FROM student WITH AS T2 FROM has_pet ON T1.stuid = T2.stuid ", "text": "", "input": "What is the first name and gender of the all the students who have more than one pet?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "output": "PROJECT T1.lname FROM SELECT WHERE T3.pet_age = 3 AND T3.pettype = 'cat' FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T3.petid = T2.petid ON T1.stuid = T2.stuid ", "text": "", "input": "Find the last name of the student who has a cat that is age 3.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "output": "PROJECT T1.lname FROM SELECT WHERE T3.pet_age = 3 AND T3.pettype = 'cat' FROM JOIN AS T1 FROM student WITH JOIN AS T2 FROM has_pet WITH AS T3 FROM pets ON T3.petid = T2.petid ON T1.stuid = T2.stuid ", "text": "", "input": "What is the last name of the student who has a cat that is 3 years old?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "output": "PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM SELECT WHERE stuid NOT IN PROJECT stuid FROM has_pet FROM student ", "text": "", "input": "Find the average age of students who do not have any pet .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "output": "PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM SELECT WHERE stuid NOT IN PROJECT stuid FROM has_pet FROM student ", "text": "", "input": "What is the average age for all students who do not own any pets ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID)); CREATE TABLE Has_Pet ( StuID number, PetID number, FOREIGN KEY(StuID) REFERENCES Student (StuID), FOREIGN KEY(PetID) REFERENCES Pets (PetID)); CREATE TABLE Pets ( PetID number, PetType text, pet_age number, weight number, PRIMARY KEY(PetID)); "}, {"sql": "SELECT count(*) FROM CONTINENTS;", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM CONTINENTS ", "text": "", "input": "How many continents are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM CONTINENTS;", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM CONTINENTS ", "text": "", "input": "What is the number of continents?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "output": "PROJECT T1.ContId, T1.Continent, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.ContId FROM JOIN AS T1 FROM CONTINENTS WITH AS T2 FROM COUNTRIES ON T1.ContId = T2.Continent ", "text": "", "input": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "output": "PROJECT T1.ContId, T1.Continent, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.ContId FROM JOIN AS T1 FROM CONTINENTS WITH AS T2 FROM COUNTRIES ON T1.ContId = T2.Continent ", "text": "", "input": "For each continent, list its id, name, and how many countries it has?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM COUNTRIES;", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM COUNTRIES ", "text": "", "input": "How many countries are listed?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM COUNTRIES;", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM COUNTRIES ", "text": "", "input": "How many countries exist?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "output": "PROJECT T1.FullName, T1.Id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.Id FROM JOIN AS T1 FROM CAR_MAKERS WITH AS T2 FROM MODEL_LIST ON T1.Id = T2.Maker ", "text": "", "input": "How many models does each car maker produce? List maker full name, id and the number.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "output": "PROJECT T1.FullName, T1.Id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.Id FROM JOIN AS T1 FROM CAR_MAKERS WITH AS T2 FROM MODEL_LIST ON T1.Id = T2.Maker ", "text": "", "input": "What is the full name of each car maker, along with its id and how many models it produces?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY ASC T2.horsepower FROM PROJECT T1.Model FROM JOIN AS T1 FROM CAR_NAMES WITH AS T2 FROM CARS_DATA ON T1.MakeId = T2.Id ", "text": "", "input": "Which model of the car has the minimum horsepower?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY ASC T2.horsepower FROM PROJECT T1.Model FROM JOIN AS T1 FROM CAR_NAMES WITH AS T2 FROM CARS_DATA ON T1.MakeId = T2.Id ", "text": "", "input": "What is the model of the car with the smallest amount of horsepower?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "output": "PROJECT T1.model FROM SELECT WHERE T2.Weight < PROJECT AVG(Weight) FROM AGGREGATE AVG(Weight) FROM CARS_DATA FROM JOIN AS T1 FROM CAR_NAMES WITH AS T2 FROM CARS_DATA ON T1.MakeId = T2.Id ", "text": "", "input": "Find the model of the car whose weight is below the average weight.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)", "output": "PROJECT T1.model FROM SELECT WHERE T2.Weight < PROJECT AVG(Weight) FROM AGGREGATE AVG(Weight) FROM CARS_DATA FROM JOIN AS T1 FROM CAR_NAMES WITH AS T2 FROM CARS_DATA ON T1.MakeId = T2.Id ", "text": "", "input": "What is the model for the car with a weight smaller than the average?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "output": "PROJECT DISTINCT T1.Maker FROM SELECT WHERE T4.year = '1970' FROM JOIN AS T1 FROM CAR_MAKERS WITH JOIN AS T2 FROM MODEL_LIST WITH JOIN AS T3 FROM CAR_NAMES WITH AS T4 FROM CARS_DATA ON T3.MakeId = T4.id ON T2.model = T3.model ON T1.Id = T2.Maker ", "text": "", "input": "Find the name of the makers that produced some cars in the year of 1970?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "output": "PROJECT DISTINCT T1.Maker FROM SELECT WHERE T4.year = '1970' FROM JOIN AS T1 FROM CAR_MAKERS WITH JOIN AS T2 FROM MODEL_LIST WITH JOIN AS T3 FROM CAR_NAMES WITH AS T4 FROM CARS_DATA ON T3.MakeId = T4.id ON T2.model = T3.model ON T1.Id = T2.Maker ", "text": "", "input": "What is the name of the different car makers who produced a car in 1970?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "output": "PROJECT T2.Make, T1.Year FROM SELECT WHERE T1.Year = PROJECT MIN(YEAR) FROM AGGREGATE MIN(YEAR) FROM CARS_DATA FROM JOIN AS T1 FROM CARS_DATA WITH AS T2 FROM CAR_NAMES ON T1.Id = T2.MakeId ", "text": "", "input": "Find the make and production time of the cars that were produced in the earliest year?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "output": "PROJECT T2.Make, T1.Year FROM SELECT WHERE T1.Year = PROJECT MIN(YEAR) FROM AGGREGATE MIN(YEAR) FROM CARS_DATA FROM JOIN AS T1 FROM CARS_DATA WITH AS T2 FROM CAR_NAMES ON T1.Id = T2.MakeId ", "text": "", "input": "What is the maker of the carr produced in the earliest year and what year was it?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "output": "PROJECT DISTINCT T1.model FROM SELECT WHERE T3.year > 1980 FROM JOIN AS T1 FROM MODEL_LIST WITH JOIN AS T2 FROM CAR_NAMES WITH AS T3 FROM CARS_DATA ON T2.MakeId = T3.id ON T1.model = T2.model ", "text": "", "input": "Which distinct car models are the produced after 1980?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "output": "PROJECT DISTINCT T1.model FROM SELECT WHERE T3.year > 1980 FROM JOIN AS T1 FROM MODEL_LIST WITH JOIN AS T2 FROM CAR_NAMES WITH AS T3 FROM CARS_DATA ON T2.MakeId = T3.id ON T1.model = T2.model ", "text": "", "input": "What are the different models for the cards produced after 1980?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "output": "PROJECT T1.Continent, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.Continent FROM JOIN AS T1 FROM CONTINENTS WITH JOIN AS T2 FROM COUNTRIES WITH AS T3 FROM car_makers ON T2.CountryId = T3.Country ON T1.ContId = T2.continent ", "text": "", "input": "How many car makers are there in each continents? List the continent name and the count.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "output": "PROJECT T1.Continent, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.Continent FROM JOIN AS T1 FROM CONTINENTS WITH JOIN AS T2 FROM COUNTRIES WITH AS T3 FROM car_makers ON T2.CountryId = T3.Country ON T1.ContId = T2.continent ", "text": "", "input": "What is the name of each continent and how many car makers are there in each one?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.CountryName FROM AGGREGATE COUNT(*) GROUP BY T1.Country FROM JOIN AS T1 FROM CAR_MAKERS WITH AS T2 FROM COUNTRIES ON T1.Country = T2.CountryId ", "text": "", "input": "Which of the countries has the most car makers? List the country name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.CountryName FROM AGGREGATE COUNT(*) GROUP BY T1.Country FROM JOIN AS T1 FROM CAR_MAKERS WITH AS T2 FROM COUNTRIES ON T1.Country = T2.CountryId ", "text": "", "input": "What is the name of the country with the most car makers?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "output": "PROJECT COUNT(*), t2.fullname FROM AGGREGATE COUNT(*) GROUP BY t2.id FROM JOIN AS t1 FROM model_list WITH AS t2 FROM car_makers ON t1.maker = t2.id ", "text": "", "input": "How many car models are produced by each maker ? Only list the count and the maker full name .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "output": "PROJECT COUNT(*), T2.FullName, T2.id FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM MODEL_LIST WITH AS T2 FROM CAR_MAKERS ON T1.Maker = T2.Id ", "text": "", "input": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "output": "PROJECT T1.Accelerate FROM SELECT WHERE T2.Make = 'amc hornet sportabout (sw)' FROM JOIN AS T1 FROM CARS_DATA WITH AS T2 FROM CAR_NAMES ON T1.Id = T2.MakeId ", "text": "", "input": "What is the accelerate of the car make amc hornet sportabout (sw)?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "output": "PROJECT T1.Accelerate FROM SELECT WHERE T2.Make = 'amc hornet sportabout (sw)' FROM JOIN AS T1 FROM CARS_DATA WITH AS T2 FROM CAR_NAMES ON T1.Id = T2.MakeId ", "text": "", "input": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.CountryName = 'france' FROM JOIN AS T1 FROM CAR_MAKERS WITH AS T2 FROM COUNTRIES ON T1.Country = T2.CountryId ", "text": "", "input": "How many car makers are there in france?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.CountryName = 'france' FROM JOIN AS T1 FROM CAR_MAKERS WITH AS T2 FROM COUNTRIES ON T1.Country = T2.CountryId ", "text": "", "input": "What is the number of makers of care in France?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T3.CountryName = 'usa' FROM JOIN AS T1 FROM MODEL_LIST WITH JOIN AS T2 FROM CAR_MAKERS WITH AS T3 FROM COUNTRIES ON T2.Country = T3.CountryId ON T1.Maker = T2.Id ", "text": "", "input": "How many car models are produced in the usa?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T3.CountryName = 'usa' FROM JOIN AS T1 FROM MODEL_LIST WITH JOIN AS T2 FROM CAR_MAKERS WITH AS T3 FROM COUNTRIES ON T2.Country = T3.CountryId ON T1.Maker = T2.Id ", "text": "", "input": "What is the count of the car models produced in the United States?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "output": "PROJECT AVG(mpg) FROM AGGREGATE AVG(mpg) FROM SELECT WHERE Cylinders = 4 FROM CARS_DATA ", "text": "", "input": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "output": "PROJECT AVG(mpg) FROM AGGREGATE AVG(mpg) FROM SELECT WHERE Cylinders = 4 FROM CARS_DATA ", "text": "", "input": "What is the average miles per gallon of all the cards with 4 cylinders?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "output": "PROJECT MIN(weight) FROM AGGREGATE MIN(weight) FROM SELECT WHERE cylinders = 8 AND year = 1974 FROM cars_data ", "text": "", "input": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974", "output": "PROJECT MIN(weight) FROM AGGREGATE MIN(weight) FROM SELECT WHERE cylinders = 8 AND year = 1974 FROM cars_data ", "text": "", "input": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "output": "PROJECT Maker, Model FROM MODEL_LIST ", "text": "", "input": "What are all the makers and models?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT Maker ,  Model FROM MODEL_LIST;", "output": "PROJECT Maker, Model FROM MODEL_LIST ", "text": "", "input": "What are the makers and models?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "output": "PROJECT T1.CountryName, T1.CountryId FROM SELECT WHERE COUNT(*) >= 1 FROM AGGREGATE COUNT(*) GROUP BY T1.CountryId FROM JOIN AS T1 FROM COUNTRIES WITH AS T2 FROM CAR_MAKERS ON T1.CountryId = T2.Country ", "text": "", "input": "What are the countries having at least one car maker? List name and id.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "output": "PROJECT T1.CountryName, T1.CountryId FROM SELECT WHERE COUNT(*) >= 1 FROM AGGREGATE COUNT(*) GROUP BY T1.CountryId FROM JOIN AS T1 FROM COUNTRIES WITH AS T2 FROM CAR_MAKERS ON T1.CountryId = T2.Country ", "text": "", "input": "What are the names and ids of all countries with at least one car maker?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE horsepower > 150 FROM CARS_DATA ", "text": "", "input": "What is the number of the cars with horsepower more than 150?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE horsepower > 150 FROM CARS_DATA ", "text": "", "input": "What is the number of cars with a horsepower greater than 150?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "output": "PROJECT AVG(Weight), YEAR FROM AGGREGATE COUNT(*), AVG(Weight) GROUP BY YEAR FROM CARS_DATA ", "text": "", "input": "What is the average weight of cars each year?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "output": "PROJECT AVG(Weight), YEAR FROM AGGREGATE COUNT(*), AVG(Weight) GROUP BY YEAR FROM CARS_DATA ", "text": "", "input": "What is the average weight and year for each year?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "output": "PROJECT T1.CountryName FROM SELECT WHERE COUNT(*) >= 3 FROM AGGREGATE COUNT(*) GROUP BY T1.CountryName FROM SELECT WHERE T2.Continent = 'europe' FROM JOIN AS T2 FROM CONTINENTS WITH JOIN AS T1 FROM COUNTRIES WITH AS T3 FROM CAR_MAKERS ON T1.CountryId = T3.Country ON T1.Continent = T2.ContId ", "text": "", "input": "Which countries in europe have at least 3 car manufacturers?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "output": "PROJECT T1.CountryName FROM SELECT WHERE COUNT(*) >= 3 FROM AGGREGATE COUNT(*) GROUP BY T1.CountryName FROM SELECT WHERE T2.Continent = 'europe' FROM JOIN AS T2 FROM CONTINENTS WITH JOIN AS T1 FROM COUNTRIES WITH AS T3 FROM CAR_MAKERS ON T1.CountryId = T3.Country ON T1.Continent = T2.ContId ", "text": "", "input": "What are the names of all European countries with at least 3 manufacturers?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY DESC T2.horsepower FROM PROJECT T2.horsepower, T1.Make FROM SELECT WHERE T2.cylinders = 3 FROM JOIN AS T1 FROM CAR_NAMES WITH AS T2 FROM CARS_DATA ON T1.MakeId = T2.Id ", "text": "", "input": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY DESC T2.horsepower FROM PROJECT T2.horsepower, T1.Make FROM SELECT WHERE T2.cylinders = 3 FROM JOIN AS T1 FROM CAR_NAMES WITH AS T2 FROM CARS_DATA ON T1.MakeId = T2.Id ", "text": "", "input": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY DESC T2.mpg FROM PROJECT T1.Model FROM JOIN AS T1 FROM CAR_NAMES WITH AS T2 FROM CARS_DATA ON T1.MakeId = T2.Id ", "text": "", "input": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "output": "LIMIT 1 FROM ORDER BY DESC t2.mpg FROM PROJECT t1.model FROM JOIN AS t1 FROM car_names WITH AS t2 FROM cars_data ON t1.makeid = t2.id ", "text": "", "input": "What is the car model with the highest mpg ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "output": "PROJECT AVG(horsepower) FROM AGGREGATE AVG(horsepower) FROM SELECT WHERE YEAR < 1980 FROM CARS_DATA ", "text": "", "input": "What is the average horsepower of the cars before 1980?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "select avg(horsepower) from cars_data where year  <  1980;", "output": "PROJECT AVG(horsepower) FROM AGGREGATE AVG(horsepower) FROM SELECT WHERE year < 1980 FROM cars_data ", "text": "", "input": "What is the average horsepower for all cars produced before 1980 ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "output": "PROJECT AVG(T2.edispl) FROM AGGREGATE AVG(T2.edispl) FROM SELECT WHERE T1.Model = 'volvo' FROM JOIN AS T1 FROM CAR_NAMES WITH AS T2 FROM CARS_DATA ON T1.MakeId = T2.Id ", "text": "", "input": "What is the average edispl of the cars of model volvo?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "output": "PROJECT AVG(T2.edispl) FROM AGGREGATE AVG(T2.edispl) FROM SELECT WHERE T1.Model = 'volvo' FROM JOIN AS T1 FROM CAR_NAMES WITH AS T2 FROM CARS_DATA ON T1.MakeId = T2.Id ", "text": "", "input": "What is the average edispl for all volvos?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "output": "PROJECT MAX(Accelerate), Cylinders FROM AGGREGATE MAX(Accelerate), COUNT(*) GROUP BY Cylinders FROM CARS_DATA ", "text": "", "input": "What is the maximum accelerate for different number of cylinders?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "output": "PROJECT MAX(Accelerate), Cylinders FROM AGGREGATE MAX(Accelerate), COUNT(*) GROUP BY Cylinders FROM CARS_DATA ", "text": "", "input": "What is the maximum accelerate for all the different cylinders?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Model FROM AGGREGATE COUNT(*) GROUP BY Model FROM CAR_NAMES ", "text": "", "input": "Which model has the most version(make) of cars?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Model FROM AGGREGATE COUNT(*) GROUP BY Model FROM CAR_NAMES ", "text": "", "input": "What model has the most different versions?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Cylinders > 4 FROM CARS_DATA ", "text": "", "input": "How many cars have more than 4 cylinders?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Cylinders > 4 FROM CARS_DATA ", "text": "", "input": "What is the number of cars with more than 4 cylinders?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE YEAR = 1980 FROM CARS_DATA ", "text": "", "input": "how many cars were produced in 1980?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE YEAR = 1980 FROM CARS_DATA ", "text": "", "input": "In 1980, how many cars were made?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.FullName = 'American Motor Company' FROM JOIN AS T1 FROM CAR_MAKERS WITH AS T2 FROM MODEL_LIST ON T1.Id = T2.Maker ", "text": "", "input": "How many car models were produced by the maker with full name American Motor Company?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.FullName = 'American Motor Company' FROM JOIN AS T1 FROM CAR_MAKERS WITH AS T2 FROM MODEL_LIST ON T1.Id = T2.Maker ", "text": "", "input": "What is the number of car models created by the car maker American Motor Company?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "output": "PROJECT T1.FullName, T1.Id FROM SELECT WHERE COUNT(*) > 3 FROM AGGREGATE COUNT(*) GROUP BY T1.Id FROM JOIN AS T1 FROM CAR_MAKERS WITH AS T2 FROM MODEL_LIST ON T1.Id = T2.Maker ", "text": "", "input": "Which makers designed more than 3 car models? List full name and the id.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "output": "PROJECT T1.FullName, T1.Id FROM SELECT WHERE COUNT(*) > 3 FROM AGGREGATE COUNT(*) GROUP BY T1.Id FROM JOIN AS T1 FROM CAR_MAKERS WITH AS T2 FROM MODEL_LIST ON T1.Id = T2.Maker ", "text": "", "input": "What are the names and ids of all makers with more than 3 models?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "output": "PROJECT DISTINCT T2.Model FROM SELECT WHERE T3.FullName = 'General Motors' OR T4.weight > 3500 FROM JOIN AS T2 FROM MODEL_LIST WITH JOIN AS T1 FROM CAR_NAMES WITH JOIN AS T4 FROM CARS_DATA WITH AS T3 FROM CAR_MAKERS ON T2.Maker = T3.Id ON T1.MakeId = T4.Id ON T1.Model = T2.Model ", "text": "", "input": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "output": "PROJECT DISTINCT T2.Model FROM SELECT WHERE T3.FullName = 'General Motors' OR T4.weight > 3500 FROM JOIN AS T2 FROM MODEL_LIST WITH JOIN AS T1 FROM CAR_NAMES WITH JOIN AS T4 FROM CARS_DATA WITH AS T3 FROM CAR_MAKERS ON T2.Maker = T3.Id ON T1.MakeId = T4.Id ON T1.Model = T2.Model ", "text": "", "input": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "select distinct year from cars_data where weight between 3000 and 4000;", "output": "PROJECT DISTINCT year FROM SELECT WHERE weight BETWEEN 3000 AND 4000 FROM cars_data ", "text": "", "input": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "select distinct year from cars_data where weight between 3000 and 4000;", "output": "PROJECT DISTINCT year FROM SELECT WHERE weight BETWEEN 3000 AND 4000 FROM cars_data ", "text": "", "input": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY DESC T1.accelerate FROM PROJECT T1.horsepower FROM AS T1 FROM CARS_DATA ", "text": "", "input": "What is the horsepower of the car with the largest accelerate?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY DESC T1.accelerate FROM PROJECT T1.horsepower FROM AS T1 FROM CARS_DATA ", "text": "", "input": "What is the horsepower of the car with the greatest accelerate?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY ASC T1.accelerate FROM PROJECT T1.cylinders FROM SELECT WHERE T2.Model = 'volvo' FROM JOIN AS T1 FROM CARS_DATA WITH AS T2 FROM CAR_NAMES ON T1.Id = T2.MakeId ", "text": "", "input": "For model volvo, how many cylinders does the car with the least accelerate have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY ASC T1.accelerate FROM PROJECT T1.cylinders FROM SELECT WHERE T2.Model = 'volvo' FROM JOIN AS T1 FROM CARS_DATA WITH AS T2 FROM CAR_NAMES ON T1.Id = T2.MakeId ", "text": "", "input": "For a volvo model, how many cylinders does the version with least accelerate have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Accelerate > LIMIT 1 FROM ORDER BY DESC Horsepower FROM PROJECT Accelerate FROM CARS_DATA FROM CARS_DATA ", "text": "", "input": "How many cars have a larger accelerate than the car with the largest horsepower?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Accelerate > LIMIT 1 FROM ORDER BY DESC Horsepower FROM PROJECT Accelerate FROM CARS_DATA FROM CARS_DATA ", "text": "", "input": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "output": "PROJECT COUNT(*) FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY t1.countryid FROM JOIN AS t1 FROM countries WITH AS t2 FROM car_makers ON t1.countryid = t2.country ", "text": "", "input": "How many countries has more than 2 car makers ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2", "output": "PROJECT COUNT(*) FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY t1.countryid FROM JOIN AS t1 FROM countries WITH AS t2 FROM car_makers ON t1.countryid = t2.country ", "text": "", "input": "What is the number of countries with more than 2 car makers ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Cylinders > 6 FROM CARS_DATA ", "text": "", "input": "How many cars has over 6 cylinders?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Cylinders > 6 FROM CARS_DATA ", "text": "", "input": "What is the number of carsw ith over 6 cylinders?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY DESC T2.horsepower FROM PROJECT T1.Model FROM SELECT WHERE T2.Cylinders = 4 FROM JOIN AS T1 FROM CAR_NAMES WITH AS T2 FROM CARS_DATA ON T1.MakeId = T2.Id ", "text": "", "input": "For the cars with 4 cylinders, which model has the largest horsepower?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY DESC T2.horsepower FROM PROJECT T1.Model FROM SELECT WHERE T2.Cylinders = 4 FROM JOIN AS T1 FROM CAR_NAMES WITH AS T2 FROM CARS_DATA ON T1.MakeId = T2.Id ", "text": "", "input": "For all of the 4 cylinder cars, which model has the most horsepower?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "output": "PROJECT T2.MakeId, T2.Make FROM SELECT WHERE T1.Horsepower > PROJECT MIN(Horsepower) FROM AGGREGATE MIN(Horsepower) FROM CARS_DATA AND T1.Cylinders <= 3 FROM JOIN AS T1 FROM CARS_DATA WITH AS T2 FROM CAR_NAMES ON T1.Id = T2.MakeId ", "text": "", "input": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "output": "PROJECT t2.makeid, t2.make FROM SELECT WHERE t1.horsepower > PROJECT MIN(horsepower) FROM AGGREGATE MIN(horsepower) FROM cars_data AND t1.cylinders < 4 FROM JOIN AS t1 FROM cars_data WITH AS t2 FROM car_names ON t1.id = t2.makeid ", "text": "", "input": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "output": "PROJECT MAX(mpg) FROM AGGREGATE MAX(mpg) FROM SELECT WHERE cylinders = 8 OR year < 1980 FROM cars_data ", "text": "", "input": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980", "output": "PROJECT MAX(mpg) FROM AGGREGATE MAX(mpg) FROM SELECT WHERE cylinders = 8 OR year < 1980 FROM cars_data ", "text": "", "input": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "output": "PROJECT DISTINCT T1.model FROM SELECT WHERE T3.weight < 3500 AND T4.FullName <> 'Ford Motor Company' FROM JOIN AS T2 FROM CAR_NAMES WITH JOIN AS T1 FROM MODEL_LIST WITH JOIN AS T4 FROM CAR_MAKERS WITH AS T3 FROM CARS_DATA ON T2.MakeId = T3.Id ON T1.Maker = T4.Id ON T1.Model = T2.Model ", "text": "", "input": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "output": "PROJECT DISTINCT T1.model FROM SELECT WHERE T3.weight < 3500 AND T4.FullName <> 'Ford Motor Company' FROM JOIN AS T2 FROM CAR_NAMES WITH JOIN AS T1 FROM MODEL_LIST WITH JOIN AS T4 FROM CAR_MAKERS WITH AS T3 FROM CARS_DATA ON T2.MakeId = T3.Id ON T1.Maker = T4.Id ON T1.Model = T2.Model ", "text": "", "input": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "output": "EXCEPT PROJECT CountryName FROM countries WITH PROJECT T1.CountryName FROM JOIN AS T1 FROM countries WITH AS T2 FROM CAR_MAKERS ON T1.countryId = T2.Country ", "text": "", "input": "What are the name of the countries where there is not a single car maker?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "output": "EXCEPT PROJECT CountryName FROM countries WITH PROJECT T1.CountryName FROM JOIN AS T1 FROM countries WITH AS T2 FROM CAR_MAKERS ON T1.countryId = T2.Country ", "text": "", "input": "What are the names of the countries with no car makers?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "output": "INTERSECT PROJECT t1.id, t1.maker FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY t1.id FROM JOIN AS t1 FROM car_makers WITH AS t2 FROM model_list ON t1.id = t2.maker WITH PROJECT t1.id, t1.maker FROM SELECT WHERE COUNT(*) > 3 FROM AGGREGATE COUNT(*) GROUP BY t1.id FROM JOIN AS t1 FROM car_makers WITH JOIN AS t2 FROM model_list WITH AS t3 FROM car_names ON t2.model = t3.model ON t1.id = t2.maker ", "text": "", "input": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "output": "INTERSECT PROJECT T1.Id, T1.Maker FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.Id FROM JOIN AS T1 FROM CAR_MAKERS WITH AS T2 FROM MODEL_LIST ON T1.Id = T2.Maker WITH PROJECT T1.Id, T1.Maker FROM SELECT WHERE COUNT(*) > 3 FROM AGGREGATE COUNT(*) GROUP BY T1.Id FROM JOIN AS T1 FROM CAR_MAKERS WITH JOIN AS T2 FROM MODEL_LIST WITH AS T3 FROM CAR_NAMES ON T2.model = T3.model ON T1.Id = T2.Maker ", "text": "", "input": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "output": "UNION PROJECT T1.countryId, T1.CountryName FROM SELECT WHERE COUNT(*) > 3 FROM AGGREGATE COUNT(*) GROUP BY T1.countryId FROM JOIN AS T1 FROM Countries WITH AS T2 FROM CAR_MAKERS ON T1.CountryId = T2.Country WITH PROJECT T1.countryId, T1.CountryName FROM SELECT WHERE T3.Model = 'fiat' FROM JOIN AS T1 FROM Countries WITH JOIN AS T2 FROM CAR_MAKERS WITH AS T3 FROM MODEL_LIST ON T2.Id = T3.Maker ON T1.CountryId = T2.Country ", "text": "", "input": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "output": "UNION PROJECT t1.countryid, t1.countryname FROM SELECT WHERE COUNT(*) > 3 FROM AGGREGATE COUNT(*) GROUP BY t1.countryid FROM JOIN AS t1 FROM countries WITH AS t2 FROM car_makers ON t1.countryid = t2.country WITH PROJECT t1.countryid, t1.countryname FROM SELECT WHERE t3.model = 'fiat' FROM JOIN AS t1 FROM countries WITH JOIN AS t2 FROM car_makers WITH AS t3 FROM model_list ON t2.id = t3.maker ON t1.countryid = t2.country ", "text": "", "input": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE continents ( ContId number, Continent text, PRIMARY KEY(ContId)); CREATE TABLE countries ( CountryId number, CountryName text, Continent number, PRIMARY KEY(CountryId), FOREIGN KEY(Continent) REFERENCES continents (ContId)); CREATE TABLE car_makers ( Id number, Maker text, FullName text, Country text, PRIMARY KEY(Id), FOREIGN KEY(Country) REFERENCES countries (CountryId)); CREATE TABLE model_list ( ModelId number, Maker number, Model text, PRIMARY KEY(ModelId), FOREIGN KEY(Maker) REFERENCES car_makers (Id)); CREATE TABLE car_names ( MakeId number, Model text, Make text, PRIMARY KEY(MakeId), FOREIGN KEY(Model) REFERENCES model_list (Model)); CREATE TABLE cars_data ( Id number, MPG text, Cylinders number, Edispl number, Horsepower text, Weight number, Accelerate number, Year number, PRIMARY KEY(Id), FOREIGN KEY(Id) REFERENCES car_names (MakeId)); "}, {"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "output": "PROJECT Country FROM SELECT WHERE Airline = \"JetBlue Airways\" FROM AIRLINES ", "text": "", "input": "Which country does Airline \"JetBlue Airways\" belong to?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "output": "PROJECT Country FROM SELECT WHERE Airline = \"JetBlue Airways\" FROM AIRLINES ", "text": "", "input": "What country is Jetblue Airways affiliated with?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "output": "PROJECT Abbreviation FROM SELECT WHERE Airline = \"JetBlue Airways\" FROM AIRLINES ", "text": "", "input": "What is the abbreviation of Airline \"JetBlue Airways\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "output": "PROJECT Abbreviation FROM SELECT WHERE Airline = \"JetBlue Airways\" FROM AIRLINES ", "text": "", "input": "Which abbreviation corresponds to Jetblue Airways?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "output": "PROJECT Airline, Abbreviation FROM SELECT WHERE Country = \"USA\" FROM AIRLINES ", "text": "", "input": "List all airline names and their abbreviations in \"USA\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "output": "PROJECT Airline, Abbreviation FROM SELECT WHERE Country = \"USA\" FROM AIRLINES ", "text": "", "input": "What are the airline names and abbreviations for airlines in the USA?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "output": "PROJECT AirportCode, AirportName FROM SELECT WHERE city = \"Anthony\" FROM AIRPORTS ", "text": "", "input": "List the airport code and name in the city of Anthony.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "output": "PROJECT AirportCode, AirportName FROM SELECT WHERE city = \"Anthony\" FROM AIRPORTS ", "text": "", "input": "Give the airport code and airport name corresonding to the city Anthony.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM AIRLINES", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM AIRLINES ", "text": "", "input": "How many airlines do we have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM AIRLINES", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM AIRLINES ", "text": "", "input": "What is the total number of airlines?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM AIRPORTS", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM AIRPORTS ", "text": "", "input": "How many airports do we have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM AIRPORTS", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM AIRPORTS ", "text": "", "input": "Return the number of  airports.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM FLIGHTS ", "text": "", "input": "How many flights do we have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM FLIGHTS ", "text": "", "input": "Return the number of flights.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "output": "PROJECT Airline FROM SELECT WHERE Abbreviation = \"UAL\" FROM AIRLINES ", "text": "", "input": "Which airline has abbreviation 'UAL'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "output": "PROJECT Airline FROM SELECT WHERE Abbreviation = \"UAL\" FROM AIRLINES ", "text": "", "input": "Give the airline with abbreviation 'UAL'.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Country = \"USA\" FROM AIRLINES ", "text": "", "input": "How many airlines are from USA?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Country = \"USA\" FROM AIRLINES ", "text": "", "input": "Return the number of airlines in the USA.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "output": "PROJECT City, Country FROM SELECT WHERE AirportName = \"Alton\" FROM AIRPORTS ", "text": "", "input": "Which city and country is the Alton airport at?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "output": "PROJECT City, Country FROM SELECT WHERE AirportName = \"Alton\" FROM AIRPORTS ", "text": "", "input": "Give the city and country for the Alton airport.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "output": "PROJECT AirportName FROM SELECT WHERE AirportCode = \"AKO\" FROM AIRPORTS ", "text": "", "input": "What is the airport name for airport 'AKO'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "output": "PROJECT AirportName FROM SELECT WHERE AirportCode = \"AKO\" FROM AIRPORTS ", "text": "", "input": "Return the name of the airport with code 'AKO'.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "output": "PROJECT AirportName FROM SELECT WHERE City = \"Aberdeen\" FROM AIRPORTS ", "text": "", "input": "What are airport names at City 'Aberdeen'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "output": "PROJECT AirportName FROM SELECT WHERE City = \"Aberdeen\" FROM AIRPORTS ", "text": "", "input": "What are the names of airports in Aberdeen?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE SourceAirport = \"APG\" FROM FLIGHTS ", "text": "", "input": "How many flights depart from 'APG'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE SourceAirport = \"APG\" FROM FLIGHTS ", "text": "", "input": "Count the number of flights departing from 'APG'.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE DestAirport = \"ATO\" FROM FLIGHTS ", "text": "", "input": "How many flights have destination ATO?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE DestAirport = \"ATO\" FROM FLIGHTS ", "text": "", "input": "Count the number of flights into ATO.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.City = \"Aberdeen\" FROM JOIN AS T1 FROM FLIGHTS WITH AS T2 FROM AIRPORTS ON T1.SourceAirport = T2.AirportCode ", "text": "", "input": "How many flights depart from City Aberdeen?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.City = \"Aberdeen\" FROM JOIN AS T1 FROM FLIGHTS WITH AS T2 FROM AIRPORTS ON T1.SourceAirport = T2.AirportCode ", "text": "", "input": "Return the number of flights departing from Aberdeen.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.City = \"Aberdeen\" FROM JOIN AS T1 FROM FLIGHTS WITH AS T2 FROM AIRPORTS ON T1.DestAirport = T2.AirportCode ", "text": "", "input": "How many flights arriving in Aberdeen city?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.City = \"Aberdeen\" FROM JOIN AS T1 FROM FLIGHTS WITH AS T2 FROM AIRPORTS ON T1.DestAirport = T2.AirportCode ", "text": "", "input": "Return the number of flights arriving in Aberdeen.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\" FROM JOIN AS T2 FROM AIRPORTS WITH JOIN AS T1 FROM FLIGHTS WITH AS T3 FROM AIRPORTS ON T1.SourceAirport = T3.AirportCode ON T1.DestAirport = T2.AirportCode ", "text": "", "input": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.City = \"Ashley\" AND T3.City = \"Aberdeen\" FROM JOIN AS T2 FROM AIRPORTS WITH JOIN AS T1 FROM FLIGHTS WITH AS T3 FROM AIRPORTS ON T1.SourceAirport = T3.AirportCode ON T1.DestAirport = T2.AirportCode ", "text": "", "input": "How many flights fly from Aberdeen to Ashley?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.Airline = \"JetBlue Airways\" FROM JOIN AS T1 FROM FLIGHTS WITH AS T2 FROM AIRLINES ON T1.Airline = T2.uid ", "text": "", "input": "How many flights does airline 'JetBlue Airways' have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.Airline = \"JetBlue Airways\" FROM JOIN AS T1 FROM FLIGHTS WITH AS T2 FROM AIRLINES ON T1.Airline = T2.uid ", "text": "", "input": "Give the number of Jetblue Airways flights.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\" FROM JOIN AS T2 FROM FLIGHTS WITH AS T1 FROM AIRLINES ON T2.Airline = T1.uid ", "text": "", "input": "How many 'United Airlines' flights go to Airport 'ASY'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.Airline = \"United Airlines\" AND T2.DestAirport = \"ASY\" FROM JOIN AS T2 FROM FLIGHTS WITH AS T1 FROM AIRLINES ON T2.Airline = T1.uid ", "text": "", "input": "Count the number of United Airlines flights arriving in ASY Airport.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\" FROM JOIN AS T2 FROM FLIGHTS WITH AS T1 FROM AIRLINES ON T2.Airline = T1.uid ", "text": "", "input": "How many 'United Airlines' flights depart from Airport 'AHD'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.Airline = \"United Airlines\" AND T2.SourceAirport = \"AHD\" FROM JOIN AS T2 FROM FLIGHTS WITH AS T1 FROM AIRLINES ON T2.Airline = T1.uid ", "text": "", "input": "Return the number of United Airlines flights leaving from AHD Airport.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\" FROM JOIN AS T1 FROM FLIGHTS WITH JOIN AS T2 FROM AIRPORTS WITH AS T1 FROM FLIGHTS ON T3.uid = T1.Airline ON T1.DestAirport = T2.AirportCode ", "text": "", "input": "How many United Airlines flights go to City 'Aberdeen'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.City = \"Aberdeen\" AND T3.Airline = \"United Airlines\" FROM JOIN AS T1 FROM FLIGHTS WITH JOIN AS T2 FROM AIRPORTS WITH AS T1 FROM FLIGHTS ON T3.uid = T1.Airline ON T1.DestAirport = T2.AirportCode ", "text": "", "input": "Count the number of United Airlines flights that arrive in Aberdeen.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.City FROM AGGREGATE COUNT(*) GROUP BY T1.City FROM JOIN AS T1 FROM AIRPORTS WITH AS T2 FROM FLIGHTS ON T1.AirportCode = T2.DestAirport ", "text": "", "input": "Which city has most number of arriving flights?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.City FROM AGGREGATE COUNT(*) GROUP BY T1.City FROM JOIN AS T1 FROM AIRPORTS WITH AS T2 FROM FLIGHTS ON T1.AirportCode = T2.DestAirport ", "text": "", "input": "Which city has the most frequent destination airport?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.City FROM AGGREGATE COUNT(*) GROUP BY T1.City FROM JOIN AS T1 FROM AIRPORTS WITH AS T2 FROM FLIGHTS ON T1.AirportCode = T2.SourceAirport ", "text": "", "input": "Which city has most number of departing flights?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.City FROM AGGREGATE COUNT(*) GROUP BY T1.City FROM JOIN AS T1 FROM AIRPORTS WITH AS T2 FROM FLIGHTS ON T1.AirportCode = T2.SourceAirport ", "text": "", "input": "Which city is the most frequent source airport?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.AirportCode FROM AGGREGATE COUNT(*) GROUP BY T1.AirportCode FROM JOIN AS T1 FROM AIRPORTS WITH AS T2 FROM FLIGHTS ON T1.AirportCode = T2.DestAirport ", "text": "", "input": "What is the code of airport that has the highest number of flights?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.AirportCode FROM AGGREGATE COUNT(*) GROUP BY T1.AirportCode FROM JOIN AS T1 FROM AIRPORTS WITH AS T2 FROM FLIGHTS ON T1.AirportCode = T2.DestAirport ", "text": "", "input": "What is the airport code of the airport with the most flights?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "output": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT T1.AirportCode FROM AGGREGATE COUNT(*) GROUP BY T1.AirportCode FROM JOIN AS T1 FROM AIRPORTS WITH AS T2 FROM FLIGHTS ON T1.AirportCode = T2.DestAirport ", "text": "", "input": "What is the code of airport that has fewest number of flights?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "output": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT T1.AirportCode FROM AGGREGATE COUNT(*) GROUP BY T1.AirportCode FROM JOIN AS T1 FROM AIRPORTS WITH AS T2 FROM FLIGHTS ON T1.AirportCode = T2.DestAirport ", "text": "", "input": "Give the code of the airport with the least flights.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.Airline FROM AGGREGATE COUNT(*) GROUP BY T1.Airline FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "Which airline has most number of flights?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.Airline FROM AGGREGATE COUNT(*) GROUP BY T1.Airline FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "What airline serves the most flights?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "output": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT T1.Abbreviation, T1.Country FROM AGGREGATE COUNT(*) GROUP BY T1.Airline FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "Find the abbreviation and country of the airline that has fewest number of flights?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "output": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT T1.Abbreviation, T1.Country FROM AGGREGATE COUNT(*) GROUP BY T1.Airline FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "output": "PROJECT T1.Airline FROM SELECT WHERE T2.SourceAirport = \"AHD\" FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "What are airlines that have some flight departing from airport 'AHD'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "output": "PROJECT T1.Airline FROM SELECT WHERE T2.SourceAirport = \"AHD\" FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "Which airlines have a flight with source airport AHD?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "output": "PROJECT T1.Airline FROM SELECT WHERE T2.DestAirport = \"AHD\" FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "What are airlines that have flights arriving at airport 'AHD'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "output": "PROJECT T1.Airline FROM SELECT WHERE T2.DestAirport = \"AHD\" FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "Which airlines have a flight with destination airport AHD?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "output": "INTERSECT PROJECT T1.Airline FROM SELECT WHERE T2.SourceAirport = \"APG\" FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline WITH PROJECT T1.Airline FROM SELECT WHERE T2.SourceAirport = \"CVO\" FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "output": "INTERSECT PROJECT T1.Airline FROM SELECT WHERE T2.SourceAirport = \"APG\" FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline WITH PROJECT T1.Airline FROM SELECT WHERE T2.SourceAirport = \"CVO\" FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "Which airlines have departing flights from both APG and CVO airports?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "output": "EXCEPT PROJECT T1.Airline FROM SELECT WHERE T2.SourceAirport = \"CVO\" FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline WITH PROJECT T1.Airline FROM SELECT WHERE T2.SourceAirport = \"APG\" FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "output": "EXCEPT PROJECT T1.Airline FROM SELECT WHERE T2.SourceAirport = \"CVO\" FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline WITH PROJECT T1.Airline FROM SELECT WHERE T2.SourceAirport = \"APG\" FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "Which airlines have departures from CVO but not from APG airports?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "output": "PROJECT T1.Airline FROM SELECT WHERE COUNT(*) > 10 FROM AGGREGATE COUNT(*) GROUP BY T1.Airline FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "Find all airlines that have at least 10 flights.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "output": "PROJECT T1.Airline FROM SELECT WHERE COUNT(*) > 10 FROM AGGREGATE COUNT(*) GROUP BY T1.Airline FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "Which airlines have at least 10 flights?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "output": "PROJECT T1.Airline FROM SELECT WHERE COUNT(*) < 200 FROM AGGREGATE COUNT(*) GROUP BY T1.Airline FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "Find all airlines that have fewer than 200 flights.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "output": "PROJECT T1.Airline FROM SELECT WHERE COUNT(*) < 200 FROM AGGREGATE COUNT(*) GROUP BY T1.Airline FROM JOIN AS T1 FROM AIRLINES WITH AS T2 FROM FLIGHTS ON T1.uid = T2.Airline ", "text": "", "input": "Which airlines have less than 200 flights?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "output": "PROJECT T1.FlightNo FROM SELECT WHERE T2.Airline = \"United Airlines\" FROM JOIN AS T2 FROM AIRLINES WITH AS T1 FROM FLIGHTS ON T2.uid = T1.Airline ", "text": "", "input": "What are flight numbers of Airline \"United Airlines\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "output": "PROJECT T1.FlightNo FROM SELECT WHERE T2.Airline = \"United Airlines\" FROM JOIN AS T2 FROM AIRLINES WITH AS T1 FROM FLIGHTS ON T2.uid = T1.Airline ", "text": "", "input": "Which flight numbers correspond to United Airlines flights?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "output": "PROJECT FlightNo FROM SELECT WHERE SourceAirport = \"APG\" FROM FLIGHTS ", "text": "", "input": "What are flight numbers of flights departing from Airport \"APG\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "output": "PROJECT FlightNo FROM SELECT WHERE SourceAirport = \"APG\" FROM FLIGHTS ", "text": "", "input": "Give the flight numbers of flights leaving from APG.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "output": "PROJECT FlightNo FROM SELECT WHERE DestAirport = \"APG\" FROM FLIGHTS ", "text": "", "input": "What are flight numbers of flights arriving at Airport \"APG\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "output": "PROJECT FlightNo FROM SELECT WHERE DestAirport = \"APG\" FROM FLIGHTS ", "text": "", "input": "Give the flight numbers of flights landing at APG.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "output": "PROJECT T1.FlightNo FROM SELECT WHERE T2.City = \"Aberdeen\" FROM JOIN AS T1 FROM FLIGHTS WITH AS T2 FROM AIRPORTS ON T1.SourceAirport = T2.AirportCode ", "text": "", "input": "What are flight numbers of flights departing from City \"Aberdeen \"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "output": "PROJECT T1.FlightNo FROM SELECT WHERE T2.City = \"Aberdeen\" FROM JOIN AS T1 FROM FLIGHTS WITH AS T2 FROM AIRPORTS ON T1.SourceAirport = T2.AirportCode ", "text": "", "input": "Give the flight numbers of flights leaving from Aberdeen.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "output": "PROJECT T1.FlightNo FROM SELECT WHERE T2.City = \"Aberdeen\" FROM JOIN AS T1 FROM FLIGHTS WITH AS T2 FROM AIRPORTS ON T1.DestAirport = T2.AirportCode ", "text": "", "input": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "output": "PROJECT T1.FlightNo FROM SELECT WHERE T2.City = \"Aberdeen\" FROM JOIN AS T1 FROM FLIGHTS WITH AS T2 FROM AIRPORTS ON T1.DestAirport = T2.AirportCode ", "text": "", "input": "Give the flight numbers of flights arriving in Aberdeen.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\" FROM JOIN AS T1 FROM Flights WITH AS T2 FROM Airports ON T1.DestAirport = T2.AirportCode ", "text": "", "input": "Find the number of flights landing in the city of Aberdeen or Abilene.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.city = \"Aberdeen\" OR T2.city = \"Abilene\" FROM JOIN AS T1 FROM Flights WITH AS T2 FROM Airports ON T1.DestAirport = T2.AirportCode ", "text": "", "input": "How many flights land in Aberdeen or Abilene?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "output": "PROJECT AirportName FROM SELECT WHERE AirportCode NOT IN UNION PROJECT SourceAirport FROM Flights WITH PROJECT DestAirport FROM Flights FROM Airports ", "text": "", "input": "Find the name of airports which do not have any flight in and out.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "output": "PROJECT AirportName FROM SELECT WHERE AirportCode NOT IN UNION PROJECT SourceAirport FROM Flights WITH PROJECT DestAirport FROM Flights FROM Airports ", "text": "", "input": "Which airports do not have departing or arriving flights?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE airlines ( uid number, Airline text, Abbreviation text, Country text, PRIMARY KEY(uid)); CREATE TABLE airports ( City text, AirportCode text, AirportName text, Country text, CountryAbbrev text, PRIMARY KEY(AirportCode)); CREATE TABLE flights ( Airline number, FlightNo number, SourceAirport text, DestAirport text, PRIMARY KEY(Airline), FOREIGN KEY(DestAirport) REFERENCES airports (AirportCode), FOREIGN KEY(SourceAirport) REFERENCES airports (AirportCode)); "}, {"sql": "SELECT count(*) FROM employee", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM employee ", "text": "", "input": "How many employees are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT count(*) FROM employee", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM employee ", "text": "", "input": "Count the number of employees", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT name FROM employee ORDER BY age", "output": "ORDER BY age FROM PROJECT name FROM employee ", "text": "", "input": "Sort employee names by their age in ascending order.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT name FROM employee ORDER BY age", "output": "ORDER BY age FROM PROJECT name FROM employee ", "text": "", "input": "List the names of employees and sort in ascending order of age.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "output": "PROJECT COUNT(*), city FROM AGGREGATE COUNT(*) GROUP BY city FROM employee ", "text": "", "input": "What is the number of employees from each city?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT count(*) ,  city FROM employee GROUP BY city", "output": "PROJECT COUNT(*), city FROM AGGREGATE COUNT(*) GROUP BY city FROM employee ", "text": "", "input": "Count the number of employees for each city.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "output": "PROJECT city FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY city FROM SELECT WHERE age < 30 FROM employee ", "text": "", "input": "Which cities do more than one employee under age 30 come from?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1", "output": "PROJECT city FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY city FROM SELECT WHERE age < 30 FROM employee ", "text": "", "input": "Find the cities that have more than one employee under age 30.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "output": "PROJECT COUNT(*), LOCATION FROM AGGREGATE COUNT(*) GROUP BY LOCATION FROM shop ", "text": "", "input": "Find the number of shops in each location.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION", "output": "PROJECT COUNT(*), LOCATION FROM AGGREGATE COUNT(*) GROUP BY LOCATION FROM shop ", "text": "", "input": "How many shops are there in each location?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC number_products FROM PROJECT manager_name, district FROM shop ", "text": "", "input": "Find the manager name and district of the shop whose number of products is the largest.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC number_products FROM PROJECT manager_name, district FROM shop ", "text": "", "input": "What are the manager name and district of the shop that sells the largest number of products?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "output": "PROJECT MIN(Number_products), MAX(Number_products) FROM AGGREGATE MAX(Number_products), MIN(Number_products) FROM shop ", "text": "", "input": "find the minimum and maximum number of products of all stores.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT min(Number_products) ,  max(Number_products) FROM shop", "output": "PROJECT MIN(Number_products), MAX(Number_products) FROM AGGREGATE MAX(Number_products), MIN(Number_products) FROM shop ", "text": "", "input": "What are the minimum and maximum number of products across all the shops?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "output": "ORDER BY DESC number_products FROM PROJECT name, LOCATION, district FROM shop ", "text": "", "input": "Return the name, location and district of all shops in descending order of number of products.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC", "output": "ORDER BY DESC number_products FROM PROJECT name, LOCATION, district FROM shop ", "text": "", "input": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "output": "PROJECT name FROM SELECT WHERE number_products > PROJECT AVG(number_products) FROM AGGREGATE AVG(number_products) FROM shop FROM shop ", "text": "", "input": "Find the names of stores whose number products is more than the average number of products.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)", "output": "PROJECT name FROM SELECT WHERE number_products > PROJECT AVG(number_products) FROM AGGREGATE AVG(number_products) FROM shop FROM shop ", "text": "", "input": "Which shops' number products is above the average? Give me the shop names.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t1.name FROM AGGREGATE COUNT(*) GROUP BY t2.Employee_ID FROM JOIN AS t1 FROM employee WITH AS t2 FROM evaluation ON t1.Employee_ID = t2.Employee_ID ", "text": "", "input": "find the name of employee who was awarded the most times in the evaluation.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t1.name FROM AGGREGATE COUNT(*) GROUP BY t2.Employee_ID FROM JOIN AS t1 FROM employee WITH AS t2 FROM evaluation ON t1.Employee_ID = t2.Employee_ID ", "text": "", "input": "Which employee received the most awards in evaluations? Give me the employee name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC t2.bonus FROM PROJECT t1.name FROM JOIN AS t1 FROM employee WITH AS t2 FROM evaluation ON t1.Employee_ID = t2.Employee_ID ", "text": "", "input": "Find the name of the employee who got the highest one time bonus.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC t2.bonus FROM PROJECT t1.name FROM JOIN AS t1 FROM employee WITH AS t2 FROM evaluation ON t1.Employee_ID = t2.Employee_ID ", "text": "", "input": "Which employee received the biggest bonus? Give me the employee name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "output": "PROJECT name FROM SELECT WHERE Employee_ID NOT IN PROJECT Employee_ID FROM evaluation FROM employee ", "text": "", "input": "Find the names of employees who never won any award in the evaluation.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)", "output": "PROJECT name FROM SELECT WHERE Employee_ID NOT IN PROJECT Employee_ID FROM evaluation FROM employee ", "text": "", "input": "What are the names of the employees who never received any evaluation?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t2.name FROM AGGREGATE COUNT(*) GROUP BY t1.shop_id FROM JOIN AS t1 FROM hiring WITH AS t2 FROM shop ON t1.shop_id = t2.shop_id ", "text": "", "input": "What is the name of the shop that is hiring the largest number of employees?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t2.name FROM AGGREGATE COUNT(*) GROUP BY t1.shop_id FROM JOIN AS t1 FROM hiring WITH AS t2 FROM shop ON t1.shop_id = t2.shop_id ", "text": "", "input": "Which shop has the most employees? Give me the shop name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "output": "PROJECT name FROM SELECT WHERE shop_id NOT IN PROJECT shop_id FROM hiring FROM shop ", "text": "", "input": "Find the name of the shops that do not hire any employee.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)", "output": "PROJECT name FROM SELECT WHERE shop_id NOT IN PROJECT shop_id FROM hiring FROM shop ", "text": "", "input": "Which shops run with no employees? Find the shop names", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "output": "PROJECT COUNT(*), t2.name FROM AGGREGATE COUNT(*) GROUP BY t2.name FROM JOIN AS t1 FROM hiring WITH AS t2 FROM shop ON t1.shop_id = t2.shop_id ", "text": "", "input": "Find the number of employees hired in each shop; show the shop name as well.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name", "output": "PROJECT COUNT(*), t2.name FROM AGGREGATE COUNT(*) GROUP BY t2.name FROM JOIN AS t1 FROM hiring WITH AS t2 FROM shop ON t1.shop_id = t2.shop_id ", "text": "", "input": "For each shop, return the number of employees working there and the name of the shop.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT sum(bonus) FROM evaluation", "output": "PROJECT SUM(bonus) FROM AGGREGATE SUM(bonus) FROM evaluation ", "text": "", "input": "What is total bonus given in all evaluations?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT sum(bonus) FROM evaluation", "output": "PROJECT SUM(bonus) FROM AGGREGATE SUM(bonus) FROM evaluation ", "text": "", "input": "Find the total amount of bonus given in all the evaluations.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT * FROM hiring", "output": "PROJECT * FROM hiring ", "text": "", "input": "Give me all the information about hiring.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT * FROM hiring", "output": "PROJECT * FROM hiring ", "text": "", "input": "What is all the information about hiring?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "output": "INTERSECT PROJECT district FROM SELECT WHERE Number_products < 3000 FROM shop WITH PROJECT district FROM SELECT WHERE Number_products > 10000 FROM shop ", "text": "", "input": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000", "output": "INTERSECT PROJECT district FROM SELECT WHERE Number_products < 3000 FROM shop WITH PROJECT district FROM SELECT WHERE Number_products > 10000 FROM shop ", "text": "", "input": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT count(DISTINCT LOCATION) FROM shop", "output": "PROJECT COUNT(DISTINCT LOCATION) FROM AGGREGATE COUNT(DISTINCT LOCATION) FROM shop ", "text": "", "input": "How many different store locations are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT count(DISTINCT LOCATION) FROM shop", "output": "PROJECT COUNT(DISTINCT LOCATION) FROM AGGREGATE COUNT(DISTINCT LOCATION) FROM shop ", "text": "", "input": "Count the number of distinct store locations.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE employee ( Employee_ID number, Name text, Age number, City text, PRIMARY KEY(Employee_ID)); CREATE TABLE shop ( Shop_ID number, Name text, Location text, District text, Number_products number, Manager_name text, PRIMARY KEY(Shop_ID)); CREATE TABLE hiring ( Shop_ID number, Employee_ID number, Start_from text, Is_full_time others, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID), FOREIGN KEY(Shop_ID) REFERENCES shop (Shop_ID)); CREATE TABLE evaluation ( Employee_ID text, Year_awarded text, Bonus number, PRIMARY KEY(Employee_ID), FOREIGN KEY(Employee_ID) REFERENCES employee (Employee_ID)); "}, {"sql": "SELECT count(*) FROM Documents", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Documents ", "text": "", "input": "How many documents do we have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT count(*) FROM Documents", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Documents ", "text": "", "input": "Count the number of documents.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "output": "PROJECT document_id, document_name, document_description FROM Documents ", "text": "", "input": "List document IDs, document names, and document descriptions for all documents.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "output": "PROJECT document_id, document_name, document_description FROM Documents ", "text": "", "input": "What are the ids, names, and descriptions for all documents?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "output": "PROJECT document_name, template_id FROM SELECT WHERE Document_Description LIKE \"%w%\" FROM Documents ", "text": "", "input": "What is the document name and template id for document with description with the letter 'w' in it?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "output": "PROJECT document_name, template_id FROM SELECT WHERE Document_Description LIKE \"%w%\" FROM Documents ", "text": "", "input": "Return the names and template ids for documents that contain the letter w in their description.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "output": "PROJECT document_id, template_id, Document_Description FROM SELECT WHERE document_name = \"Robbin CV\" FROM Documents ", "text": "", "input": "What is the document id, template id and description for document named \"Robbin CV\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "output": "PROJECT document_id, template_id, Document_Description FROM SELECT WHERE document_name = \"Robbin CV\" FROM Documents ", "text": "", "input": "Return the document id, template id, and description for the document with the name Robbin CV.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT count(DISTINCT template_id) FROM Documents", "output": "PROJECT COUNT(DISTINCT template_id) FROM AGGREGATE COUNT(DISTINCT template_id) FROM Documents ", "text": "", "input": "How many different templates do all document use?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT count(DISTINCT template_id) FROM Documents", "output": "PROJECT COUNT(DISTINCT template_id) FROM AGGREGATE COUNT(DISTINCT template_id) FROM Documents ", "text": "", "input": "Count the number of different templates used for documents.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.Template_Type_Code = 'PPT' FROM JOIN AS T1 FROM Documents WITH AS T2 FROM Templates ON T1.Template_ID = T2.Template_ID ", "text": "", "input": "How many documents are using the template with type code 'PPT'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.Template_Type_Code = 'PPT' FROM JOIN AS T1 FROM Documents WITH AS T2 FROM Templates ON T1.Template_ID = T2.Template_ID ", "text": "", "input": "Count the number of documents that use the PPT template type.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "output": "PROJECT template_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY template_id FROM Documents ", "text": "", "input": "Show all template ids and number of documents using each template.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "output": "PROJECT template_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY template_id FROM Documents ", "text": "", "input": "What are all different template ids used for documents, and how many times were each of them used?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.template_id, T2.Template_Type_Code FROM AGGREGATE COUNT(*) GROUP BY T1.template_id FROM JOIN AS T1 FROM Documents WITH AS T2 FROM Templates ON T1.template_id = T2.template_id ", "text": "", "input": "What is the id and type code for the template used by the most documents?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.template_id, T2.Template_Type_Code FROM AGGREGATE COUNT(*) GROUP BY T1.template_id FROM JOIN AS T1 FROM Documents WITH AS T2 FROM Templates ON T1.template_id = T2.template_id ", "text": "", "input": "Return the id and type code of the template that is used for the greatest number of documents.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "output": "PROJECT template_id FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY template_id FROM Documents ", "text": "", "input": "Show ids for all templates that are used by more than one document.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "output": "PROJECT template_id FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY template_id FROM Documents ", "text": "", "input": "What are the template ids of any templates used in more than a single document?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "output": "EXCEPT PROJECT template_id FROM Templates WITH PROJECT template_id FROM Documents ", "text": "", "input": "Show ids for all templates not used by any document.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "output": "EXCEPT PROJECT template_id FROM Templates WITH PROJECT template_id FROM Documents ", "text": "", "input": "What are the ids for templates that are not used in any documents?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT count(*) FROM Templates", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Templates ", "text": "", "input": "How many templates do we have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT count(*) FROM Templates", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Templates ", "text": "", "input": "Count the number of templates.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "output": "PROJECT template_id, version_number, template_type_code FROM Templates ", "text": "", "input": "Show template ids, version numbers, and template type codes for all templates.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "output": "PROJECT template_id, version_number, template_type_code FROM Templates ", "text": "", "input": "What are the ids, version numbers, and type codes for each template?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT DISTINCT template_type_code FROM Templates", "output": "PROJECT DISTINCT template_type_code FROM Templates ", "text": "", "input": "Show all distinct template type codes for all templates.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT DISTINCT template_type_code FROM Templates", "output": "PROJECT DISTINCT template_type_code FROM Templates ", "text": "", "input": "What are the different template type codes?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "output": "PROJECT template_id FROM SELECT WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\" FROM Templates ", "text": "", "input": "What are the ids of templates with template type code PP or PPT?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "output": "PROJECT template_id FROM SELECT WHERE template_type_code = \"PP\" OR template_type_code = \"PPT\" FROM Templates ", "text": "", "input": "Return the ids of templates that have the code PP or PPT.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE template_type_code = \"CV\" FROM Templates ", "text": "", "input": "How many templates have template type code CV?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE template_type_code = \"CV\" FROM Templates ", "text": "", "input": "Count the number of templates of the type CV.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "output": "PROJECT version_number, template_type_code FROM SELECT WHERE version_number > 5 FROM Templates ", "text": "", "input": "What is the version number and template type code for the template with version number later than 5?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "output": "PROJECT version_number, template_type_code FROM SELECT WHERE version_number > 5 FROM Templates ", "text": "", "input": "Return the version numbers and template type codes of templates with a version number greater than 5.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "output": "PROJECT template_type_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY template_type_code FROM Templates ", "text": "", "input": "Show all template type codes and number of templates for each.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "output": "PROJECT template_type_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY template_type_code FROM Templates ", "text": "", "input": "What are the different template type codes, and how many templates correspond to each?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT template_type_code FROM AGGREGATE COUNT(*) GROUP BY template_type_code FROM Templates ", "text": "", "input": "Which template type code has most number of templates?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT template_type_code FROM AGGREGATE COUNT(*) GROUP BY template_type_code FROM Templates ", "text": "", "input": "Return the type code of the template type that the most templates belong to.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "output": "PROJECT template_type_code FROM SELECT WHERE COUNT(*) < 3 FROM AGGREGATE COUNT(*) GROUP BY template_type_code FROM Templates ", "text": "", "input": "Show all template type codes with less than three templates.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "output": "PROJECT template_type_code FROM SELECT WHERE COUNT(*) < 3 FROM AGGREGATE COUNT(*) GROUP BY template_type_code FROM Templates ", "text": "", "input": "What are the codes of template types that have fewer than 3 templates?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "output": "PROJECT MIN(Version_Number), template_type_code FROM AGGREGATE MIN(Version_Number) FROM Templates ", "text": "", "input": "What the smallest version number and its template type code?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "output": "PROJECT MIN(Version_Number), template_type_code FROM AGGREGATE MIN(Version_Number) FROM Templates ", "text": "", "input": "Return the lowest version number, along with its corresponding template type code.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "output": "PROJECT T1.template_type_code FROM SELECT WHERE T2.document_name = \"Data base\" FROM JOIN AS T1 FROM Templates WITH AS T2 FROM Documents ON T1.template_id = T2.template_id ", "text": "", "input": "What is the template type code of the template used by document with the name \"Data base\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "output": "PROJECT T1.template_type_code FROM SELECT WHERE T2.document_name = \"Data base\" FROM JOIN AS T1 FROM Templates WITH AS T2 FROM Documents ON T1.template_id = T2.template_id ", "text": "", "input": "Return the template type code of the template that is used by a document named Data base.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "output": "PROJECT T2.document_name FROM SELECT WHERE T1.template_type_code = \"BK\" FROM JOIN AS T1 FROM Templates WITH AS T2 FROM Documents ON T1.template_id = T2.template_id ", "text": "", "input": "Show all document names using templates with template type code BK.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "output": "PROJECT T2.document_name FROM SELECT WHERE T1.template_type_code = \"BK\" FROM JOIN AS T1 FROM Templates WITH AS T2 FROM Documents ON T1.template_id = T2.template_id ", "text": "", "input": "What are the names of documents that use templates with the code BK?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "output": "PROJECT T1.template_type_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.template_type_code FROM JOIN AS T1 FROM Templates WITH AS T2 FROM Documents ON T1.template_id = T2.template_id ", "text": "", "input": "Show all template type codes and the number of documents using each type.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "output": "PROJECT T1.template_type_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.template_type_code FROM JOIN AS T1 FROM Templates WITH AS T2 FROM Documents ON T1.template_id = T2.template_id ", "text": "", "input": "What are the different template type codes, and how many documents use each type?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.template_type_code FROM AGGREGATE COUNT(*) GROUP BY T1.template_type_code FROM JOIN AS T1 FROM Templates WITH AS T2 FROM Documents ON T1.template_id = T2.template_id ", "text": "", "input": "Which template type code is used by most number of documents?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.template_type_code FROM AGGREGATE COUNT(*) GROUP BY T1.template_type_code FROM JOIN AS T1 FROM Templates WITH AS T2 FROM Documents ON T1.template_id = T2.template_id ", "text": "", "input": "Return the code of the template type that is most commonly used in documents.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "output": "EXCEPT PROJECT template_type_code FROM Templates WITH PROJECT template_type_code FROM JOIN AS T1 FROM Templates WITH AS T2 FROM Documents ON T1.template_id = T2.template_id ", "text": "", "input": "Show all template type codes that are not used by any document.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "output": "EXCEPT PROJECT template_type_code FROM Templates WITH PROJECT template_type_code FROM JOIN AS T1 FROM Templates WITH AS T2 FROM Documents ON T1.template_id = T2.template_id ", "text": "", "input": "What are the codes of template types that are not used for any document?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "output": "PROJECT template_type_code, template_type_description FROM Ref_template_types ", "text": "", "input": "Show all template type codes and descriptions.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "output": "PROJECT template_type_code, template_type_description FROM Ref_template_types ", "text": "", "input": "What are the type codes and descriptions for all template types?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "output": "PROJECT template_type_description FROM SELECT WHERE template_type_code = \"AD\" FROM Ref_template_types ", "text": "", "input": "What is the template type descriptions for template type code \"AD\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "output": "PROJECT template_type_description FROM SELECT WHERE template_type_code = \"AD\" FROM Ref_template_types ", "text": "", "input": "Return the template type description of the template type with the code AD.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "output": "PROJECT template_type_code FROM SELECT WHERE template_type_description = \"Book\" FROM Ref_template_types ", "text": "", "input": "What is the template type code for template type description \"Book\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "output": "PROJECT template_type_code FROM SELECT WHERE template_type_description = \"Book\" FROM Ref_template_types ", "text": "", "input": "Return the type code of the template type with the description \"Book\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "output": "PROJECT DISTINCT T1.template_type_description FROM JOIN AS T1 FROM Ref_template_types WITH JOIN AS T2 FROM Templates WITH AS T3 FROM Documents ON T2.Template_ID = T3.template_ID ON T1.template_type_code = T2.template_type_code ", "text": "", "input": "What are the distinct template type descriptions for the templates ever used by any document?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "output": "PROJECT DISTINCT T1.template_type_description FROM JOIN AS T1 FROM Ref_template_types WITH JOIN AS T2 FROM Templates WITH AS T3 FROM Documents ON T2.Template_ID = T3.template_ID ON T1.template_type_code = T2.template_type_code ", "text": "", "input": "Return the different descriptions for templates that have been used in a document.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "output": "PROJECT T2.template_id FROM SELECT WHERE T1.template_type_description = \"Presentation\" FROM JOIN AS T1 FROM Ref_template_types WITH AS T2 FROM Templates ON T1.template_type_code = T2.template_type_code ", "text": "", "input": "What are the template ids with template type description \"Presentation\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "output": "PROJECT T2.template_id FROM SELECT WHERE T1.template_type_description = \"Presentation\" FROM JOIN AS T1 FROM Ref_template_types WITH AS T2 FROM Templates ON T1.template_type_code = T2.template_type_code ", "text": "", "input": "Return the ids corresponding to templates with the description 'Presentation'.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT count(*) FROM Paragraphs", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Paragraphs ", "text": "", "input": "How many paragraphs in total?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT count(*) FROM Paragraphs", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Paragraphs ", "text": "", "input": "Count the number of paragraphs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.document_name = 'Summer Show' FROM JOIN AS T1 FROM Paragraphs WITH AS T2 FROM Documents ON T1.document_ID = T2.document_ID ", "text": "", "input": "How many paragraphs for the document with name 'Summer Show'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.document_name = 'Summer Show' FROM JOIN AS T1 FROM Paragraphs WITH AS T2 FROM Documents ON T1.document_ID = T2.document_ID ", "text": "", "input": "Count the number of paragraphs in the document named 'Summer Show'.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "select other_details from paragraphs where paragraph_text like 'korea'", "output": "PROJECT other_details FROM SELECT WHERE paragraph_text LIKE 'korea' FROM paragraphs ", "text": "", "input": "Show paragraph details for paragraph with text 'Korea ' .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "select other_details from paragraphs where paragraph_text like 'korea'", "output": "PROJECT other_details FROM SELECT WHERE paragraph_text LIKE 'korea' FROM paragraphs ", "text": "", "input": "What are the details for the paragraph that includes the text 'Korea ' ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "output": "PROJECT T1.paragraph_id, T1.paragraph_text FROM SELECT WHERE T2.Document_Name = 'Welcome to NY' FROM JOIN AS T1 FROM Paragraphs WITH AS T2 FROM Documents ON T1.document_id = T2.document_id ", "text": "", "input": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "output": "PROJECT T1.paragraph_id, T1.paragraph_text FROM SELECT WHERE T2.Document_Name = 'Welcome to NY' FROM JOIN AS T1 FROM Paragraphs WITH AS T2 FROM Documents ON T1.document_id = T2.document_id ", "text": "", "input": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "output": "PROJECT T1.paragraph_text FROM SELECT WHERE T2.document_name = \"Customer reviews\" FROM JOIN AS T1 FROM Paragraphs WITH AS T2 FROM Documents ON T1.document_id = T2.document_id ", "text": "", "input": "Show all paragraph texts for the document \"Customer reviews\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "output": "PROJECT T1.paragraph_text FROM SELECT WHERE T2.document_name = \"Customer reviews\" FROM JOIN AS T1 FROM Paragraphs WITH AS T2 FROM Documents ON T1.document_id = T2.document_id ", "text": "", "input": "What are the paragraph texts for the document with the name 'Customer reviews'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "output": "ORDER BY document_id FROM PROJECT document_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY document_id FROM Paragraphs ", "text": "", "input": "Show all document ids and the number of paragraphs in each document. Order by document id.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "output": "ORDER BY document_id FROM PROJECT document_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY document_id FROM Paragraphs ", "text": "", "input": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "output": "PROJECT T1.document_id, T2.document_name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.document_id FROM JOIN AS T1 FROM Paragraphs WITH AS T2 FROM Documents ON T1.document_id = T2.document_id ", "text": "", "input": "Show all document ids, names and the number of paragraphs in each document.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "output": "PROJECT T1.document_id, T2.document_name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.document_id FROM JOIN AS T1 FROM Paragraphs WITH AS T2 FROM Documents ON T1.document_id = T2.document_id ", "text": "", "input": "What are the ids and names of each document, as well as the number of paragraphs in each?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "output": "PROJECT document_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY document_id FROM Paragraphs ", "text": "", "input": "List all document ids with at least two paragraphs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "output": "PROJECT document_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY document_id FROM Paragraphs ", "text": "", "input": "What are the ids of documents that have 2 or more paragraphs?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.document_id, T2.document_name FROM AGGREGATE COUNT(*) GROUP BY T1.document_id FROM JOIN AS T1 FROM Paragraphs WITH AS T2 FROM Documents ON T1.document_id = T2.document_id ", "text": "", "input": "What is the document id and name with greatest number of paragraphs?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.document_id, T2.document_name FROM AGGREGATE COUNT(*) GROUP BY T1.document_id FROM JOIN AS T1 FROM Paragraphs WITH AS T2 FROM Documents ON T1.document_id = T2.document_id ", "text": "", "input": "Return the id and name of the document with the most paragraphs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT document_id FROM AGGREGATE COUNT(*) GROUP BY document_id FROM Paragraphs ", "text": "", "input": "What is the document id with least number of paragraphs?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT document_id FROM AGGREGATE COUNT(*) GROUP BY document_id FROM Paragraphs ", "text": "", "input": "Return the id of the document with the fewest paragraphs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "output": "PROJECT document_id FROM SELECT WHERE COUNT(*) BETWEEN 1 AND 2 FROM AGGREGATE COUNT(*) GROUP BY document_id FROM Paragraphs ", "text": "", "input": "What is the document id with 1 to 2 paragraphs?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "output": "PROJECT document_id FROM SELECT WHERE COUNT(*) BETWEEN 1 AND 2 FROM AGGREGATE COUNT(*) GROUP BY document_id FROM Paragraphs ", "text": "", "input": "Give the ids of documents that have between one and two paragraphs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "output": "INTERSECT PROJECT document_id FROM SELECT WHERE paragraph_text = 'Brazil' FROM Paragraphs WITH PROJECT document_id FROM SELECT WHERE paragraph_text = 'Ireland' FROM Paragraphs ", "text": "", "input": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "output": "INTERSECT PROJECT document_id FROM SELECT WHERE paragraph_text = 'Brazil' FROM Paragraphs WITH PROJECT document_id FROM SELECT WHERE paragraph_text = 'Ireland' FROM Paragraphs ", "text": "", "input": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Template_Types ( Template_Type_Code text, Template_Type_Description text, PRIMARY KEY(Template_Type_Code)); CREATE TABLE Templates ( Template_ID number, Version_Number number, Template_Type_Code text, Date_Effective_From time, Date_Effective_To time, Template_Details text, PRIMARY KEY(Template_ID), FOREIGN KEY(Template_Type_Code) REFERENCES Ref_Template_Types (Template_Type_Code)); CREATE TABLE Documents ( Document_ID number, Template_ID number, Document_Name text, Document_Description text, Other_Details text, PRIMARY KEY(Document_ID), FOREIGN KEY(Template_ID) REFERENCES Templates (Template_ID)); CREATE TABLE Paragraphs ( Paragraph_ID number, Document_ID number, Paragraph_Text text, Other_Details text, PRIMARY KEY(Paragraph_ID), FOREIGN KEY(Document_ID) REFERENCES Documents (Document_ID)); "}, {"sql": "SELECT count(*) FROM teacher", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM teacher ", "text": "", "input": "How many teachers are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT count(*) FROM teacher", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM teacher ", "text": "", "input": "What is the total count of teachers?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Name FROM teacher ORDER BY Age ASC", "output": "ORDER BY ASC Age FROM PROJECT Name FROM teacher ", "text": "", "input": "List the names of teachers in ascending order of age.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Name FROM teacher ORDER BY Age ASC", "output": "ORDER BY ASC Age FROM PROJECT Name FROM teacher ", "text": "", "input": "What are the names of the teachers ordered by ascending age?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Age ,  Hometown FROM teacher", "output": "PROJECT Age, Hometown FROM teacher ", "text": "", "input": "What are the age and hometown of teachers?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Age ,  Hometown FROM teacher", "output": "PROJECT Age, Hometown FROM teacher ", "text": "", "input": "What is the age and hometown of every teacher?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "select name from teacher where hometown != \"little lever urban district\"", "output": "PROJECT name FROM SELECT WHERE hometown <> \"little lever urban district\" FROM teacher ", "text": "", "input": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "select name from teacher where hometown != \"little lever urban district\"", "output": "PROJECT name FROM SELECT WHERE hometown <> \"little lever urban district\" FROM teacher ", "text": "", "input": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "output": "PROJECT Name FROM SELECT WHERE Age = 32 OR Age = 33 FROM teacher ", "text": "", "input": "Show the name of teachers aged either 32 or 33?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33", "output": "PROJECT Name FROM SELECT WHERE Age = 32 OR Age = 33 FROM teacher ", "text": "", "input": "What are the names of the teachers who are aged either 32 or 33?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC Age FROM PROJECT Hometown FROM teacher ", "text": "", "input": "What is the hometown of the youngest teacher?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC Age FROM PROJECT Hometown FROM teacher ", "text": "", "input": "Where is the youngest teacher from?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "output": "PROJECT Hometown, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Hometown FROM teacher ", "text": "", "input": "Show different hometown of teachers and the number of teachers from each hometown.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown", "output": "PROJECT Hometown, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Hometown FROM teacher ", "text": "", "input": "For each hometown, how many teachers are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Hometown FROM AGGREGATE COUNT(*) GROUP BY Hometown FROM teacher ", "text": "", "input": "List the most common hometown of teachers.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Hometown FROM AGGREGATE COUNT(*) GROUP BY Hometown FROM teacher ", "text": "", "input": "What is the most commmon hometowns for teachers?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "output": "PROJECT Hometown FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY Hometown FROM teacher ", "text": "", "input": "Show the hometowns shared by at least two teachers.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2", "output": "PROJECT Hometown FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY Hometown FROM teacher ", "text": "", "input": "What are the towns from which at least two teachers come from?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "output": "PROJECT T3.Name, T2.Course FROM JOIN AS T2 FROM course WITH JOIN AS T1 FROM course_arrange WITH AS T3 FROM teacher ON T1.Teacher_ID = T3.Teacher_ID ON T1.Course_ID = T2.Course_ID ", "text": "", "input": "Show names of teachers and the courses they are arranged to teach.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID", "output": "PROJECT T3.Name, T2.Course FROM JOIN AS T2 FROM course WITH JOIN AS T1 FROM course_arrange WITH AS T3 FROM teacher ON T1.Teacher_ID = T3.Teacher_ID ON T1.Course_ID = T2.Course_ID ", "text": "", "input": "What is the name of each teacher and what course they teach?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "output": "ORDER BY T3.Name FROM PROJECT T3.Name, T2.Course FROM JOIN AS T2 FROM course WITH JOIN AS T1 FROM course_arrange WITH AS T3 FROM teacher ON T1.Teacher_ID = T3.Teacher_ID ON T1.Course_ID = T2.Course_ID ", "text": "", "input": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name", "output": "ORDER BY T3.Name FROM PROJECT T3.Name, T2.Course FROM JOIN AS T2 FROM course WITH JOIN AS T1 FROM course_arrange WITH AS T3 FROM teacher ON T1.Teacher_ID = T3.Teacher_ID ON T1.Course_ID = T2.Course_ID ", "text": "", "input": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "output": "PROJECT T3.Name FROM SELECT WHERE T2.Course = \"Math\" FROM JOIN AS T2 FROM course WITH JOIN AS T1 FROM course_arrange WITH AS T3 FROM teacher ON T1.Teacher_ID = T3.Teacher_ID ON T1.Course_ID = T2.Course_ID ", "text": "", "input": "Show the name of the teacher for the math course.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\"", "output": "PROJECT T3.Name FROM SELECT WHERE T2.Course = \"Math\" FROM JOIN AS T2 FROM course WITH JOIN AS T1 FROM course_arrange WITH AS T3 FROM teacher ON T1.Teacher_ID = T3.Teacher_ID ON T1.Course_ID = T2.Course_ID ", "text": "", "input": "What are the names of the people who teach math courses?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "output": "PROJECT T2.Name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.Name FROM JOIN AS T1 FROM course_arrange WITH AS T2 FROM teacher ON T1.Teacher_ID = T2.Teacher_ID ", "text": "", "input": "Show names of teachers and the number of courses they teach.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name", "output": "PROJECT T2.Name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.Name FROM JOIN AS T1 FROM course_arrange WITH AS T2 FROM teacher ON T1.Teacher_ID = T2.Teacher_ID ", "text": "", "input": "What are the names of the teachers and how many courses do they teach?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "output": "PROJECT T2.Name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T2.Name FROM JOIN AS T1 FROM course_arrange WITH AS T2 FROM teacher ON T1.Teacher_ID = T2.Teacher_ID ", "text": "", "input": "Show names of teachers that teach at least two courses.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "output": "PROJECT T2.Name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T2.Name FROM JOIN AS T1 FROM course_arrange WITH AS T2 FROM teacher ON T1.Teacher_ID = T2.Teacher_ID ", "text": "", "input": "What are the names of the teachers who teach at least two courses?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "output": "PROJECT Name FROM SELECT WHERE Teacher_id NOT IN PROJECT Teacher_id FROM course_arrange FROM teacher ", "text": "", "input": "List the names of teachers who have not been arranged to teach courses.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)", "output": "PROJECT Name FROM SELECT WHERE Teacher_id NOT IN PROJECT Teacher_id FROM course_arrange FROM teacher ", "text": "", "input": "What are the names of the teachers whose courses have not been arranged?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE course ( Course_ID number, Staring_Date text, Course text, PRIMARY KEY(Course_ID)); CREATE TABLE teacher ( Teacher_ID number, Name text, Age text, Hometown text, PRIMARY KEY(Teacher_ID)); CREATE TABLE course_arrange ( Course_ID number, Teacher_ID number, Grade number, PRIMARY KEY(Course_ID), FOREIGN KEY(Teacher_ID) REFERENCES teacher (Teacher_ID), FOREIGN KEY(Course_ID) REFERENCES course (Course_ID)); "}, {"sql": "SELECT count(*) FROM visitor WHERE age  <  30", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE age < 30 FROM visitor ", "text": "", "input": "How many visitors below age 30 are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "output": "ORDER BY DESC Level_of_membership FROM PROJECT name FROM SELECT WHERE Level_of_membership > 4 FROM visitor ", "text": "", "input": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "output": "PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM SELECT WHERE Level_of_membership <= 4 FROM visitor ", "text": "", "input": "What is the average age of the visitors whose membership level is not higher than 4?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "output": "ORDER BY DESC age FROM PROJECT name, Level_of_membership FROM SELECT WHERE Level_of_membership > 4 FROM visitor ", "text": "", "input": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC num_of_staff FROM PROJECT museum_id, name FROM museum ", "text": "", "input": "Find the id and name of the museum that has the most staff members?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "output": "PROJECT AVG(num_of_staff) FROM AGGREGATE AVG(num_of_staff) FROM SELECT WHERE open_year < 2009 FROM museum ", "text": "", "input": "Find the average number of staff working for the museums that were open before 2009.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "output": "PROJECT Num_of_Staff, Open_Year FROM SELECT WHERE name = 'Plaza Museum' FROM museum ", "text": "", "input": "What are the opening year and staff number of the museum named Plaza Museum?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "output": "PROJECT name FROM SELECT WHERE num_of_staff > PROJECT MIN(num_of_staff) FROM AGGREGATE MIN(num_of_staff) FROM SELECT WHERE open_year > 2010 FROM museum FROM museum ", "text": "", "input": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "output": "PROJECT t1.id, t1.name, t1.age FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY t1.id FROM JOIN AS t1 FROM visitor WITH AS t2 FROM visit ON t1.id = t2.visitor_id ", "text": "", "input": "find the id, name and age for visitors who visited some museums more than once.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC SUM(t2.Total_spent) FROM PROJECT t2.visitor_id, t1.name, t1.Level_of_membership FROM AGGREGATE SUM(t2.Total_spent), COUNT(*) GROUP BY t2.visitor_id FROM JOIN AS t1 FROM visitor WITH AS t2 FROM visit ON t1.id = t2.visitor_id ", "text": "", "input": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t2.Museum_ID, t1.name FROM AGGREGATE COUNT(*) GROUP BY t2.Museum_ID FROM JOIN AS t1 FROM museum WITH AS t2 FROM visit ON t1.Museum_ID = t2.Museum_ID ", "text": "", "input": "What are the id and name of the museum visited most times?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "output": "PROJECT name FROM SELECT WHERE Museum_ID NOT IN PROJECT museum_id FROM visit FROM museum ", "text": "", "input": "What is the name of the museum that had no visitor yet?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC t2.num_of_ticket FROM PROJECT t1.name, t1.age FROM JOIN AS t1 FROM visitor WITH AS t2 FROM visit ON t1.id = t2.visitor_id ", "text": "", "input": "Find the name and age of the visitor who bought the most tickets at once.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "output": "PROJECT AVG(num_of_ticket), MAX(num_of_ticket) FROM AGGREGATE MAX(num_of_ticket), AVG(num_of_ticket) FROM visit ", "text": "", "input": "What are the average and maximum number of tickets bought in all visits?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "output": "PROJECT SUM(t2.Total_spent) FROM AGGREGATE SUM(t2.Total_spent) FROM SELECT WHERE t1.Level_of_membership = 1 FROM JOIN AS t1 FROM visitor WITH AS t2 FROM visit ON t1.id = t2.visitor_id ", "text": "", "input": "What is the total ticket expense of the visitors whose membership level is 1?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "output": "INTERSECT PROJECT t1.name FROM SELECT WHERE t3.open_year < 2009 FROM JOIN AS t1 FROM visitor WITH JOIN AS t2 FROM visit WITH AS t3 FROM museum ON t3.Museum_ID = t2.Museum_ID ON t1.id = t2.visitor_id WITH PROJECT t1.name FROM SELECT WHERE t3.open_year > 2011 FROM JOIN AS t1 FROM visitor WITH JOIN AS t2 FROM visit WITH AS t3 FROM museum ON t3.Museum_ID = t2.Museum_ID ON t1.id = t2.visitor_id ", "text": "", "input": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE id NOT IN PROJECT t2.visitor_id FROM SELECT WHERE t1.open_year > 2010 FROM JOIN AS t1 FROM museum WITH AS t2 FROM visit ON t1.Museum_ID = t2.Museum_ID FROM visitor ", "text": "", "input": "Find the number of visitors who did not visit any museum opened after 2010.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE open_year > 2013 OR open_year < 2008 FROM museum ", "text": "", "input": "How many museums were opened after 2013 or before 2008?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE museum ( Museum_ID number, Name text, Num_of_Staff number, Open_Year text, PRIMARY KEY(Museum_ID)); CREATE TABLE visitor ( ID number, Name text, Level_of_membership number, Age number, PRIMARY KEY(ID)); CREATE TABLE visit ( Museum_ID number, visitor_ID text, Num_of_Ticket number, Total_spent number, PRIMARY KEY(Museum_ID), FOREIGN KEY(visitor_ID) REFERENCES visitor (ID), FOREIGN KEY(Museum_ID) REFERENCES museum (Museum_ID)); "}, {"sql": "SELECT count(*) FROM players", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM players ", "text": "", "input": "Find the total number of players.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(*) FROM players", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM players ", "text": "", "input": "How many players are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(*) FROM matches", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM matches ", "text": "", "input": "Find the total number of matches.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(*) FROM matches", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM matches ", "text": "", "input": "Count the number of matches.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "output": "PROJECT first_name, birth_date FROM SELECT WHERE country_code = 'USA' FROM players ", "text": "", "input": "List the first name and birth date of all players from the country with code USA.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "output": "PROJECT first_name, birth_date FROM SELECT WHERE country_code = 'USA' FROM players ", "text": "", "input": "What are the first names and birth dates of players from the USA?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "output": "PROJECT AVG(loser_age), AVG(winner_age) FROM AGGREGATE AVG(loser_age), AVG(winner_age) FROM matches ", "text": "", "input": "Find the average age of losers and winners of all matches.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "output": "PROJECT AVG(loser_age), AVG(winner_age) FROM AGGREGATE AVG(loser_age), AVG(winner_age) FROM matches ", "text": "", "input": "What are the average ages of losers and winners across matches?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT avg(winner_rank) FROM matches", "output": "PROJECT AVG(winner_rank) FROM AGGREGATE AVG(winner_rank) FROM matches ", "text": "", "input": "Find the average rank of winners in all matches.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT avg(winner_rank) FROM matches", "output": "PROJECT AVG(winner_rank) FROM AGGREGATE AVG(winner_rank) FROM matches ", "text": "", "input": "What is the average rank for winners in all matches?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT min(loser_rank) FROM matches", "output": "PROJECT MIN(loser_rank) FROM AGGREGATE MIN(loser_rank) FROM matches ", "text": "", "input": "Find the highest rank of losers in all matches.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT min(loser_rank) FROM matches", "output": "PROJECT MIN(loser_rank) FROM AGGREGATE MIN(loser_rank) FROM matches ", "text": "", "input": "What is the best rank of losers across all matches?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(DISTINCT country_code) FROM players", "output": "PROJECT COUNT(DISTINCT country_code) FROM AGGREGATE COUNT(DISTINCT country_code) FROM players ", "text": "", "input": "find the number of distinct country codes of all players.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(DISTINCT country_code) FROM players", "output": "PROJECT COUNT(DISTINCT country_code) FROM AGGREGATE COUNT(DISTINCT country_code) FROM players ", "text": "", "input": "How many distinct countries do players come from?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(DISTINCT loser_name) FROM matches", "output": "PROJECT COUNT(DISTINCT loser_name) FROM AGGREGATE COUNT(DISTINCT loser_name) FROM matches ", "text": "", "input": "Find the number of distinct name of losers.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(DISTINCT loser_name) FROM matches", "output": "PROJECT COUNT(DISTINCT loser_name) FROM AGGREGATE COUNT(DISTINCT loser_name) FROM matches ", "text": "", "input": "How many different loser names are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "output": "PROJECT tourney_name FROM SELECT WHERE COUNT(*) > 10 FROM AGGREGATE COUNT(*) GROUP BY tourney_name FROM matches ", "text": "", "input": "Find the name of tourney that has more than 10 matches.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "output": "PROJECT tourney_name FROM SELECT WHERE COUNT(*) > 10 FROM AGGREGATE COUNT(*) GROUP BY tourney_name FROM matches ", "text": "", "input": "What are the names of tournaments that have more than 10 matches?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "output": "INTERSECT PROJECT winner_name FROM SELECT WHERE YEAR = 2013 FROM matches WITH PROJECT winner_name FROM SELECT WHERE YEAR = 2016 FROM matches ", "text": "", "input": "List the names of all winners who played in both 2013 and 2016.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "output": "INTERSECT PROJECT winner_name FROM SELECT WHERE YEAR = 2013 FROM matches WITH PROJECT winner_name FROM SELECT WHERE YEAR = 2016 FROM matches ", "text": "", "input": "What are the names of players who won in both 2013 and 2016?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE YEAR = 2013 OR YEAR = 2016 FROM matches ", "text": "", "input": "List the number of all matches who played in years of 2013 or 2016.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE YEAR = 2013 OR YEAR = 2016 FROM matches ", "text": "", "input": "How many matches were played in 2013 or 2016?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "output": "INTERSECT PROJECT T1.country_code, T1.first_name FROM SELECT WHERE T2.tourney_name = 'WTA Championships' FROM JOIN AS T1 FROM players WITH AS T2 FROM matches ON T1.player_id = T2.winner_id WITH PROJECT T1.country_code, T1.first_name FROM SELECT WHERE T2.tourney_name = 'Australian Open' FROM JOIN AS T1 FROM players WITH AS T2 FROM matches ON T1.player_id = T2.winner_id ", "text": "", "input": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "output": "INTERSECT PROJECT T1.country_code, T1.first_name FROM SELECT WHERE T2.tourney_name = 'WTA Championships' FROM JOIN AS T1 FROM players WITH AS T2 FROM matches ON T1.player_id = T2.winner_id WITH PROJECT T1.country_code, T1.first_name FROM SELECT WHERE T2.tourney_name = 'Australian Open' FROM JOIN AS T1 FROM players WITH AS T2 FROM matches ON T1.player_id = T2.winner_id ", "text": "", "input": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "output": "LIMIT 1 FROM ORDER BY birth_date FROM PROJECT first_name, country_code FROM players ", "text": "", "input": "Find the first name and country code of the oldest player.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "output": "LIMIT 1 FROM ORDER BY birth_date FROM PROJECT first_name, country_code FROM players ", "text": "", "input": "What is the first name and country code of the oldest player?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "output": "ORDER BY birth_date FROM PROJECT first_name, last_name FROM players ", "text": "", "input": "List the first and last name of all players in the order of birth date.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "output": "ORDER BY birth_date FROM PROJECT first_name, last_name FROM players ", "text": "", "input": "What are the full names of all players, sorted by birth date?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "output": "ORDER BY birth_date FROM PROJECT first_name, last_name FROM SELECT WHERE hand = 'L' FROM players ", "text": "", "input": "List the first and last name of all players who are left / L hand in the order of birth date.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "output": "ORDER BY birth_date FROM PROJECT first_name, last_name FROM SELECT WHERE hand = 'L' FROM players ", "text": "", "input": "What are the full names of all left handed players, in order of birth date?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC T2.tours FROM PROJECT T1.country_code, T1.first_name FROM JOIN AS T1 FROM players WITH AS T2 FROM rankings ON T1.player_id = T2.player_id ", "text": "", "input": "Find the first name and country code of the player who did the most number of tours.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC T2.tours FROM PROJECT T1.country_code, T1.first_name FROM JOIN AS T1 FROM players WITH AS T2 FROM rankings ON T1.player_id = T2.player_id ", "text": "", "input": "What is the first name and country code of the player with the most tours?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT YEAR FROM AGGREGATE COUNT(*) GROUP BY YEAR FROM matches ", "text": "", "input": "Find the year that has the most number of matches.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT YEAR FROM AGGREGATE COUNT(*) GROUP BY YEAR FROM matches ", "text": "", "input": "Which year had the most matches?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT winner_name, winner_rank_points FROM AGGREGATE COUNT(*) GROUP BY winner_name FROM matches ", "text": "", "input": "Find the name and rank points of the winner who won the most times.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT winner_name, winner_rank_points FROM AGGREGATE COUNT(*) GROUP BY winner_name FROM matches ", "text": "", "input": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC winner_rank_points FROM PROJECT winner_name FROM SELECT WHERE tourney_name = 'Australian Open' FROM matches ", "text": "", "input": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC winner_rank_points FROM PROJECT winner_name FROM SELECT WHERE tourney_name = 'Australian Open' FROM matches ", "text": "", "input": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC minutes FROM PROJECT winner_name, loser_name FROM matches ", "text": "", "input": "find the names of loser and winner who played in the match with greatest number of minutes.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC minutes FROM PROJECT winner_name, loser_name FROM matches ", "text": "", "input": "What are the names of the winner and loser who played in the longest match?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "output": "PROJECT AVG(ranking), T1.first_name FROM AGGREGATE COUNT(*), AVG(ranking) GROUP BY T1.first_name FROM JOIN AS T1 FROM players WITH AS T2 FROM rankings ON T1.player_id = T2.player_id ", "text": "", "input": "Find the average ranking for each player and their first name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "output": "PROJECT AVG(ranking), T1.first_name FROM AGGREGATE COUNT(*), AVG(ranking) GROUP BY T1.first_name FROM JOIN AS T1 FROM players WITH AS T2 FROM rankings ON T1.player_id = T2.player_id ", "text": "", "input": "What are the first names of all players, and their average rankings?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "output": "PROJECT SUM(ranking_points), T1.first_name FROM AGGREGATE COUNT(*), SUM(ranking_points) GROUP BY T1.first_name FROM JOIN AS T1 FROM players WITH AS T2 FROM rankings ON T1.player_id = T2.player_id ", "text": "", "input": "Find the total ranking points for each player and their first name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "output": "PROJECT SUM(ranking_points), T1.first_name FROM AGGREGATE COUNT(*), SUM(ranking_points) GROUP BY T1.first_name FROM JOIN AS T1 FROM players WITH AS T2 FROM rankings ON T1.player_id = T2.player_id ", "text": "", "input": "What are the first names of all players, and their total ranking points?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "output": "PROJECT COUNT(*), country_code FROM AGGREGATE COUNT(*) GROUP BY country_code FROM players ", "text": "", "input": "find the number of players for each country.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "output": "PROJECT COUNT(*), country_code FROM AGGREGATE COUNT(*) GROUP BY country_code FROM players ", "text": "", "input": "How many players are from each country?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT country_code FROM AGGREGATE COUNT(*) GROUP BY country_code FROM players ", "text": "", "input": "find the code of the country where has the greatest number of players.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT country_code FROM AGGREGATE COUNT(*) GROUP BY country_code FROM players ", "text": "", "input": "What is the code of the country with the most players?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "output": "PROJECT country_code FROM SELECT WHERE COUNT(*) > 50 FROM AGGREGATE COUNT(*) GROUP BY country_code FROM players ", "text": "", "input": "Find the codes of countries that have more than 50 players.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "output": "PROJECT country_code FROM SELECT WHERE COUNT(*) > 50 FROM AGGREGATE COUNT(*) GROUP BY country_code FROM players ", "text": "", "input": "What are the codes of countries with more than 50 players?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "output": "PROJECT SUM(tours), ranking_date FROM AGGREGATE SUM(tours), COUNT(*) GROUP BY ranking_date FROM rankings ", "text": "", "input": "Find the total number of tours for each ranking date.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "output": "PROJECT SUM(tours), ranking_date FROM AGGREGATE SUM(tours), COUNT(*) GROUP BY ranking_date FROM rankings ", "text": "", "input": "How many total tours were there for each ranking date?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "output": "PROJECT COUNT(*), YEAR FROM AGGREGATE COUNT(*) GROUP BY YEAR FROM matches ", "text": "", "input": "Find the number of matches happened in each year.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "output": "PROJECT COUNT(*), YEAR FROM AGGREGATE COUNT(*) GROUP BY YEAR FROM matches ", "text": "", "input": "How many matches were played in each year?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "output": "LIMIT 3 FROM ORDER BY winner_age FROM PROJECT DISTINCT winner_name, winner_rank FROM matches ", "text": "", "input": "Find the name and rank of the 3 youngest winners across all matches.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "output": "LIMIT 3 FROM ORDER BY winner_age FROM PROJECT DISTINCT winner_name, winner_rank FROM matches ", "text": "", "input": "What are the names and ranks of the three youngest winners across all matches?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "output": "PROJECT COUNT(DISTINCT winner_name) FROM AGGREGATE COUNT(DISTINCT winner_name) FROM SELECT WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L' FROM matches ", "text": "", "input": "How many different winners both participated in the WTA Championships and were left handed?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "output": "PROJECT COUNT(DISTINCT winner_name) FROM AGGREGATE COUNT(DISTINCT winner_name) FROM SELECT WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L' FROM matches ", "text": "", "input": "Find the number of left handed winners who participated in the WTA Championships.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC T2.winner_rank_points FROM PROJECT T1.first_name, T1.country_code, T1.birth_date FROM JOIN AS T1 FROM players WITH AS T2 FROM matches ON T1.player_id = T2.winner_id ", "text": "", "input": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC T2.winner_rank_points FROM PROJECT T1.first_name, T1.country_code, T1.birth_date FROM JOIN AS T1 FROM players WITH AS T2 FROM matches ON T1.player_id = T2.winner_id ", "text": "", "input": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "output": "PROJECT COUNT(*), hand FROM AGGREGATE COUNT(*) GROUP BY hand FROM players ", "text": "", "input": "Find the number of players for each hand type.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "output": "PROJECT COUNT(*), hand FROM AGGREGATE COUNT(*) GROUP BY hand FROM players ", "text": "", "input": "How many players are there for each hand type?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE players ( player_id number, first_name text, last_name text, hand text, birth_date time, country_code text, PRIMARY KEY(player_id)); CREATE TABLE matches ( best_of number, draw_size number, loser_age number, loser_entry text, loser_hand text, loser_ht number, loser_id number, loser_ioc text, loser_name text, loser_rank number, loser_rank_points number, loser_seed number, match_num number, minutes number, round text, score text, surface text, tourney_date time, tourney_id text, tourney_level text, tourney_name text, winner_age number, winner_entry text, winner_hand text, winner_ht number, winner_id number, winner_ioc text, winner_name text, winner_rank number, winner_rank_points number, winner_seed number, year number, FOREIGN KEY(winner_id) REFERENCES players (player_id), FOREIGN KEY(loser_id) REFERENCES players (player_id)); CREATE TABLE rankings ( ranking_date time, ranking number, player_id number, ranking_points number, tours number, FOREIGN KEY(player_id) REFERENCES players (player_id)); "}, {"sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE disposition_of_ship = 'Captured' FROM ship ", "text": "", "input": "How many ships ended up being 'Captured'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "output": "ORDER BY DESC name FROM PROJECT name, tonnage FROM ship ", "text": "", "input": "List the name and tonnage ordered by in descending alphaetical order for the names.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT name ,  date FROM battle", "output": "PROJECT name, date FROM battle ", "text": "", "input": "List the name, date and result of each battle.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT max(killed) ,  min(killed) FROM death", "output": "PROJECT MAX(killed), MIN(killed) FROM AGGREGATE MIN(killed), MAX(killed) FROM death ", "text": "", "input": "What is maximum and minimum death toll caused each time?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT avg(injured) FROM death", "output": "PROJECT AVG(injured) FROM AGGREGATE AVG(injured) FROM death ", "text": "", "input": "What is the average number of injuries caused each time?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "output": "PROJECT T1.killed, T1.injured FROM SELECT WHERE T2.tonnage = 't' FROM JOIN AS T1 FROM death WITH AS t2 FROM ship ON T1.caused_by_ship_id = T2.id ", "text": "", "input": "What are the death and injury situations caused by the ship with tonnage 't'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "output": "PROJECT name, RESULT FROM SELECT WHERE bulgarian_commander <> 'Boril' FROM battle ", "text": "", "input": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "output": "PROJECT DISTINCT T1.id, T1.name FROM SELECT WHERE T2.ship_type = 'Brig' FROM JOIN AS T1 FROM battle WITH AS T2 FROM ship ON T1.id = T2.lost_in_battle ", "text": "", "input": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "output": "PROJECT T1.id, T1.name FROM SELECT WHERE SUM(T3.killed) > 10 FROM AGGREGATE SUM(T3.killed), COUNT(*) GROUP BY T1.id FROM JOIN AS T1 FROM battle WITH JOIN AS T2 FROM ship WITH AS T3 FROM death ON T2.id = T3.caused_by_ship_id ON T1.id = T2.lost_in_battle ", "text": "", "input": "What are the ids and names of the battles that led to more than 10 people killed in total.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.id, T2.name FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM death WITH AS t2 FROM ship ON T1.caused_by_ship_id = T2.id ", "text": "", "input": "What is the ship id and name that caused most total injuries?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "output": "PROJECT name FROM SELECT WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I' FROM battle ", "text": "", "input": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT count(DISTINCT RESULT) FROM battle", "output": "PROJECT COUNT(DISTINCT RESULT) FROM AGGREGATE COUNT(DISTINCT RESULT) FROM battle ", "text": "", "input": "How many different results are there for the battles?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE id NOT IN PROJECT lost_in_battle FROM SELECT WHERE tonnage = '225' FROM ship FROM battle ", "text": "", "input": "How many battles did not lose any ship with tonnage '225'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "output": "INTERSECT PROJECT T1.name, T1.date FROM SELECT WHERE T2.name = 'Lettice' FROM JOIN AS T1 FROM battle WITH AS T2 FROM ship ON T1.id = T2.lost_in_battle WITH PROJECT T1.name, T1.date FROM SELECT WHERE T2.name = 'HMS Atalanta' FROM JOIN AS T1 FROM battle WITH AS T2 FROM ship ON T1.id = T2.lost_in_battle ", "text": "", "input": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "output": "EXCEPT PROJECT name, RESULT, bulgarian_commander FROM battle WITH PROJECT T1.name, T1.result, T1.bulgarian_commander FROM SELECT WHERE T2.location = 'English Channel' FROM JOIN AS T1 FROM battle WITH AS T2 FROM ship ON T1.id = T2.lost_in_battle ", "text": "", "input": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT note FROM death WHERE note LIKE '%East%'", "output": "PROJECT note FROM SELECT WHERE note LIKE '%East%' FROM death ", "text": "", "input": "What are the notes of the death events which has substring 'East'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE battle ( id number, name text, date text, bulgarian_commander text, latin_commander text, result text, PRIMARY KEY(id)); CREATE TABLE ship ( lost_in_battle number, id number, name text, tonnage text, ship_type text, location text, disposition_of_ship text, PRIMARY KEY(id), FOREIGN KEY(lost_in_battle) REFERENCES battle (id)); CREATE TABLE death ( caused_by_ship_id number, id number, note text, killed number, injured number, PRIMARY KEY(id), FOREIGN KEY(caused_by_ship_id) REFERENCES ship (id)); "}, {"sql": "SELECT line_1 ,  line_2 FROM addresses", "output": "PROJECT line_1, line_2 FROM addresses ", "text": "", "input": "what are all the addresses including line 1 and line 2?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT line_1 ,  line_2 FROM addresses", "output": "PROJECT line_1, line_2 FROM addresses ", "text": "", "input": "What is the first and second line for all addresses?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT count(*) FROM Courses", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Courses ", "text": "", "input": "How many courses in total are listed?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT count(*) FROM Courses", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Courses ", "text": "", "input": "How many courses are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "output": "PROJECT course_description FROM SELECT WHERE course_name = 'math' FROM Courses ", "text": "", "input": "How is the math course described?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT course_description FROM Courses WHERE course_name  =  'math'", "output": "PROJECT course_description FROM SELECT WHERE course_name = 'math' FROM Courses ", "text": "", "input": "What are the descriptions for all the math courses?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "output": "PROJECT zip_postcode FROM SELECT WHERE city = 'Port Chelsea' FROM Addresses ", "text": "", "input": "What is the zip code of the address in the city Port Chelsea?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'", "output": "PROJECT zip_postcode FROM SELECT WHERE city = 'Port Chelsea' FROM Addresses ", "text": "", "input": "What is the zip code for Port Chelsea?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.department_name, T1.department_id FROM AGGREGATE COUNT(*) GROUP BY T1.department_id FROM JOIN AS T1 FROM Degree_Programs WITH AS T2 FROM Departments ON T1.department_id = T2.department_id ", "text": "", "input": "Which department offers the most number of degrees? List department name and id.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t2.department_name, t1.department_id FROM AGGREGATE COUNT(*) GROUP BY t1.department_id FROM JOIN AS t1 FROM degree_programs WITH AS t2 FROM departments ON t1.department_id = t2.department_id ", "text": "", "input": "What is the name and id of the department with the most number of degrees ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "output": "PROJECT COUNT(DISTINCT department_id) FROM AGGREGATE COUNT(DISTINCT department_id) FROM Degree_Programs ", "text": "", "input": "How many departments offer any degree?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs", "output": "PROJECT COUNT(DISTINCT department_id) FROM AGGREGATE COUNT(DISTINCT department_id) FROM Degree_Programs ", "text": "", "input": "How many different departments offer degrees?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "output": "PROJECT COUNT(DISTINCT degree_summary_name) FROM AGGREGATE COUNT(DISTINCT degree_summary_name) FROM Degree_Programs ", "text": "", "input": "How many different degree names are offered?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs", "output": "PROJECT COUNT(DISTINCT degree_summary_name) FROM AGGREGATE COUNT(DISTINCT degree_summary_name) FROM Degree_Programs ", "text": "", "input": "How many different degrees are offered?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.department_name = 'engineer' FROM JOIN AS T1 FROM Departments WITH AS T2 FROM Degree_Programs ON T1.department_id = T2.department_id ", "text": "", "input": "How many degrees does the engineering department offer?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.department_name = 'engineer' FROM JOIN AS T1 FROM Departments WITH AS T2 FROM Degree_Programs ON T1.department_id = T2.department_id ", "text": "", "input": "How many degrees does the engineering department have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT section_name ,  section_description FROM Sections", "output": "PROJECT section_name, section_description FROM Sections ", "text": "", "input": "What are the names and descriptions of all the sections?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT section_name ,  section_description FROM Sections", "output": "PROJECT section_name, section_description FROM Sections ", "text": "", "input": "What are the names and descriptions for all the sections?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "output": "PROJECT T1.course_name, T1.course_id FROM SELECT WHERE COUNT(*) <= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.course_id FROM JOIN AS T1 FROM Courses WITH AS T2 FROM Sections ON T1.course_id = T2.course_id ", "text": "", "input": "What are the names and id of courses having at most 2 sections?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2", "output": "PROJECT T1.course_name, T1.course_id FROM SELECT WHERE COUNT(*) <= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.course_id FROM JOIN AS T1 FROM Courses WITH AS T2 FROM Sections ON T1.course_id = T2.course_id ", "text": "", "input": "What are the names and ids of every course with less than 2 sections?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "output": "ORDER BY DESC section_name FROM PROJECT section_name FROM Sections ", "text": "", "input": "List the section_name in reversed lexicographical order.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT section_name FROM Sections ORDER BY section_name DESC", "output": "ORDER BY DESC section_name FROM PROJECT section_name FROM Sections ", "text": "", "input": "What are the names of the sections in reverse alphabetical order?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.semester_name, T1.semester_id FROM AGGREGATE COUNT(*) GROUP BY T1.semester_id FROM JOIN AS T1 FROM Semesters WITH AS T2 FROM Student_Enrolment ON T1.semester_id = T2.semester_id ", "text": "", "input": "What is the semester which most student registered in? Show both the name and the id.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.semester_name, T1.semester_id FROM AGGREGATE COUNT(*) GROUP BY T1.semester_id FROM JOIN AS T1 FROM Semesters WITH AS T2 FROM Student_Enrolment ON T1.semester_id = T2.semester_id ", "text": "", "input": "For each semester, what is the name and id of the one with the most students registered?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "output": "PROJECT department_description FROM SELECT WHERE department_name LIKE '%computer%' FROM Departments ", "text": "", "input": "What is the description of the department whose name has the substring the computer?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'", "output": "PROJECT department_description FROM SELECT WHERE department_name LIKE '%computer%' FROM Departments ", "text": "", "input": "What is the department description for the one whose name has the word computer?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "output": "PROJECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM SELECT WHERE COUNT(*) = 2 FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Students WITH AS T2 FROM Student_Enrolment ON T1.student_id = T2.student_id ", "text": "", "input": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2", "output": "PROJECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM SELECT WHERE COUNT(*) = 2 FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Students WITH AS T2 FROM Student_Enrolment ON T1.student_id = T2.student_id ", "text": "", "input": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "output": "PROJECT DISTINCT T1.first_name, T1.middle_name, T1.last_name FROM SELECT WHERE T3.degree_summary_name = 'Bachelor' FROM JOIN AS T1 FROM Students WITH JOIN AS T2 FROM Student_Enrolment WITH AS T3 FROM Degree_Programs ON T2.degree_program_id = T3.degree_program_id ON T1.student_id = T2.student_id ", "text": "", "input": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'", "output": "PROJECT DISTINCT T1.first_name, T1.middle_name, T1.last_name FROM SELECT WHERE T3.degree_summary_name = 'Bachelor' FROM JOIN AS T1 FROM Students WITH JOIN AS T2 FROM Student_Enrolment WITH AS T3 FROM Degree_Programs ON T2.degree_program_id = T3.degree_program_id ON T1.student_id = T2.student_id ", "text": "", "input": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.degree_summary_name FROM AGGREGATE COUNT(*) GROUP BY T1.degree_summary_name FROM JOIN AS T1 FROM Degree_Programs WITH AS T2 FROM Student_Enrolment ON T1.degree_program_id = T2.degree_program_id ", "text": "", "input": "Find the kind of program which most number of students are enrolled in?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.degree_summary_name FROM AGGREGATE COUNT(*) GROUP BY T1.degree_summary_name FROM JOIN AS T1 FROM Degree_Programs WITH AS T2 FROM Student_Enrolment ON T1.degree_program_id = T2.degree_program_id ", "text": "", "input": "What is the degree summary name that has the most number of students enrolled?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.degree_program_id, T1.degree_summary_name FROM AGGREGATE COUNT(*) GROUP BY T1.degree_program_id FROM JOIN AS T1 FROM Degree_Programs WITH AS T2 FROM Student_Enrolment ON T1.degree_program_id = T2.degree_program_id ", "text": "", "input": "Find the program which most number of students are enrolled in. List both the id and the summary.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.degree_program_id, T1.degree_summary_name FROM AGGREGATE COUNT(*) GROUP BY T1.degree_program_id FROM JOIN AS T1 FROM Degree_Programs WITH AS T2 FROM Student_Enrolment ON T1.degree_program_id = T2.degree_program_id ", "text": "", "input": "What is the program id and the summary of the degree that has the most students enrolled?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*), T1.student_id FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Students WITH AS T2 FROM Student_Enrolment ON T1.student_id = T2.student_id ", "text": "", "input": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*), T1.student_id FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Students WITH AS T2 FROM Student_Enrolment ON T1.student_id = T2.student_id ", "text": "", "input": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "output": "PROJECT semester_name FROM SELECT WHERE semester_id NOT IN PROJECT semester_id FROM Student_Enrolment FROM Semesters ", "text": "", "input": "Which semesters do not have any student enrolled? List the semester name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )", "output": "PROJECT semester_name FROM SELECT WHERE semester_id NOT IN PROJECT semester_id FROM Student_Enrolment FROM Semesters ", "text": "", "input": "What is the name of the semester with no students enrolled?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "output": "PROJECT DISTINCT T1.course_name FROM JOIN AS T1 FROM Courses WITH AS T2 FROM Student_Enrolment_Courses ON T1.course_id = T2.course_id ", "text": "", "input": "What are all the course names of the courses which ever have students enrolled in?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id", "output": "PROJECT DISTINCT T1.course_name FROM JOIN AS T1 FROM Courses WITH AS T2 FROM Student_Enrolment_Courses ON T1.course_id = T2.course_id ", "text": "", "input": "What are the names of all courses that have some students enrolled?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.course_name FROM AGGREGATE COUNT(*) GROUP BY T1.course_name FROM JOIN AS T1 FROM Courses WITH AS T2 FROM Student_Enrolment_Courses ON T1.course_id = T2.course_id ", "text": "", "input": "What's the name of the course with most number of enrollments?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.course_name FROM AGGREGATE COUNT(*) GROUP BY T1.course_name FROM JOIN AS T1 FROM Courses WITH AS T2 FROM Student_Enrolment_Courses ON T1.course_id = T2.course_id ", "text": "", "input": "What is the name of the course with the most students enrolled?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "output": "EXCEPT PROJECT T1.last_name FROM SELECT WHERE T2.state_province_county = 'NorthCarolina' FROM JOIN AS T1 FROM Students WITH AS T2 FROM Addresses ON T1.current_address_id = T2.address_id WITH PROJECT DISTINCT T3.last_name FROM JOIN AS T3 FROM Students WITH AS T4 FROM Student_Enrolment ON T3.student_id = T4.student_id ", "text": "", "input": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id", "output": "EXCEPT PROJECT T1.last_name FROM SELECT WHERE T2.state_province_county = 'NorthCarolina' FROM JOIN AS T1 FROM Students WITH AS T2 FROM Addresses ON T1.current_address_id = T2.address_id WITH PROJECT DISTINCT T3.last_name FROM JOIN AS T3 FROM Students WITH AS T4 FROM Student_Enrolment ON T3.student_id = T4.student_id ", "text": "", "input": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "output": "PROJECT T2.transcript_date, T1.transcript_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.transcript_id FROM JOIN AS T1 FROM Transcript_Contents WITH AS T2 FROM Transcripts ON T1.transcript_id = T2.transcript_id ", "text": "", "input": "Show the date and id of the transcript with at least 2 course results.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2", "output": "PROJECT T2.transcript_date, T1.transcript_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.transcript_id FROM JOIN AS T1 FROM Transcript_Contents WITH AS T2 FROM Transcripts ON T1.transcript_id = T2.transcript_id ", "text": "", "input": "What is the date and id of the transcript with at least 2 courses listed?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'", "output": "PROJECT cell_mobile_number FROM SELECT WHERE first_name = 'Timmothy' AND last_name = 'Ward' FROM Students ", "text": "", "input": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'", "output": "PROJECT cell_mobile_number FROM SELECT WHERE first_name = 'timmothy' AND last_name = 'ward' FROM students ", "text": "", "input": "What is the mobile phone number of the student named Timmothy Ward ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC date_first_registered FROM PROJECT first_name, middle_name, last_name FROM Students ", "text": "", "input": "Who is the first student to register? List the first name, middle name and last name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC date_first_registered FROM PROJECT first_name, middle_name, last_name FROM Students ", "text": "", "input": "What is the first, middle, and last name of the first student to register?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC date_left FROM PROJECT first_name, middle_name, last_name FROM Students ", "text": "", "input": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC date_left FROM PROJECT first_name, middle_name, last_name FROM Students ", "text": "", "input": "What is the first, middle, and last name of the earliest school graduate?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "output": "PROJECT first_name FROM SELECT WHERE current_address_id <> permanent_address_id FROM Students ", "text": "", "input": "Whose permanent address is different from his or her current address? List his or her first name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id", "output": "PROJECT first_name FROM SELECT WHERE current_address_id <> permanent_address_id FROM Students ", "text": "", "input": "What is the first name of the student whose permanent address is different from his or her current one?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.address_id, T1.line_1, T1.line_2 FROM AGGREGATE COUNT(*) GROUP BY T1.address_id FROM JOIN AS T1 FROM Addresses WITH AS T2 FROM Students ON T1.address_id = T2.current_address_id ", "text": "", "input": "Which address holds the most number of students currently? List the address id and all lines.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.address_id, T1.line_1, T1.line_2 FROM AGGREGATE COUNT(*) GROUP BY T1.address_id FROM JOIN AS T1 FROM Addresses WITH AS T2 FROM Students ON T1.address_id = T2.current_address_id ", "text": "", "input": "What is the id, line 1, and line 2 of the address with the most students?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT avg(transcript_date) FROM Transcripts", "output": "PROJECT AVG(transcript_date) FROM AGGREGATE AVG(transcript_date) FROM Transcripts ", "text": "", "input": "On average, when were the transcripts printed?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT avg(transcript_date) FROM Transcripts", "output": "PROJECT AVG(transcript_date) FROM AGGREGATE AVG(transcript_date) FROM Transcripts ", "text": "", "input": "What is the average transcript date?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC transcript_date FROM PROJECT transcript_date, other_details FROM Transcripts ", "text": "", "input": "When is the first transcript released? List the date and details.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC transcript_date FROM PROJECT transcript_date, other_details FROM Transcripts ", "text": "", "input": "What is the earliest date of a transcript release, and what details can you tell me?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT count(*) FROM Transcripts", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Transcripts ", "text": "", "input": "How many transcripts are released?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT count(*) FROM Transcripts", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Transcripts ", "text": "", "input": "How many transcripts are listed?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC transcript_date FROM PROJECT transcript_date FROM Transcripts ", "text": "", "input": "What is the last transcript release date?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC transcript_date FROM PROJECT transcript_date FROM Transcripts ", "text": "", "input": "When was the last transcript released?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT COUNT(*), student_course_id FROM AGGREGATE COUNT(*) GROUP BY student_course_id FROM Transcript_Contents ", "text": "", "input": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT COUNT(*), student_course_id FROM AGGREGATE COUNT(*) GROUP BY student_course_id FROM Transcript_Contents ", "text": "", "input": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT T2.transcript_date, T1.transcript_id FROM AGGREGATE COUNT(*) GROUP BY T1.transcript_id FROM JOIN AS T1 FROM Transcript_Contents WITH AS T2 FROM Transcripts ON T1.transcript_id = T2.transcript_id ", "text": "", "input": "Show the date of the transcript which shows the least number of results, also list the id.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT T2.transcript_date, T1.transcript_id FROM AGGREGATE COUNT(*) GROUP BY T1.transcript_id FROM JOIN AS T1 FROM Transcript_Contents WITH AS T2 FROM Transcripts ON T1.transcript_id = T2.transcript_id ", "text": "", "input": "What is the date and id of the transcript with the least number of results?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "output": "INTERSECT PROJECT DISTINCT T2.semester_id FROM SELECT WHERE degree_summary_name = 'Master' FROM JOIN AS T1 FROM Degree_Programs WITH AS T2 FROM Student_Enrolment ON T1.degree_program_id = T2.degree_program_id WITH PROJECT DISTINCT T2.semester_id FROM SELECT WHERE degree_summary_name = 'Bachelor' FROM JOIN AS T1 FROM Degree_Programs WITH AS T2 FROM Student_Enrolment ON T1.degree_program_id = T2.degree_program_id ", "text": "", "input": "Find the semester when both Master students and Bachelor students got enrolled in.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'", "output": "INTERSECT PROJECT DISTINCT T2.semester_id FROM SELECT WHERE degree_summary_name = 'Master' FROM JOIN AS T1 FROM Degree_Programs WITH AS T2 FROM Student_Enrolment ON T1.degree_program_id = T2.degree_program_id WITH PROJECT DISTINCT T2.semester_id FROM SELECT WHERE degree_summary_name = 'Bachelor' FROM JOIN AS T1 FROM Degree_Programs WITH AS T2 FROM Student_Enrolment ON T1.degree_program_id = T2.degree_program_id ", "text": "", "input": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "output": "PROJECT COUNT(DISTINCT current_address_id) FROM AGGREGATE COUNT(DISTINCT current_address_id) FROM Students ", "text": "", "input": "How many different addresses do the students currently live?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT count(DISTINCT current_address_id) FROM Students", "output": "PROJECT COUNT(DISTINCT current_address_id) FROM AGGREGATE COUNT(DISTINCT current_address_id) FROM Students ", "text": "", "input": "What are the different addresses that have students living there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "output": "ORDER BY DESC other_student_details FROM PROJECT other_student_details FROM Students ", "text": "", "input": "List all the student details in reversed lexicographical order.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC", "output": "ORDER BY DESC other_student_details FROM PROJECT other_student_details FROM Students ", "text": "", "input": "What other details can you tell me about students in reverse alphabetical order?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "output": "PROJECT section_description FROM SELECT WHERE section_name = 'h' FROM Sections ", "text": "", "input": "Describe the section h.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT section_description FROM Sections WHERE section_name  =  'h'", "output": "PROJECT section_description FROM SELECT WHERE section_name = 'h' FROM Sections ", "text": "", "input": "What is the description for the section named h?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "output": "PROJECT t1.first_name FROM SELECT WHERE t2.country = 'haiti' OR t1.cell_mobile_number = '09700166582' FROM JOIN AS t1 FROM students WITH AS t2 FROM addresses ON t1.permanent_address_id = t2.address_id ", "text": "", "input": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'", "output": "PROJECT t1.first_name FROM SELECT WHERE t2.country = 'haiti' OR t1.cell_mobile_number = '09700166582' FROM JOIN AS t1 FROM students WITH AS t2 FROM addresses ON t1.permanent_address_id = t2.address_id ", "text": "", "input": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Addresses ( address_id number, line_1 text, line_2 text, line_3 text, city text, zip_postcode text, state_province_county text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Courses ( course_id number, course_name text, course_description text, other_details text, PRIMARY KEY(course_id)); CREATE TABLE Departments ( department_id number, department_name text, department_description text, other_details text, PRIMARY KEY(department_id)); CREATE TABLE Degree_Programs ( degree_program_id number, department_id number, degree_summary_name text, degree_summary_description text, other_details text, PRIMARY KEY(degree_program_id), FOREIGN KEY(department_id) REFERENCES Departments (department_id)); CREATE TABLE Sections ( section_id number, course_id number, section_name text, section_description text, other_details text, PRIMARY KEY(section_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Semesters ( semester_id number, semester_name text, semester_description text, other_details text, PRIMARY KEY(semester_id)); CREATE TABLE Students ( student_id number, current_address_id number, permanent_address_id number, first_name text, middle_name text, last_name text, cell_mobile_number text, email_address text, ssn text, date_first_registered time, date_left time, other_student_details text, PRIMARY KEY(student_id), FOREIGN KEY(permanent_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(current_address_id) REFERENCES Addresses (address_id)); CREATE TABLE Student_Enrolment ( student_enrolment_id number, degree_program_id number, semester_id number, student_id number, other_details text, PRIMARY KEY(student_enrolment_id), FOREIGN KEY(student_id) REFERENCES Students (student_id), FOREIGN KEY(semester_id) REFERENCES Semesters (semester_id), FOREIGN KEY(degree_program_id) REFERENCES Degree_Programs (degree_program_id)); CREATE TABLE Student_Enrolment_Courses ( student_course_id number, course_id number, student_enrolment_id number, PRIMARY KEY(student_course_id), FOREIGN KEY(student_enrolment_id) REFERENCES Student_Enrolment (student_enrolment_id), FOREIGN KEY(course_id) REFERENCES Courses (course_id)); CREATE TABLE Transcripts ( transcript_id number, transcript_date time, other_details text, PRIMARY KEY(transcript_id)); CREATE TABLE Transcript_Contents ( student_course_id number, transcript_id number, FOREIGN KEY(transcript_id) REFERENCES Transcripts (transcript_id), FOREIGN KEY(student_course_id) REFERENCES Student_Enrolment_Courses (student_course_id)); "}, {"sql": "SELECT Title FROM Cartoon ORDER BY title", "output": "ORDER BY title FROM PROJECT Title FROM Cartoon ", "text": "", "input": "List the title of all cartoons in alphabetical order.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Title FROM Cartoon ORDER BY title", "output": "ORDER BY title FROM PROJECT Title FROM Cartoon ", "text": "", "input": "What are the titles of the cartoons sorted alphabetically?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "output": "PROJECT Title FROM SELECT WHERE Directed_by = \"Ben Jones\" FROM Cartoon ", "text": "", "input": "List all cartoon directed by \"Ben Jones\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "output": "PROJECT Title FROM SELECT WHERE Directed_by = \"Ben Jones\" FROM Cartoon ", "text": "", "input": "What are the names of all cartoons directed by Ben Jones?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Written_by = \"Joseph Kuhr\" FROM Cartoon ", "text": "", "input": "How many cartoons were written by \"Joseph Kuhr\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Written_by = \"Joseph Kuhr\" FROM Cartoon ", "text": "", "input": "What is the number of cartoones written by Joseph Kuhr?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "output": "ORDER BY Original_air_date FROM PROJECT title, Directed_by FROM Cartoon ", "text": "", "input": "list all cartoon titles and their directors ordered by their air date", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "output": "ORDER BY Original_air_date FROM PROJECT title, Directed_by FROM Cartoon ", "text": "", "input": "What is the name and directors of all the cartoons that are ordered by air date?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "output": "PROJECT Title FROM SELECT WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\" FROM Cartoon ", "text": "", "input": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "output": "PROJECT Title FROM SELECT WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\" FROM Cartoon ", "text": "", "input": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Country, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Country FROM TV_Channel ", "text": "", "input": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Country, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Country FROM TV_Channel ", "text": "", "input": "What is the country with the most number of TV Channels and how many does it have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "output": "PROJECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM AGGREGATE COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel ", "text": "", "input": "List the number of different series names and contents in the TV Channel table.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "output": "PROJECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM AGGREGATE COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel ", "text": "", "input": "How many different series and contents are listed in the TV Channel table?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "output": "PROJECT Content FROM SELECT WHERE series_name = \"Sky Radio\" FROM TV_Channel ", "text": "", "input": "What is the content of TV Channel with serial name \"Sky Radio\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "output": "PROJECT Content FROM SELECT WHERE series_name = \"Sky Radio\" FROM TV_Channel ", "text": "", "input": "What is the content of the series Sky Radio?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "output": "PROJECT Package_Option FROM SELECT WHERE series_name = \"Sky Radio\" FROM TV_Channel ", "text": "", "input": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "output": "PROJECT Package_Option FROM SELECT WHERE series_name = \"Sky Radio\" FROM TV_Channel ", "text": "", "input": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE LANGUAGE = \"English\" FROM TV_Channel ", "text": "", "input": "How many TV Channel using language English?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE LANGUAGE = \"English\" FROM TV_Channel ", "text": "", "input": "How many TV Channels use the English language?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT LANGUAGE, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY LANGUAGE FROM TV_Channel ", "text": "", "input": "List the language used least number of TV Channel. List language and number of TV Channel.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "output": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT LANGUAGE, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY LANGUAGE FROM TV_Channel ", "text": "", "input": "What are the languages used by the least number of TV Channels and how many channels use it?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "output": "PROJECT LANGUAGE, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY LANGUAGE FROM TV_Channel ", "text": "", "input": "List each language and the number of TV Channels using it.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "output": "PROJECT LANGUAGE, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY LANGUAGE FROM TV_Channel ", "text": "", "input": "For each language, list the number of TV Channels that use it.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "output": "PROJECT T1.series_name FROM SELECT WHERE T2.Title = \"The Rise of the Blue Beetle!\" FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM Cartoon ON T1.id = T2.Channel ", "text": "", "input": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "output": "PROJECT T1.series_name FROM SELECT WHERE T2.Title = \"The Rise of the Blue Beetle!\" FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM Cartoon ON T1.id = T2.Channel ", "text": "", "input": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "output": "PROJECT T2.Title FROM SELECT WHERE T1.series_name = \"Sky Radio\" FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM Cartoon ON T1.id = T2.Channel ", "text": "", "input": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "output": "PROJECT T2.Title FROM SELECT WHERE T1.series_name = \"Sky Radio\" FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM Cartoon ON T1.id = T2.Channel ", "text": "", "input": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Episode FROM TV_series ORDER BY rating", "output": "ORDER BY rating FROM PROJECT Episode FROM TV_series ", "text": "", "input": "List the Episode of all TV series sorted by rating.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Episode FROM TV_series ORDER BY rating", "output": "ORDER BY rating FROM PROJECT Episode FROM TV_series ", "text": "", "input": "What are all of the episodes ordered by ratings?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "output": "LIMIT 3 FROM ORDER BY DESC Rating FROM PROJECT Episode, Rating FROM TV_series ", "text": "", "input": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "output": "LIMIT 3 FROM ORDER BY DESC Rating FROM PROJECT Episode, Rating FROM TV_series ", "text": "", "input": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "output": "PROJECT MAX(SHARE), MIN(SHARE) FROM AGGREGATE MAX(SHARE), MIN(SHARE) FROM TV_series ", "text": "", "input": "What is minimum and maximum share of TV series?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "output": "PROJECT MAX(SHARE), MIN(SHARE) FROM AGGREGATE MAX(SHARE), MIN(SHARE) FROM TV_series ", "text": "", "input": "What is the maximum and minimum share for the TV series?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "output": "PROJECT Air_Date FROM SELECT WHERE Episode = \"A Love of a Lifetime\" FROM TV_series ", "text": "", "input": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "output": "PROJECT Air_Date FROM SELECT WHERE Episode = \"A Love of a Lifetime\" FROM TV_series ", "text": "", "input": "When did the episode \"A Love of a Lifetime\" air?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "output": "PROJECT Weekly_Rank FROM SELECT WHERE Episode = \"A Love of a Lifetime\" FROM TV_series ", "text": "", "input": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "output": "PROJECT Weekly_Rank FROM SELECT WHERE Episode = \"A Love of a Lifetime\" FROM TV_series ", "text": "", "input": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "output": "PROJECT T1.series_name FROM SELECT WHERE T2.Episode = \"A Love of a Lifetime\" FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM TV_series ON T1.id = T2.Channel ", "text": "", "input": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "output": "PROJECT T1.series_name FROM SELECT WHERE T2.Episode = \"A Love of a Lifetime\" FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM TV_series ON T1.id = T2.Channel ", "text": "", "input": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "output": "PROJECT T2.Episode FROM SELECT WHERE T1.series_name = \"Sky Radio\" FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM TV_series ON T1.id = T2.Channel ", "text": "", "input": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "output": "PROJECT T2.Episode FROM SELECT WHERE T1.series_name = \"Sky Radio\" FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM TV_series ON T1.id = T2.Channel ", "text": "", "input": "What is the episode for the TV series named \"Sky Radio\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "output": "PROJECT COUNT(*), Directed_by FROM AGGREGATE COUNT(*) GROUP BY Directed_by FROM cartoon ", "text": "", "input": "Find the number of cartoons directed by each of the listed directors.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "output": "PROJECT COUNT(*), Directed_by FROM AGGREGATE COUNT(*) GROUP BY Directed_by FROM cartoon ", "text": "", "input": "How many cartoons did each director create?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "output": "LIMIT 1 FROM ORDER BY DESC original_air_date FROM PROJECT production_code, channel FROM cartoon ", "text": "", "input": "Find the production code and channel of the most recently aired cartoon .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "output": "LIMIT 1 FROM ORDER BY DESC original_air_date FROM PROJECT production_code, channel FROM cartoon ", "text": "", "input": "What is the produdction code and channel of the most recent cartoon ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "output": "PROJECT package_option, series_name FROM SELECT WHERE hight_definition_TV = \"yes\" FROM TV_Channel ", "text": "", "input": "Find the package choice and series name of the TV channel that has high definition TV.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "output": "PROJECT package_option, series_name FROM SELECT WHERE hight_definition_TV = \"yes\" FROM TV_Channel ", "text": "", "input": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "output": "PROJECT T1.country FROM SELECT WHERE T2.written_by = 'Todd Casey' FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM cartoon ON T1.id = T2.Channel ", "text": "", "input": "which countries' tv channels are playing some cartoon written by Todd Casey?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "output": "PROJECT T1.country FROM SELECT WHERE T2.written_by = 'Todd Casey' FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM cartoon ON T1.id = T2.Channel ", "text": "", "input": "What are the countries that have cartoons on TV that were written by Todd Casey?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "output": "EXCEPT PROJECT country FROM TV_Channel WITH PROJECT T1.country FROM SELECT WHERE T2.written_by = 'Todd Casey' FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM cartoon ON T1.id = T2.Channel ", "text": "", "input": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "output": "EXCEPT PROJECT country FROM TV_Channel WITH PROJECT T1.country FROM SELECT WHERE T2.written_by = 'Todd Casey' FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM cartoon ON T1.id = T2.Channel ", "text": "", "input": "What are the countries that are not playing cartoons written by Todd Casey?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "output": "INTERSECT PROJECT T1.series_name, T1.country FROM SELECT WHERE T2.directed_by = 'Michael Chang' FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM cartoon ON T1.id = T2.Channel WITH PROJECT T1.series_name, T1.country FROM SELECT WHERE T2.directed_by = 'Ben Jones' FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM cartoon ON T1.id = T2.Channel ", "text": "", "input": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "output": "INTERSECT PROJECT T1.series_name, T1.country FROM SELECT WHERE T2.directed_by = 'Michael Chang' FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM cartoon ON T1.id = T2.Channel WITH PROJECT T1.series_name, T1.country FROM SELECT WHERE T2.directed_by = 'Ben Jones' FROM JOIN AS T1 FROM TV_Channel WITH AS T2 FROM cartoon ON T1.id = T2.Channel ", "text": "", "input": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "output": "PROJECT Pixel_aspect_ratio_PAR, country FROM SELECT WHERE LANGUAGE <> 'English' FROM tv_channel ", "text": "", "input": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "output": "PROJECT Pixel_aspect_ratio_PAR, country FROM SELECT WHERE LANGUAGE <> 'English' FROM tv_channel ", "text": "", "input": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "output": "PROJECT id FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY country FROM tv_channel ", "text": "", "input": "find id of the tv channels that from the countries where have more than two tv channels.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "output": "PROJECT id FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY country FROM tv_channel ", "text": "", "input": "What are the ids of all tv channels that have more than 2 TV channels?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "output": "EXCEPT PROJECT id FROM TV_Channel WITH PROJECT channel FROM SELECT WHERE directed_by = 'Ben Jones' FROM cartoon ", "text": "", "input": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "output": "EXCEPT PROJECT id FROM TV_Channel WITH PROJECT channel FROM SELECT WHERE directed_by = 'Ben Jones' FROM cartoon ", "text": "", "input": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "output": "PROJECT package_option FROM SELECT WHERE id NOT IN PROJECT channel FROM SELECT WHERE directed_by = 'Ben Jones' FROM cartoon FROM TV_Channel ", "text": "", "input": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "output": "PROJECT package_option FROM SELECT WHERE id NOT IN PROJECT channel FROM SELECT WHERE directed_by = 'Ben Jones' FROM cartoon FROM TV_Channel ", "text": "", "input": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE TV_Channel ( id text, series_name text, Country text, Language text, Content text, Pixel_aspect_ratio_PAR text, Hight_definition_TV text, Pay_per_view_PPV text, Package_Option text, PRIMARY KEY(id)); CREATE TABLE TV_series ( id number, Episode text, Air_Date text, Rating text, Share number, 18_49_Rating_Share text, Viewers_m text, Weekly_Rank number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); CREATE TABLE Cartoon ( id number, Title text, Directed_by text, Written_by text, Original_air_date text, Production_code number, Channel text, PRIMARY KEY(id), FOREIGN KEY(Channel) REFERENCES TV_Channel (id)); "}, {"sql": "SELECT count(*) FROM poker_player", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM poker_player ", "text": "", "input": "How many poker players are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT count(*) FROM poker_player", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM poker_player ", "text": "", "input": "Count the number of poker players.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "output": "ORDER BY DESC Earnings FROM PROJECT Earnings FROM poker_player ", "text": "", "input": "List the earnings of poker players in descending order.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "output": "ORDER BY DESC Earnings FROM PROJECT Earnings FROM poker_player ", "text": "", "input": "What are the earnings of poker players, ordered descending by value?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "output": "PROJECT Final_Table_Made, Best_Finish FROM poker_player ", "text": "", "input": "List the final tables made and the best finishes of poker players.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "output": "PROJECT Final_Table_Made, Best_Finish FROM poker_player ", "text": "", "input": "What are the final tables made and best finishes for all poker players?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT avg(Earnings) FROM poker_player", "output": "PROJECT AVG(Earnings) FROM AGGREGATE AVG(Earnings) FROM poker_player ", "text": "", "input": "What is the average earnings of poker players?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT avg(Earnings) FROM poker_player", "output": "PROJECT AVG(Earnings) FROM AGGREGATE AVG(Earnings) FROM poker_player ", "text": "", "input": "Return the average earnings across all poker players.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC Earnings FROM PROJECT Money_Rank FROM poker_player ", "text": "", "input": "What is the money rank of the poker player with the highest earnings?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC Earnings FROM PROJECT Money_Rank FROM poker_player ", "text": "", "input": "Return the money rank of the player with the greatest earnings.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "output": "PROJECT MAX(Final_Table_Made) FROM AGGREGATE MAX(Final_Table_Made) FROM SELECT WHERE Earnings < 200000 FROM poker_player ", "text": "", "input": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "output": "PROJECT MAX(Final_Table_Made) FROM AGGREGATE MAX(Final_Table_Made) FROM SELECT WHERE Earnings < 200000 FROM poker_player ", "text": "", "input": "Return the maximum final tables made across all poker players who have earnings below 200000.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "output": "PROJECT T1.Name FROM JOIN AS T1 FROM people WITH AS T2 FROM poker_player ON T1.People_ID = T2.People_ID ", "text": "", "input": "What are the names of poker players?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "output": "PROJECT T1.Name FROM JOIN AS T1 FROM people WITH AS T2 FROM poker_player ON T1.People_ID = T2.People_ID ", "text": "", "input": "Return the names of all the poker players.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "output": "PROJECT T1.Name FROM SELECT WHERE T2.Earnings > 300000 FROM JOIN AS T1 FROM people WITH AS T2 FROM poker_player ON T1.People_ID = T2.People_ID ", "text": "", "input": "What are the names of poker players whose earnings is higher than 300000?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "output": "PROJECT T1.Name FROM SELECT WHERE T2.Earnings > 300000 FROM JOIN AS T1 FROM people WITH AS T2 FROM poker_player ON T1.People_ID = T2.People_ID ", "text": "", "input": "Give the names of poker players who have earnings above 300000.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "output": "ORDER BY T2.Final_Table_Made FROM PROJECT T1.Name FROM JOIN AS T1 FROM people WITH AS T2 FROM poker_player ON T1.People_ID = T2.People_ID ", "text": "", "input": "List the names of poker players ordered by the final tables made in ascending order.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "output": "ORDER BY T2.Final_Table_Made FROM PROJECT T1.Name FROM JOIN AS T1 FROM people WITH AS T2 FROM poker_player ON T1.People_ID = T2.People_ID ", "text": "", "input": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC T2.Earnings FROM PROJECT T1.Birth_Date FROM JOIN AS T1 FROM people WITH AS T2 FROM poker_player ON T1.People_ID = T2.People_ID ", "text": "", "input": "What is the birth date of the poker player with the lowest earnings?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC T2.Earnings FROM PROJECT T1.Birth_Date FROM JOIN AS T1 FROM people WITH AS T2 FROM poker_player ON T1.People_ID = T2.People_ID ", "text": "", "input": "Return the birth date of the poker player with the lowest earnings.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC T1.Height FROM PROJECT T2.Money_Rank FROM JOIN AS T1 FROM people WITH AS T2 FROM poker_player ON T1.People_ID = T2.People_ID ", "text": "", "input": "What is the money rank of the tallest poker player?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC T1.Height FROM PROJECT T2.Money_Rank FROM JOIN AS T1 FROM people WITH AS T2 FROM poker_player ON T1.People_ID = T2.People_ID ", "text": "", "input": "Return the money rank of the poker player with the greatest height.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "output": "PROJECT AVG(T2.Earnings) FROM AGGREGATE AVG(T2.Earnings) FROM SELECT WHERE T1.Height > 200 FROM JOIN AS T1 FROM people WITH AS T2 FROM poker_player ON T1.People_ID = T2.People_ID ", "text": "", "input": "What is the average earnings of poker players with height higher than 200?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "output": "PROJECT AVG(T2.Earnings) FROM AGGREGATE AVG(T2.Earnings) FROM SELECT WHERE T1.Height > 200 FROM JOIN AS T1 FROM people WITH AS T2 FROM poker_player ON T1.People_ID = T2.People_ID ", "text": "", "input": "Give average earnings of poker players who are taller than 200.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "output": "ORDER BY DESC T2.Earnings FROM PROJECT T1.Name FROM JOIN AS T1 FROM people WITH AS T2 FROM poker_player ON T1.People_ID = T2.People_ID ", "text": "", "input": "What are the names of poker players in descending order of earnings?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "output": "ORDER BY DESC T2.Earnings FROM PROJECT T1.Name FROM JOIN AS T1 FROM people WITH AS T2 FROM poker_player ON T1.People_ID = T2.People_ID ", "text": "", "input": "Return the names of poker players sorted by their earnings descending.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "output": "PROJECT Nationality, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Nationality FROM people ", "text": "", "input": "What are different nationalities of people and the corresponding number of people from each nation?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "output": "PROJECT Nationality, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Nationality FROM people ", "text": "", "input": "How many people are there of each nationality?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Nationality FROM AGGREGATE COUNT(*) GROUP BY Nationality FROM people ", "text": "", "input": "What is the most common nationality of people?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Nationality FROM AGGREGATE COUNT(*) GROUP BY Nationality FROM people ", "text": "", "input": "Give the nationality that is most common across all people.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "output": "PROJECT Nationality FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY Nationality FROM people ", "text": "", "input": "What are the nationalities that are shared by at least two people?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "output": "PROJECT Nationality FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY Nationality FROM people ", "text": "", "input": "Return the nationalities for which there are two or more people.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "output": "ORDER BY ASC Name FROM PROJECT Name, Birth_Date FROM people ", "text": "", "input": "List the names and birth dates of people in ascending alphabetical order of name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "output": "ORDER BY ASC Name FROM PROJECT Name, Birth_Date FROM people ", "text": "", "input": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "output": "PROJECT Name FROM SELECT WHERE Nationality <> \"Russia\" FROM people ", "text": "", "input": "Show names of people whose nationality is not \"Russia\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "output": "PROJECT Name FROM SELECT WHERE Nationality <> \"Russia\" FROM people ", "text": "", "input": "What are the names of people who are not from Russia?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "output": "PROJECT Name FROM SELECT WHERE People_ID NOT IN PROJECT People_ID FROM poker_player FROM people ", "text": "", "input": "List the names of people that are not poker players.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "output": "PROJECT Name FROM SELECT WHERE People_ID NOT IN PROJECT People_ID FROM poker_player FROM people ", "text": "", "input": "What are the names of people who do not play poker?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT count(DISTINCT Nationality) FROM people", "output": "PROJECT COUNT(DISTINCT Nationality) FROM AGGREGATE COUNT(DISTINCT Nationality) FROM people ", "text": "", "input": "How many distinct nationalities are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT count(DISTINCT Nationality) FROM people", "output": "PROJECT COUNT(DISTINCT Nationality) FROM AGGREGATE COUNT(DISTINCT Nationality) FROM people ", "text": "", "input": "Count the number of different nationalities.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE poker_player ( Poker_Player_ID number, People_ID number, Final_Table_Made number, Best_Finish number, Money_Rank number, Earnings number, PRIMARY KEY(Poker_Player_ID), FOREIGN KEY(People_ID) REFERENCES people (People_ID)); CREATE TABLE people ( People_ID number, Nationality text, Name text, Birth_Date text, Height number, PRIMARY KEY(People_ID)); "}, {"sql": "SELECT count(*) FROM area_code_state", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM area_code_state ", "text": "", "input": "How many states are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "output": "ORDER BY DESC contestant_name FROM PROJECT contestant_number, contestant_name FROM contestants ", "text": "", "input": "List the contestant numbers and names, ordered by contestant name descending.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "SELECT vote_id ,  phone_number ,  state FROM votes", "output": "PROJECT vote_id, phone_number, state FROM votes ", "text": "", "input": "List the vote ids, phone numbers and states of all votes.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "output": "PROJECT MAX(area_code), MIN(area_code) FROM AGGREGATE MIN(area_code), MAX(area_code) FROM area_code_state ", "text": "", "input": "What are the maximum and minimum values of area codes?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "SELECT max(created) FROM votes WHERE state  =  'CA'", "output": "PROJECT MAX(created) FROM AGGREGATE MAX(created) FROM SELECT WHERE state = 'CA' FROM votes ", "text": "", "input": "What is last date created of votes from the state 'CA'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'", "output": "PROJECT contestant_name FROM SELECT WHERE contestant_name <> 'Jessie Alloway' FROM contestants ", "text": "", "input": "What are the names of the contestants whose names are not 'Jessie Alloway'", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "SELECT DISTINCT state ,  created FROM votes", "output": "PROJECT DISTINCT state, created FROM votes ", "text": "", "input": "What are the distinct states and create time of all votes?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "output": "PROJECT T1.contestant_number, T1.contestant_name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.contestant_number FROM JOIN AS T1 FROM contestants WITH AS T2 FROM votes ON T1.contestant_number = T2.contestant_number ", "text": "", "input": "What are the contestant numbers and names of the contestants who had at least two votes?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT T1.contestant_number, T1.contestant_name FROM AGGREGATE COUNT(*) GROUP BY T1.contestant_number FROM JOIN AS T1 FROM contestants WITH AS T2 FROM votes ON T1.contestant_number = T2.contestant_number ", "text": "", "input": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE state = 'NY' OR state = 'CA' FROM votes ", "text": "", "input": "What are the number of votes from state 'NY' or 'CA'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE contestant_number NOT IN PROJECT contestant_number FROM votes FROM contestants ", "text": "", "input": "How many contestants did not get voted?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.area_code FROM AGGREGATE COUNT(*) GROUP BY T1.area_code FROM JOIN AS T1 FROM area_code_state WITH AS T2 FROM votes ON T1.state = T2.state ", "text": "", "input": "What is the area code in which the most voters voted?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "output": "PROJECT T2.created, T2.state, T2.phone_number FROM SELECT WHERE T1.contestant_name = 'Tabatha Gehling' FROM JOIN AS T1 FROM contestants WITH AS T2 FROM votes ON T1.contestant_number = T2.contestant_number ", "text": "", "input": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "output": "INTERSECT PROJECT T3.area_code FROM SELECT WHERE T1.contestant_name = 'Tabatha Gehling' FROM JOIN AS T1 FROM contestants WITH JOIN AS T2 FROM votes WITH AS T3 FROM area_code_state ON T2.state = T3.state ON T1.contestant_number = T2.contestant_number WITH PROJECT T3.area_code FROM SELECT WHERE T1.contestant_name = 'Kelly Clauss' FROM JOIN AS T1 FROM contestants WITH JOIN AS T2 FROM votes WITH AS T3 FROM area_code_state ON T2.state = T3.state ON T1.contestant_number = T2.contestant_number ", "text": "", "input": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "select contestant_name from contestants where contestant_name like \"%al%\"", "output": "PROJECT contestant_name FROM SELECT WHERE contestant_name LIKE \"%al%\" FROM contestants ", "text": "", "input": "Return the names of the contestants whose names contain the substring 'Al' .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE AREA_CODE_STATE ( area_code number, state text, PRIMARY KEY(area_code)); CREATE TABLE CONTESTANTS ( contestant_number number, contestant_name text, PRIMARY KEY(contestant_number)); CREATE TABLE VOTES ( vote_id number, phone_number number, state text, contestant_number number, created time, PRIMARY KEY(vote_id), FOREIGN KEY(contestant_number) REFERENCES CONTESTANTS (contestant_number), FOREIGN KEY(state) REFERENCES AREA_CODE_STATE (state)); "}, {"sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "output": "PROJECT Name FROM SELECT WHERE IndepYear > 1950 FROM country ", "text": "", "input": "What are the names of all the countries that became independent after 1950?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country WHERE IndepYear  >  1950", "output": "PROJECT Name FROM SELECT WHERE IndepYear > 1950 FROM country ", "text": "", "input": "Give the names of the nations that were founded after 1950.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE GovernmentForm = \"Republic\" FROM country ", "text": "", "input": "How many countries have a republic as their form of government?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE GovernmentForm = \"Republic\" FROM country ", "text": "", "input": "How many countries have governments that are republics?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "output": "PROJECT SUM(SurfaceArea) FROM AGGREGATE SUM(SurfaceArea) FROM SELECT WHERE Region = \"Caribbean\" FROM country ", "text": "", "input": "What is the total surface area of the countries in the Caribbean region?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\"", "output": "PROJECT SUM(SurfaceArea) FROM AGGREGATE SUM(SurfaceArea) FROM SELECT WHERE Region = \"Caribbean\" FROM country ", "text": "", "input": "How much surface area do the countires in the Carribean cover together?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "output": "PROJECT Continent FROM SELECT WHERE Name = \"Anguilla\" FROM country ", "text": "", "input": "Which continent is Anguilla in?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\"", "output": "PROJECT Continent FROM SELECT WHERE Name = \"Anguilla\" FROM country ", "text": "", "input": "What is the continent name which Anguilla belongs to?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "output": "PROJECT Region FROM SELECT WHERE T2.Name = \"Kabul\" FROM JOIN AS T1 FROM country WITH AS T2 FROM city ON T1.Code = T2.CountryCode ", "text": "", "input": "Which region is the city Kabul located in?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\"", "output": "PROJECT Region FROM SELECT WHERE T2.Name = \"Kabul\" FROM JOIN AS T1 FROM country WITH AS T2 FROM city ON T1.Code = T2.CountryCode ", "text": "", "input": "What region is Kabul in?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC Percentage FROM PROJECT T2.Language FROM SELECT WHERE T1.Name = \"Aruba\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "Which language is the most popular in Aruba?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC Percentage FROM PROJECT T2.Language FROM SELECT WHERE T1.Name = \"Aruba\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "What language is predominantly spoken in Aruba?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "output": "PROJECT Population, LifeExpectancy FROM SELECT WHERE Name = \"Brazil\" FROM country ", "text": "", "input": "What are the population and life expectancies in Brazil?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\"", "output": "PROJECT Population, LifeExpectancy FROM SELECT WHERE Name = \"Brazil\" FROM country ", "text": "", "input": "Give me Brazil\u2019s population and life expectancies.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "output": "PROJECT Population, Region FROM SELECT WHERE Name = \"Angola\" FROM country ", "text": "", "input": "What are the region and population of Angola?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\"", "output": "PROJECT Population, Region FROM SELECT WHERE Name = \"Angola\" FROM country ", "text": "", "input": "What region does Angola belong to and what is its population?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "output": "PROJECT AVG(LifeExpectancy) FROM AGGREGATE AVG(LifeExpectancy) FROM SELECT WHERE Region = \"Central Africa\" FROM country ", "text": "", "input": "What is the average expected life expectancy for countries in the region of Central Africa?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\"", "output": "PROJECT AVG(LifeExpectancy) FROM AGGREGATE AVG(LifeExpectancy) FROM SELECT WHERE Region = \"Central Africa\" FROM country ", "text": "", "input": "How long is the people\u2019s average life expectancy in Central Africa?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "output": "LIMIT 1 FROM ORDER BY LifeExpectancy FROM PROJECT Name FROM SELECT WHERE Continent = \"Asia\" FROM country ", "text": "", "input": "What is the name of country that has the shortest life expectancy in Asia?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1", "output": "LIMIT 1 FROM ORDER BY LifeExpectancy FROM PROJECT Name FROM SELECT WHERE Continent = \"Asia\" FROM country ", "text": "", "input": "Give the name of the country in Asia with the lowest life expectancy.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "output": "PROJECT SUM(Population), MAX(GNP) FROM AGGREGATE SUM(Population), MAX(GNP) FROM SELECT WHERE Continent = \"Asia\" FROM country ", "text": "", "input": "What is the total population and maximum GNP in Asia?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\"", "output": "PROJECT SUM(Population), MAX(GNP) FROM AGGREGATE SUM(Population), MAX(GNP) FROM SELECT WHERE Continent = \"Asia\" FROM country ", "text": "", "input": "How many people live in Asia, and what is the largest GNP among them?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "output": "PROJECT AVG(LifeExpectancy) FROM AGGREGATE AVG(LifeExpectancy) FROM SELECT WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\" FROM country ", "text": "", "input": "What is the average life expectancy in African countries that are republics?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\"", "output": "PROJECT AVG(LifeExpectancy) FROM AGGREGATE AVG(LifeExpectancy) FROM SELECT WHERE Continent = \"Africa\" AND GovernmentForm = \"Republic\" FROM country ", "text": "", "input": "Give the average life expectancy for countries in Africa which are republics?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "output": "PROJECT SUM(SurfaceArea) FROM AGGREGATE SUM(SurfaceArea) FROM SELECT WHERE Continent = \"Asia\" OR Continent = \"Europe\" FROM country ", "text": "", "input": "What is the total surface area of the continents Asia and Europe?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\"", "output": "PROJECT SUM(SurfaceArea) FROM AGGREGATE SUM(SurfaceArea) FROM SELECT WHERE Continent = \"Asia\" OR Continent = \"Europe\" FROM country ", "text": "", "input": "Give the total surface area covered by countries in Asia or Europe.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "output": "PROJECT SUM(Population) FROM AGGREGATE SUM(Population) FROM SELECT WHERE District = \"Gelderland\" FROM city ", "text": "", "input": "How many people live in Gelderland district?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\"", "output": "PROJECT SUM(Population) FROM AGGREGATE SUM(Population) FROM SELECT WHERE District = \"Gelderland\" FROM city ", "text": "", "input": "What is the total population of Gelderland district?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "output": "PROJECT AVG(GNP), SUM(population) FROM AGGREGATE AVG(GNP), SUM(population) FROM SELECT WHERE GovernmentForm = \"US Territory\" FROM country ", "text": "", "input": "What is the average GNP and total population in all nations whose government is US territory?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\"", "output": "PROJECT AVG(GNP), SUM(population) FROM AGGREGATE AVG(GNP), SUM(population) FROM SELECT WHERE GovernmentForm = \"US Territory\" FROM country ", "text": "", "input": "Give the mean GNP and total population of nations which are considered US territory.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "output": "PROJECT COUNT(DISTINCT LANGUAGE) FROM AGGREGATE COUNT(DISTINCT LANGUAGE) FROM countrylanguage ", "text": "", "input": "How many unique languages are spoken in the world?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage", "output": "PROJECT COUNT(DISTINCT LANGUAGE) FROM AGGREGATE COUNT(DISTINCT LANGUAGE) FROM countrylanguage ", "text": "", "input": "What is the number of distinct languages used around the world?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "output": "PROJECT COUNT(DISTINCT GovernmentForm) FROM AGGREGATE COUNT(DISTINCT GovernmentForm) FROM SELECT WHERE Continent = \"Africa\" FROM country ", "text": "", "input": "How many type of governments are in Africa?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\"", "output": "PROJECT COUNT(DISTINCT GovernmentForm) FROM AGGREGATE COUNT(DISTINCT GovernmentForm) FROM SELECT WHERE Continent = \"Africa\" FROM country ", "text": "", "input": "How many different forms of governments are there in Africa?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "output": "PROJECT COUNT(T2.Language) FROM AGGREGATE COUNT(T2.Language) FROM SELECT WHERE T1.Name = \"Aruba\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "What is the total number of languages used in Aruba?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\"", "output": "PROJECT COUNT(T2.Language) FROM AGGREGATE COUNT(T2.Language) FROM SELECT WHERE T1.Name = \"Aruba\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "How many languages are spoken in Aruba?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "How many official languages does Afghanistan have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.Name = \"Afghanistan\" AND IsOfficial = \"T\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "How many official languages are spoken in Afghanistan?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.Name FROM AGGREGATE COUNT(*) GROUP BY T1.Name FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "What is name of the country that speaks the largest number of languages?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.Name FROM AGGREGATE COUNT(*) GROUP BY T1.Name FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "Give the name of the nation that uses the greatest amount of languages.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.Continent FROM AGGREGATE COUNT(*) GROUP BY T1.Continent FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "Which continent has the most diverse languages?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.Continent FROM AGGREGATE COUNT(*) GROUP BY T1.Continent FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "Which continent speaks the most languages?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "How many countries speak both English and Dutch?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "What is the number of nations that use English and Dutch?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "output": "INTERSECT PROJECT T1.Name FROM SELECT WHERE T2.Language = \"English\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode WITH PROJECT T1.Name FROM SELECT WHERE T2.Language = \"French\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "What are the names of nations speak both English and French?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\"", "output": "INTERSECT PROJECT T1.Name FROM SELECT WHERE T2.Language = \"English\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode WITH PROJECT T1.Name FROM SELECT WHERE T2.Language = \"French\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "Give the names of nations that speak both English and French.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "output": "INTERSECT PROJECT T1.Name FROM SELECT WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode WITH PROJECT T1.Name FROM SELECT WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "What are the names of nations where both English and French are official languages?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\"", "output": "INTERSECT PROJECT T1.Name FROM SELECT WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode WITH PROJECT T1.Name FROM SELECT WHERE T2.Language = \"French\" AND T2.IsOfficial = \"T\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "Give the names of countries with English and French as official languages.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "output": "PROJECT COUNT(DISTINCT Continent) FROM AGGREGATE COUNT(DISTINCT Continent) FROM SELECT WHERE T2.Language = \"Chinese\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "What is the number of distinct continents where Chinese is spoken?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\"", "output": "PROJECT COUNT(DISTINCT Continent) FROM AGGREGATE COUNT(DISTINCT Continent) FROM SELECT WHERE T2.Language = \"Chinese\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "How many continents speak Chinese?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "output": "PROJECT DISTINCT T1.Region FROM SELECT WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "What are the regions that use English or Dutch?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\"", "output": "PROJECT DISTINCT T1.Region FROM SELECT WHERE T2.Language = \"English\" OR T2.Language = \"Dutch\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "Which regions speak Dutch or English?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\"", "output": "UNION PROJECT t1.name FROM SELECT WHERE t2.language = \"english\" AND isofficial = \"t\" FROM JOIN AS t1 FROM country WITH AS t2 FROM countrylanguage ON t1.code = t2.countrycode WITH PROJECT t1.name FROM SELECT WHERE t2.language = \"dutch\" AND isofficial = \"t\" FROM JOIN AS t1 FROM country WITH AS t2 FROM countrylanguage ON t1.code = t2.countrycode ", "text": "", "input": "What are the countries where either English or Dutch is the official language ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\"", "output": "UNION PROJECT * FROM SELECT WHERE T2.Language = \"English\" AND IsOfficial = \"T\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode WITH PROJECT * FROM SELECT WHERE T2.Language = \"Dutch\" AND IsOfficial = \"T\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "Which countries have either English or Dutch as an official language?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.Language FROM AGGREGATE COUNT(*) GROUP BY T2.Language FROM SELECT WHERE T1.Continent = \"Asia\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "Which language is the most popular on the Asian continent?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.Language FROM AGGREGATE COUNT(*) GROUP BY T2.Language FROM SELECT WHERE T1.Continent = \"Asia\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "What is the language that is used by the largest number of Asian nations?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "output": "PROJECT T2.Language FROM SELECT WHERE COUNT(*) = 1 FROM AGGREGATE COUNT(*) GROUP BY T2.Language FROM SELECT WHERE T1.GovernmentForm = \"Republic\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "Which languages are spoken by only one country in republic governments?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1", "output": "PROJECT T2.Language FROM SELECT WHERE COUNT(*) = 1 FROM AGGREGATE COUNT(*) GROUP BY T2.Language FROM SELECT WHERE T1.GovernmentForm = \"Republic\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "What languages are only used by a single country with a republic government?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC T1.Population FROM PROJECT T1.Name, T1.Population FROM SELECT WHERE T2.Language = \"English\" FROM JOIN AS T1 FROM city WITH AS T2 FROM countrylanguage ON T1.CountryCode = T2.CountryCode ", "text": "", "input": "Find the city with the largest population that uses English.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC T1.Population FROM PROJECT T1.Name, T1.Population FROM SELECT WHERE T2.Language = \"English\" FROM JOIN AS T1 FROM city WITH AS T2 FROM countrylanguage ON T1.CountryCode = T2.CountryCode ", "text": "", "input": "What is the most populace city that speaks English?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC SurfaceArea FROM PROJECT Name, Population, LifeExpectancy FROM SELECT WHERE Continent = \"Asia\" FROM country ", "text": "", "input": "Find the name, population and expected life length of asian country with the largest area?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC SurfaceArea FROM PROJECT Name, Population, LifeExpectancy FROM SELECT WHERE Continent = \"Asia\" FROM country ", "text": "", "input": "What are the name, population, and life expectancy of the largest Asian country by land?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "output": "PROJECT AVG(LifeExpectancy) FROM AGGREGATE AVG(LifeExpectancy) FROM SELECT WHERE Name NOT IN PROJECT T1.Name FROM SELECT WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode FROM country ", "text": "", "input": "What is average life expectancy in the countries where English is not the official language?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")", "output": "PROJECT AVG(LifeExpectancy) FROM AGGREGATE AVG(LifeExpectancy) FROM SELECT WHERE Name NOT IN PROJECT T1.Name FROM SELECT WHERE T2.Language = \"English\" AND T2.IsOfficial = \"T\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode FROM country ", "text": "", "input": "Give the mean life expectancy of countries in which English is not the official language.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "output": "PROJECT SUM(Population) FROM AGGREGATE SUM(Population) FROM SELECT WHERE Name NOT IN PROJECT T1.Name FROM SELECT WHERE T2.Language = \"English\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode FROM country ", "text": "", "input": "What is the total number of people living in the nations that do not use English?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")", "output": "PROJECT SUM(Population) FROM AGGREGATE SUM(Population) FROM SELECT WHERE Name NOT IN PROJECT T1.Name FROM SELECT WHERE T2.Language = \"English\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode FROM country ", "text": "", "input": "How many people live in countries that do not speak English?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "output": "PROJECT T2.Language FROM SELECT WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "What is the official language spoken in the country whose head of state is Beatrix?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\"", "output": "PROJECT T2.Language FROM SELECT WHERE T1.HeadOfState = \"Beatrix\" AND T2.IsOfficial = \"T\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "What is the official language used in the country the name of whose head of state is Beatrix.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "output": "PROJECT COUNT(DISTINCT T2.Language) FROM AGGREGATE COUNT(DISTINCT T2.Language) FROM SELECT WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\"", "output": "PROJECT COUNT(DISTINCT T2.Language) FROM AGGREGATE COUNT(DISTINCT T2.Language) FROM SELECT WHERE IndepYear < 1930 AND T2.IsOfficial = \"T\" FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "For the countries founded before 1930, what is the total number of distinct official languages?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "output": "PROJECT Name FROM SELECT WHERE SurfaceArea > PROJECT MIN(SurfaceArea) FROM AGGREGATE MIN(SurfaceArea) FROM SELECT WHERE Continent = \"Europe\" FROM country FROM country ", "text": "", "input": "What are the countries that have greater surface area than any country in Europe?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")", "output": "PROJECT Name FROM SELECT WHERE SurfaceArea > PROJECT MIN(SurfaceArea) FROM AGGREGATE MIN(SurfaceArea) FROM SELECT WHERE Continent = \"Europe\" FROM country FROM country ", "text": "", "input": "Which countries have greater area than that of any country in Europe?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")", "output": "PROJECT Name FROM SELECT WHERE Continent = \"Africa\" AND population < PROJECT MAX(population) FROM AGGREGATE MAX(population) FROM SELECT WHERE Continent = \"Asia\" FROM country FROM country ", "text": "", "input": "What are the African countries that have a  population less than any country in Asia?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")", "output": "PROJECT Name FROM SELECT WHERE Continent = \"Africa\" AND population < PROJECT MIN(population) FROM AGGREGATE MIN(population) FROM SELECT WHERE Continent = \"Asia\" FROM country FROM country ", "text": "", "input": "Which African countries have a smaller population than that of any country in Asia?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")", "output": "PROJECT Name FROM SELECT WHERE Continent = \"Asia\" AND population > PROJECT MAX(population) FROM AGGREGATE MAX(population) FROM SELECT WHERE Continent = \"Africa\" FROM country FROM country ", "text": "", "input": "Which Asian countries have a population that is larger than any country in Africa?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")", "output": "PROJECT Name FROM SELECT WHERE Continent = \"Asia\" AND population > PROJECT MIN(population) FROM AGGREGATE MIN(population) FROM SELECT WHERE Continent = \"Africa\" FROM country FROM country ", "text": "", "input": "What are the Asian countries which have a population larger than that of any country in Africa?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "output": "EXCEPT PROJECT CountryCode FROM countrylanguage WITH PROJECT CountryCode FROM SELECT WHERE LANGUAGE = \"English\" FROM countrylanguage ", "text": "", "input": "What are the country codes for countries that do not speak English?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "output": "EXCEPT PROJECT CountryCode FROM countrylanguage WITH PROJECT CountryCode FROM SELECT WHERE LANGUAGE = \"English\" FROM countrylanguage ", "text": "", "input": "Return the country codes for countries that do not speak English.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "output": "PROJECT DISTINCT CountryCode FROM SELECT WHERE LANGUAGE <> \"English\" FROM countrylanguage ", "text": "", "input": "What are the country codes of countries where people use languages other than English?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\"", "output": "PROJECT DISTINCT CountryCode FROM SELECT WHERE LANGUAGE <> \"English\" FROM countrylanguage ", "text": "", "input": "Give the country codes for countries in which people speak langauges that are not English.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "output": "EXCEPT PROJECT Code FROM SELECT WHERE GovernmentForm <> \"Republic\" FROM country WITH PROJECT CountryCode FROM SELECT WHERE LANGUAGE = \"English\" FROM countrylanguage ", "text": "", "input": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\"", "output": "EXCEPT PROJECT Code FROM SELECT WHERE GovernmentForm <> \"Republic\" FROM country WITH PROJECT CountryCode FROM SELECT WHERE LANGUAGE = \"English\" FROM countrylanguage ", "text": "", "input": "Return the codes of countries that do not speak English and do not have Republics for governments.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "output": "PROJECT DISTINCT T2.Name FROM SELECT WHERE T1.Continent = 'Europe' AND T1.Name NOT IN PROJECT T3.Name FROM SELECT WHERE T4.IsOfficial = 'T' AND T4.Language = 'English' FROM JOIN AS T3 FROM country WITH AS T4 FROM countrylanguage ON T3.Code = T4.CountryCode FROM JOIN AS T2 FROM city WITH AS T1 FROM country ON T2.CountryCode = T1.Code ", "text": "", "input": "Which cities are in European countries where English is not the official language?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')", "output": "PROJECT DISTINCT T2.Name FROM SELECT WHERE T1.Continent = 'Europe' AND T1.Name NOT IN PROJECT T3.Name FROM SELECT WHERE T4.IsOfficial = 'T' AND T4.Language = 'English' FROM JOIN AS T3 FROM country WITH AS T4 FROM countrylanguage ON T3.Code = T4.CountryCode FROM JOIN AS T2 FROM city WITH AS T1 FROM country ON T2.CountryCode = T1.Code ", "text": "", "input": "What are the names of cities in Europe for which English is not the official language?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\"", "output": "PROJECT DISTINCT t3.name FROM SELECT WHERE t2.isofficial = 't' AND t2.language = 'chinese' AND t1.continent = \"asia\" FROM JOIN AS t2 FROM countrylanguage WITH JOIN AS t1 FROM country WITH AS t3 FROM city ON t1.code = t3.countrycode ON t1.code = t2.countrycode ", "text": "", "input": "Which unique cities are in Asian countries where Chinese is the official language ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\"", "output": "PROJECT DISTINCT T3.Name FROM SELECT WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = \"Asia\" FROM JOIN AS T2 FROM countrylanguage WITH JOIN AS T1 FROM country WITH AS T3 FROM city ON T1.Code = T3.CountryCode ON T1.Code = T2.CountryCode ", "text": "", "input": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "output": "LIMIT 1 FROM ORDER BY Population FROM PROJECT Name, SurfaceArea, IndepYear FROM country ", "text": "", "input": "What are the name, independence year, and surface area of the country with the smallest population?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1", "output": "LIMIT 1 FROM ORDER BY Population FROM PROJECT Name, SurfaceArea, IndepYear FROM country ", "text": "", "input": "Give the name, year of independence, and surface area of the country that has the lowest population.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC SurfaceArea FROM PROJECT Name, population, HeadOfState FROM country ", "text": "", "input": "What are the population, name and leader of the country with the largest area?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC SurfaceArea FROM PROJECT Name, population, HeadOfState FROM country ", "text": "", "input": "Give the name, population, and head of state for the country that has the largest area.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "output": "PROJECT COUNT(T2.Language), T1.Name FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*), COUNT(T2.Language) GROUP BY T1.Name FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2", "output": "PROJECT COUNT(T2.Language), T1.Name FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*), COUNT(T2.Language) GROUP BY T1.Name FROM JOIN AS T1 FROM country WITH AS T2 FROM countrylanguage ON T1.Code = T2.CountryCode ", "text": "", "input": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "output": "PROJECT COUNT(*), District FROM AGGREGATE COUNT(*) GROUP BY District FROM SELECT WHERE Population > PROJECT AVG(Population) FROM AGGREGATE AVG(Population) FROM city FROM city ", "text": "", "input": "Find the number of cities in each district whose population is greater than the average population of cities?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District", "output": "PROJECT COUNT(*), District FROM AGGREGATE COUNT(*) GROUP BY District FROM SELECT WHERE Population > PROJECT AVG(Population) FROM AGGREGATE AVG(Population) FROM city FROM city ", "text": "", "input": "How many cities in each district have a population that is above the average population across all cities?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "output": "PROJECT SUM(Population), GovernmentForm FROM SELECT WHERE AVG(LifeExpectancy) > 72 FROM AGGREGATE SUM(Population), AVG(LifeExpectancy), COUNT(*) GROUP BY GovernmentForm FROM country ", "text": "", "input": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72", "output": "PROJECT SUM(Population), GovernmentForm FROM SELECT WHERE AVG(LifeExpectancy) > 72 FROM AGGREGATE SUM(Population), AVG(LifeExpectancy), COUNT(*) GROUP BY GovernmentForm FROM country ", "text": "", "input": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "output": "PROJECT SUM(Population), AVG(LifeExpectancy), Continent FROM SELECT WHERE AVG(LifeExpectancy) < 72 FROM AGGREGATE SUM(Population), AVG(LifeExpectancy), COUNT(*) GROUP BY Continent FROM country ", "text": "", "input": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72", "output": "PROJECT SUM(Population), AVG(LifeExpectancy), Continent FROM SELECT WHERE AVG(LifeExpectancy) < 72 FROM AGGREGATE SUM(Population), AVG(LifeExpectancy), COUNT(*) GROUP BY Continent FROM country ", "text": "", "input": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "output": "LIMIT 5 FROM ORDER BY DESC SurfaceArea FROM PROJECT Name, SurfaceArea FROM country ", "text": "", "input": "What are the names and areas of countries with the top 5 largest area?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5", "output": "LIMIT 5 FROM ORDER BY DESC SurfaceArea FROM PROJECT Name, SurfaceArea FROM country ", "text": "", "input": "Return the names and surface areas of the 5 largest countries.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "output": "LIMIT 3 FROM ORDER BY DESC Population FROM PROJECT Name FROM country ", "text": "", "input": "What are names of countries with the top 3 largest population?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3", "output": "LIMIT 3 FROM ORDER BY DESC Population FROM PROJECT Name FROM country ", "text": "", "input": "Return the names of the 3 most populated countries.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "output": "LIMIT 3 FROM ORDER BY ASC Population FROM PROJECT Name FROM country ", "text": "", "input": "What are the names of the nations with the 3 lowest populations?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3", "output": "LIMIT 3 FROM ORDER BY ASC Population FROM PROJECT Name FROM country ", "text": "", "input": "Return the names of the 3 countries with the fewest people.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE continent = \"Asia\" FROM country ", "text": "", "input": "how many countries are in Asia?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(*) FROM country WHERE continent  =  \"Asia\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE continent = \"Asia\" FROM country ", "text": "", "input": "Count the number of countries in Asia.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "output": "PROJECT Name FROM SELECT WHERE continent = \"Europe\" AND Population = \"80000\" FROM country ", "text": "", "input": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\"", "output": "PROJECT Name FROM SELECT WHERE continent = \"Europe\" AND Population = \"80000\" FROM country ", "text": "", "input": "Give the names of countries that are in Europe and have a population equal to 80000.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "output": "PROJECT SUM(population), AVG(surfacearea) FROM AGGREGATE AVG(surfacearea), SUM(population) FROM SELECT WHERE continent = \"north america\" AND surfacearea > 3000 FROM country ", "text": "", "input": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000", "output": "PROJECT SUM(population), AVG(surfacearea) FROM AGGREGATE AVG(surfacearea), SUM(population) FROM SELECT WHERE continent = \"north america\" AND surfacearea > 3000 FROM country ", "text": "", "input": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000", "output": "PROJECT name FROM SELECT WHERE Population BETWEEN 160000 AND 900000 FROM city ", "text": "", "input": "What are the cities whose population is between 160000 and 900000?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "select name from city where population between 160000 and 900000", "output": "PROJECT name FROM SELECT WHERE population BETWEEN 160000 AND 900000 FROM city ", "text": "", "input": "Return the names of cities that have a population between 160000 and 900000 .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT LANGUAGE FROM AGGREGATE COUNT(*) GROUP BY LANGUAGE FROM countrylanguage ", "text": "", "input": "Which language is spoken by the largest number of countries?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT LANGUAGE FROM AGGREGATE COUNT(*) GROUP BY LANGUAGE FROM countrylanguage ", "text": "", "input": "Give the language that is spoken in the most countries.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "output": "PROJECT LANGUAGE, CountryCode, MAX(Percentage) FROM AGGREGATE COUNT(*), MAX(Percentage) GROUP BY CountryCode FROM countrylanguage ", "text": "", "input": "What is the language spoken by the largest percentage of people in each country?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode", "output": "PROJECT LANGUAGE, CountryCode, MAX(Percentage) FROM AGGREGATE COUNT(*), MAX(Percentage) GROUP BY CountryCode FROM countrylanguage ", "text": "", "input": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "output": "PROJECT COUNT(*), MAX(Percentage) FROM AGGREGATE COUNT(*), MAX(Percentage) GROUP BY CountryCode FROM SELECT WHERE LANGUAGE = \"Spanish\" FROM countrylanguage ", "text": "", "input": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "output": "PROJECT COUNT(*), MAX(Percentage) FROM AGGREGATE COUNT(*), MAX(Percentage) GROUP BY CountryCode FROM SELECT WHERE LANGUAGE = \"Spanish\" FROM countrylanguage ", "text": "", "input": "Count the number of countries for which Spanish is the predominantly spoken language.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "output": "PROJECT CountryCode, MAX(Percentage) FROM AGGREGATE COUNT(*), MAX(Percentage) GROUP BY CountryCode FROM SELECT WHERE LANGUAGE = \"Spanish\" FROM countrylanguage ", "text": "", "input": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode", "output": "PROJECT CountryCode, MAX(Percentage) FROM AGGREGATE COUNT(*), MAX(Percentage) GROUP BY CountryCode FROM SELECT WHERE LANGUAGE = \"Spanish\" FROM countrylanguage ", "text": "", "input": "Return the codes of countries for which Spanish is the predominantly spoken language.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city ( ID number, Name text, CountryCode text, District text, Population number, PRIMARY KEY(ID), FOREIGN KEY(CountryCode) REFERENCES country (Code)); CREATE TABLE sqlite_sequence ( name text, seq text); CREATE TABLE country ( Code text, Name text, Continent text, Region text, SurfaceArea number, IndepYear number, Population number, LifeExpectancy number, GNP number, GNPOld number, LocalName text, GovernmentForm text, HeadOfState text, Capital number, Code2 text, PRIMARY KEY(Code)); CREATE TABLE countrylanguage ( CountryCode text, Language text, IsOfficial text, Percentage number, PRIMARY KEY(CountryCode), FOREIGN KEY(CountryCode) REFERENCES country (Code)); "}, {"sql": "SELECT count(*) FROM conductor", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM conductor ", "text": "", "input": "How many conductors are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT count(*) FROM conductor", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM conductor ", "text": "", "input": "Count the number of conductors.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Name FROM conductor ORDER BY Age ASC", "output": "ORDER BY ASC Age FROM PROJECT Name FROM conductor ", "text": "", "input": "List the names of conductors in ascending order of age.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Name FROM conductor ORDER BY Age ASC", "output": "ORDER BY ASC Age FROM PROJECT Name FROM conductor ", "text": "", "input": "What are the names of conductors, ordered by age?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "output": "PROJECT Name FROM SELECT WHERE Nationality <> 'USA' FROM conductor ", "text": "", "input": "What are the names of conductors whose nationalities are not \"USA\"?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'", "output": "PROJECT Name FROM SELECT WHERE Nationality <> 'USA' FROM conductor ", "text": "", "input": "Return the names of conductors that do not have the nationality \"USA\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "output": "ORDER BY DESC Year_of_Founded FROM PROJECT Record_Company FROM orchestra ", "text": "", "input": "What are the record companies of orchestras in descending order of years in which they were founded?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC", "output": "ORDER BY DESC Year_of_Founded FROM PROJECT Record_Company FROM orchestra ", "text": "", "input": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT avg(Attendance) FROM SHOW", "output": "PROJECT AVG(Attendance) FROM AGGREGATE AVG(Attendance) FROM SHOW ", "text": "", "input": "What is the average attendance of shows?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT avg(Attendance) FROM SHOW", "output": "PROJECT AVG(Attendance) FROM AGGREGATE AVG(Attendance) FROM SHOW ", "text": "", "input": "Return the average attendance across all shows.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "output": "PROJECT MAX(SHARE), MIN(SHARE) FROM AGGREGATE MAX(SHARE), MIN(SHARE) FROM SELECT WHERE TYPE <> \"Live final\" FROM performance ", "text": "", "input": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\"", "output": "PROJECT MAX(SHARE), MIN(SHARE) FROM AGGREGATE MAX(SHARE), MIN(SHARE) FROM SELECT WHERE TYPE <> \"Live final\" FROM performance ", "text": "", "input": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT count(DISTINCT Nationality) FROM conductor", "output": "PROJECT COUNT(DISTINCT Nationality) FROM AGGREGATE COUNT(DISTINCT Nationality) FROM conductor ", "text": "", "input": "How many different nationalities do conductors have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT count(DISTINCT Nationality) FROM conductor", "output": "PROJECT COUNT(DISTINCT Nationality) FROM AGGREGATE COUNT(DISTINCT Nationality) FROM conductor ", "text": "", "input": "Count the number of different nationalities of conductors.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "output": "ORDER BY DESC Year_of_Work FROM PROJECT Name FROM conductor ", "text": "", "input": "List names of conductors in descending order of years of work.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC", "output": "ORDER BY DESC Year_of_Work FROM PROJECT Name FROM conductor ", "text": "", "input": "What are the names of conductors, sorted descending by the number of years they have worked?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC Year_of_Work FROM PROJECT Name FROM conductor ", "text": "", "input": "List the name of the conductor with the most years of work.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC Year_of_Work FROM PROJECT Name FROM conductor ", "text": "", "input": "What is the name of the conductor who has worked the greatest number of years?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "output": "PROJECT T1.Name, T2.Orchestra FROM JOIN AS T1 FROM conductor WITH AS T2 FROM orchestra ON T1.Conductor_ID = T2.Conductor_ID ", "text": "", "input": "Show the names of conductors and the orchestras they have conducted.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID", "output": "PROJECT T1.Name, T2.Orchestra FROM JOIN AS T1 FROM conductor WITH AS T2 FROM orchestra ON T1.Conductor_ID = T2.Conductor_ID ", "text": "", "input": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "output": "PROJECT T1.Name FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T2.Conductor_ID FROM JOIN AS T1 FROM conductor WITH AS T2 FROM orchestra ON T1.Conductor_ID = T2.Conductor_ID ", "text": "", "input": "Show the names of conductors that have conducted more than one orchestras.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1", "output": "PROJECT T1.Name FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T2.Conductor_ID FROM JOIN AS T1 FROM conductor WITH AS T2 FROM orchestra ON T1.Conductor_ID = T2.Conductor_ID ", "text": "", "input": "What are the names of conductors who have conducted at more than one orchestra?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.Name FROM AGGREGATE COUNT(*) GROUP BY T2.Conductor_ID FROM JOIN AS T1 FROM conductor WITH AS T2 FROM orchestra ON T1.Conductor_ID = T2.Conductor_ID ", "text": "", "input": "Show the name of the conductor that has conducted the most number of orchestras.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.Name FROM AGGREGATE COUNT(*) GROUP BY T2.Conductor_ID FROM JOIN AS T1 FROM conductor WITH AS T2 FROM orchestra ON T1.Conductor_ID = T2.Conductor_ID ", "text": "", "input": "What is the name of the conductor who has conducted the most orchestras?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "output": "PROJECT T1.Name FROM SELECT WHERE Year_of_Founded > 2008 FROM JOIN AS T1 FROM conductor WITH AS T2 FROM orchestra ON T1.Conductor_ID = T2.Conductor_ID ", "text": "", "input": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008", "output": "PROJECT T1.Name FROM SELECT WHERE Year_of_Founded > 2008 FROM JOIN AS T1 FROM conductor WITH AS T2 FROM orchestra ON T1.Conductor_ID = T2.Conductor_ID ", "text": "", "input": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "output": "PROJECT Record_Company, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Record_Company FROM orchestra ", "text": "", "input": "Please show the different record companies and the corresponding number of orchestras.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company", "output": "PROJECT Record_Company, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Record_Company FROM orchestra ", "text": "", "input": "How many orchestras does each record company manage?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "output": "ORDER BY ASC COUNT(*) FROM PROJECT Major_Record_Format FROM AGGREGATE COUNT(*) GROUP BY Major_Record_Format FROM orchestra ", "text": "", "input": "Please show the record formats of orchestras in ascending order of count.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC", "output": "ORDER BY ASC COUNT(*) FROM PROJECT Major_Record_Format FROM AGGREGATE COUNT(*) GROUP BY Major_Record_Format FROM orchestra ", "text": "", "input": "What are the major record formats of orchestras, sorted by their frequency?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Record_Company FROM AGGREGATE COUNT(*) GROUP BY Record_Company FROM orchestra ", "text": "", "input": "List the record company shared by the most number of orchestras.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Record_Company FROM AGGREGATE COUNT(*) GROUP BY Record_Company FROM orchestra ", "text": "", "input": "What is the record company used by the greatest number of orchestras?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "output": "PROJECT Orchestra FROM SELECT WHERE Orchestra_ID NOT IN PROJECT Orchestra_ID FROM performance FROM orchestra ", "text": "", "input": "List the names of orchestras that have no performance.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)", "output": "PROJECT Orchestra FROM SELECT WHERE Orchestra_ID NOT IN PROJECT Orchestra_ID FROM performance FROM orchestra ", "text": "", "input": "What are the orchestras that do not have any performances?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "output": "INTERSECT PROJECT Record_Company FROM SELECT WHERE Year_of_Founded < 2003 FROM orchestra WITH PROJECT Record_Company FROM SELECT WHERE Year_of_Founded > 2003 FROM orchestra ", "text": "", "input": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003", "output": "INTERSECT PROJECT Record_Company FROM SELECT WHERE Year_of_Founded < 2003 FROM orchestra WITH PROJECT Record_Company FROM SELECT WHERE Year_of_Founded > 2003 FROM orchestra ", "text": "", "input": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\" FROM orchestra ", "text": "", "input": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\" FROM orchestra ", "text": "", "input": "Count the number of orchestras that have CD or DVD as their record format.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "output": "PROJECT Year_of_Founded FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T2.Orchestra_ID FROM JOIN AS T1 FROM orchestra WITH AS T2 FROM performance ON T1.Orchestra_ID = T2.Orchestra_ID ", "text": "", "input": "Show the years in which orchestras that have given more than one performance are founded.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1", "output": "PROJECT Year_of_Founded FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T2.Orchestra_ID FROM JOIN AS T1 FROM orchestra WITH AS T2 FROM performance ON T1.Orchestra_ID = T2.Orchestra_ID ", "text": "", "input": "What are years of founding for orchestras that have had more than a single performance?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conductor ( Conductor_ID number, Name text, Age number, Nationality text, Year_of_Work number, PRIMARY KEY(Conductor_ID)); CREATE TABLE orchestra ( Orchestra_ID number, Orchestra text, Conductor_ID number, Record_Company text, Year_of_Founded number, Major_Record_Format text, PRIMARY KEY(Orchestra_ID), FOREIGN KEY(Conductor_ID) REFERENCES conductor (Conductor_ID)); CREATE TABLE performance ( Performance_ID number, Orchestra_ID number, Type text, Date text, Official_ratings_(millions) number, Weekly_rank text, Share text, PRIMARY KEY(Performance_ID), FOREIGN KEY(Orchestra_ID) REFERENCES orchestra (Orchestra_ID)); CREATE TABLE show ( Show_ID number, Performance_ID number, If_first_show others, Result text, Attendance number, FOREIGN KEY(Performance_ID) REFERENCES performance (Performance_ID)); "}, {"sql": "SELECT count(*) FROM Highschooler", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Highschooler ", "text": "", "input": "How many high schoolers are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT count(*) FROM Highschooler", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Highschooler ", "text": "", "input": "Count the number of high schoolers.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT name ,  grade FROM Highschooler", "output": "PROJECT name, grade FROM Highschooler ", "text": "", "input": "Show the names and grades of each high schooler.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT name ,  grade FROM Highschooler", "output": "PROJECT name, grade FROM Highschooler ", "text": "", "input": "What are the names and grades for each high schooler?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT grade FROM Highschooler", "output": "PROJECT grade FROM Highschooler ", "text": "", "input": "Show all the grades of the high schoolers.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT grade FROM Highschooler", "output": "PROJECT grade FROM Highschooler ", "text": "", "input": "What is the grade of each high schooler?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "output": "PROJECT grade FROM SELECT WHERE name = \"Kyle\" FROM Highschooler ", "text": "", "input": "What grade is Kyle in?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "output": "PROJECT grade FROM SELECT WHERE name = \"Kyle\" FROM Highschooler ", "text": "", "input": "Return the grade for the high schooler named Kyle.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT name FROM Highschooler WHERE grade  =  10", "output": "PROJECT name FROM SELECT WHERE grade = 10 FROM Highschooler ", "text": "", "input": "Show the names of all high schoolers in grade 10.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT name FROM Highschooler WHERE grade  =  10", "output": "PROJECT name FROM SELECT WHERE grade = 10 FROM Highschooler ", "text": "", "input": "What are the names of all high schoolers in grade 10?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "output": "PROJECT ID FROM SELECT WHERE name = \"Kyle\" FROM Highschooler ", "text": "", "input": "Show the ID of the high schooler named Kyle.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "output": "PROJECT ID FROM SELECT WHERE name = \"Kyle\" FROM Highschooler ", "text": "", "input": "What is Kyle's id?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE grade = 9 OR grade = 10 FROM Highschooler ", "text": "", "input": "How many high schoolers are there in grade 9 or 10?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE grade = 9 OR grade = 10 FROM Highschooler ", "text": "", "input": "Count the number of high schoolers in grades 9 or 10.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "output": "PROJECT grade, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY grade FROM Highschooler ", "text": "", "input": "Show the number of high schoolers for each grade.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "output": "PROJECT grade, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY grade FROM Highschooler ", "text": "", "input": "How many high schoolers are in each grade?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT grade FROM AGGREGATE COUNT(*) GROUP BY grade FROM Highschooler ", "text": "", "input": "Which grade has the most high schoolers?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT grade FROM AGGREGATE COUNT(*) GROUP BY grade FROM Highschooler ", "text": "", "input": "Return the grade that has the greatest number of high schoolers.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "output": "PROJECT grade FROM SELECT WHERE COUNT(*) >= 4 FROM AGGREGATE COUNT(*) GROUP BY grade FROM Highschooler ", "text": "", "input": "Show me all grades that have at least 4 students.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "output": "PROJECT grade FROM SELECT WHERE COUNT(*) >= 4 FROM AGGREGATE COUNT(*) GROUP BY grade FROM Highschooler ", "text": "", "input": "Which grades have 4 or more high schoolers?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "output": "PROJECT student_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY student_id FROM Friend ", "text": "", "input": "Show the student IDs and numbers of friends corresponding to each.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "output": "PROJECT student_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY student_id FROM Friend ", "text": "", "input": "How many friends does each student have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "output": "PROJECT T2.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "Show the names of high school students and their corresponding number of friends.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "output": "PROJECT T2.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "What are the names of the high schoolers and how many friends does each have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "What is the name of the high schooler who has the greatest number of friends?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "Return the name of the high school student with the most friends.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "output": "PROJECT T2.name FROM SELECT WHERE COUNT(*) >= 3 FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "Show the names of high schoolers who have at least 3 friends.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "output": "PROJECT T2.name FROM SELECT WHERE COUNT(*) >= 3 FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "What are the names of high schoolers who have 3 or more friends?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "output": "PROJECT T3.name FROM SELECT WHERE T2.name = \"Kyle\" FROM JOIN AS T2 FROM Highschooler WITH JOIN AS T1 FROM Friend WITH AS T3 FROM Highschooler ON T1.friend_id = T3.id ON T1.student_id = T2.id ", "text": "", "input": "Show the names of all of the high schooler Kyle's friends.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "output": "PROJECT T3.name FROM SELECT WHERE T2.name = \"Kyle\" FROM JOIN AS T2 FROM Highschooler WITH JOIN AS T1 FROM Friend WITH AS T3 FROM Highschooler ON T1.friend_id = T3.id ON T1.student_id = T2.id ", "text": "", "input": "Return the names of friends of the high school student Kyle.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.name = \"Kyle\" FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "How many friends does the high school student Kyle have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.name = \"Kyle\" FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "Count the number of friends Kyle has.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "output": "EXCEPT PROJECT id FROM Highschooler WITH PROJECT student_id FROM Friend ", "text": "", "input": "Show ids of all students who do not have any friends.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "output": "EXCEPT PROJECT id FROM Highschooler WITH PROJECT student_id FROM Friend ", "text": "", "input": "What are the ids of high school students who do not have friends?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "output": "EXCEPT PROJECT name FROM Highschooler WITH PROJECT T2.name FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "Show names of all high school students who do not have any friends.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "output": "EXCEPT PROJECT name FROM Highschooler WITH PROJECT T2.name FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "What are the names of students who have no friends?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "output": "INTERSECT PROJECT student_id FROM Friend WITH PROJECT liked_id FROM Likes ", "text": "", "input": "Show the ids of high schoolers who have friends and are also liked by someone else.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "output": "INTERSECT PROJECT student_id FROM Friend WITH PROJECT liked_id FROM Likes ", "text": "", "input": "What are the ids of students who both have friends and are liked?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "output": "INTERSECT PROJECT T2.name FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id WITH PROJECT T2.name FROM JOIN AS T1 FROM Likes WITH AS T2 FROM Highschooler ON T1.liked_id = T2.id ", "text": "", "input": "Show name of all students who have some friends and also are liked by someone else.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "output": "INTERSECT PROJECT T2.name FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id WITH PROJECT T2.name FROM JOIN AS T1 FROM Likes WITH AS T2 FROM Highschooler ON T1.liked_id = T2.id ", "text": "", "input": "What are the names of high schoolers who both have friends and are liked?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "output": "PROJECT student_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY student_id FROM Likes ", "text": "", "input": "Count the number of likes for each student id.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "output": "PROJECT student_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY student_id FROM Likes ", "text": "", "input": "How many likes correspond to each student id?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "output": "PROJECT T2.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Likes WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "Show the names of high schoolers who have likes, and numbers of likes for each.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "output": "PROJECT T2.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Likes WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "What are the names of high schoolers who have likes, and how many likes does each have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Likes WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "What is the name of the high schooler who has the greatest number of likes?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Likes WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "Give the name of the student with the most likes.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "output": "PROJECT T2.name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Likes WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "Show the names of students who have at least 2 likes.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "output": "PROJECT T2.name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Likes WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "What are the names of students who have 2 or more likes?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "output": "PROJECT T2.name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM SELECT WHERE T2.grade > 5 FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "output": "PROJECT T2.name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM SELECT WHERE T2.grade > 5 FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.name = \"Kyle\" FROM JOIN AS T1 FROM Likes WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "How many likes does Kyle have?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.name = \"Kyle\" FROM JOIN AS T1 FROM Likes WITH AS T2 FROM Highschooler ON T1.student_id = T2.id ", "text": "", "input": "Return the number of likes that the high schooler named Kyle has.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "output": "PROJECT AVG(grade) FROM AGGREGATE AVG(grade) FROM SELECT WHERE id IN PROJECT T1.student_id FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id FROM Highschooler ", "text": "", "input": "Find the average grade of all students who have some friends.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "output": "PROJECT AVG(grade) FROM AGGREGATE AVG(grade) FROM SELECT WHERE id IN PROJECT T1.student_id FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id FROM Highschooler ", "text": "", "input": "What is the average grade of students who have friends?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "output": "PROJECT MIN(grade) FROM AGGREGATE MIN(grade) FROM SELECT WHERE id NOT IN PROJECT T1.student_id FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id FROM Highschooler ", "text": "", "input": "Find the minimum grade of students who have no friends.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "output": "PROJECT MIN(grade) FROM AGGREGATE MIN(grade) FROM SELECT WHERE id NOT IN PROJECT T1.student_id FROM JOIN AS T1 FROM Friend WITH AS T2 FROM Highschooler ON T1.student_id = T2.id FROM Highschooler ", "text": "", "input": "What is the lowest grade of students who do not have any friends?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Highschooler ( ID number, name text, grade number, PRIMARY KEY(ID)); CREATE TABLE Friend ( student_id number, friend_id number, PRIMARY KEY(student_id), FOREIGN KEY(friend_id) REFERENCES Highschooler (ID), FOREIGN KEY(student_id) REFERENCES Highschooler (ID)); CREATE TABLE Likes ( student_id number, liked_id number, PRIMARY KEY(student_id), FOREIGN KEY(student_id) REFERENCES Highschooler (ID), FOREIGN KEY(liked_id) REFERENCES Highschooler (ID)); "}, {"sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "output": "INTERSECT PROJECT state FROM Owners WITH PROJECT state FROM Professionals ", "text": "", "input": "Which states have both owners and professionals living there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "output": "INTERSECT PROJECT state FROM Owners WITH PROJECT state FROM Professionals ", "text": "", "input": "Find the states where both owners and professionals live.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "output": "PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM SELECT WHERE dog_id IN PROJECT dog_id FROM Treatments FROM Dogs ", "text": "", "input": "What is the average age of the dogs who have gone through any treatments?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "output": "PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM SELECT WHERE dog_id IN PROJECT dog_id FROM Treatments FROM Dogs ", "text": "", "input": "Find the average age of the dogs who went through treatments.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "output": "UNION PROJECT professional_id, last_name, cell_number FROM SELECT WHERE state = 'Indiana' FROM Professionals WITH PROJECT T1.professional_id, T1.last_name, T1.cell_number FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY T1.professional_id FROM JOIN AS T1 FROM Professionals WITH AS T2 FROM Treatments ON T1.professional_id = T2.professional_id ", "text": "", "input": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "output": "UNION PROJECT professional_id, last_name, cell_number FROM SELECT WHERE state = 'Indiana' FROM Professionals WITH PROJECT T1.professional_id, T1.last_name, T1.cell_number FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY T1.professional_id FROM JOIN AS T1 FROM Professionals WITH AS T2 FROM Treatments ON T1.professional_id = T2.professional_id ", "text": "", "input": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "output": "PROJECT name FROM SELECT WHERE dog_id NOT IN PROJECT dog_id FROM SELECT WHERE SUM(cost_of_treatment) > 1000 FROM AGGREGATE SUM(cost_of_treatment), COUNT(*) GROUP BY dog_id FROM treatments FROM dogs ", "text": "", "input": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "output": "PROJECT name FROM SELECT WHERE dog_id NOT IN PROJECT dog_id FROM SELECT WHERE SUM(cost_of_treatment) > 1000 FROM AGGREGATE SUM(cost_of_treatment), COUNT(*) GROUP BY dog_id FROM treatments FROM dogs ", "text": "", "input": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "output": "UNION PROJECT first_name FROM Professionals WITH EXCEPT PROJECT first_name FROM Owners WITH PROJECT name FROM Dogs ", "text": "", "input": "Which first names are used for professionals or owners but are not used as dog names?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "output": "UNION PROJECT first_name FROM Professionals WITH EXCEPT PROJECT first_name FROM Owners WITH PROJECT name FROM Dogs ", "text": "", "input": "Find the first names that are used for professionals or owners but are not used as dog names.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "output": "EXCEPT PROJECT professional_id, role_code, email_address FROM Professionals WITH PROJECT T1.professional_id, T1.role_code, T1.email_address FROM JOIN AS T1 FROM Professionals WITH AS T2 FROM Treatments ON T1.professional_id = T2.professional_id ", "text": "", "input": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "output": "EXCEPT PROJECT professional_id, role_code, email_address FROM Professionals WITH PROJECT T1.professional_id, T1.role_code, T1.email_address FROM JOIN AS T1 FROM Professionals WITH AS T2 FROM Treatments ON T1.professional_id = T2.professional_id ", "text": "", "input": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.owner_id, T2.first_name, T2.last_name FROM AGGREGATE COUNT(*) GROUP BY T1.owner_id FROM JOIN AS T1 FROM Dogs WITH AS T2 FROM Owners ON T1.owner_id = T2.owner_id ", "text": "", "input": "Which owner owns the most dogs? List the owner id, first name and last name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.owner_id, T2.first_name, T2.last_name FROM AGGREGATE COUNT(*) GROUP BY T1.owner_id FROM JOIN AS T1 FROM Dogs WITH AS T2 FROM Owners ON T1.owner_id = T2.owner_id ", "text": "", "input": "Return the owner id, first name and last name of the owner who has the most dogs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "output": "PROJECT T1.professional_id, T1.role_code, T1.first_name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.professional_id FROM JOIN AS T1 FROM Professionals WITH AS T2 FROM Treatments ON T1.professional_id = T2.professional_id ", "text": "", "input": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "output": "PROJECT T1.professional_id, T1.role_code, T1.first_name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.professional_id FROM JOIN AS T1 FROM Professionals WITH AS T2 FROM Treatments ON T1.professional_id = T2.professional_id ", "text": "", "input": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.breed_name FROM AGGREGATE COUNT(*) GROUP BY T1.breed_name FROM JOIN AS T1 FROM Breeds WITH AS T2 FROM Dogs ON T1.breed_code = T2.breed_code ", "text": "", "input": "What is the name of the breed with the most dogs?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.breed_name FROM AGGREGATE COUNT(*) GROUP BY T1.breed_name FROM JOIN AS T1 FROM Breeds WITH AS T2 FROM Dogs ON T1.breed_code = T2.breed_code ", "text": "", "input": "Which breed do the most dogs have? Give me the breed name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.owner_id, T1.last_name FROM AGGREGATE COUNT(*) GROUP BY T1.owner_id FROM JOIN AS T1 FROM Owners WITH JOIN AS T2 FROM Dogs WITH AS T3 FROM Treatments ON T2.dog_id = T3.dog_id ON T1.owner_id = T2.owner_id ", "text": "", "input": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.owner_id, T1.last_name FROM AGGREGATE COUNT(*) GROUP BY T1.owner_id FROM JOIN AS T1 FROM Owners WITH JOIN AS T2 FROM Dogs WITH AS T3 FROM Treatments ON T2.dog_id = T3.dog_id ON T1.owner_id = T2.owner_id ", "text": "", "input": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC SUM(cost_of_treatment) FROM PROJECT T1.treatment_type_description FROM AGGREGATE SUM(cost_of_treatment), COUNT(*) GROUP BY T1.treatment_type_code FROM JOIN AS T1 FROM Treatment_types WITH AS T2 FROM Treatments ON T1.treatment_type_code = T2.treatment_type_code ", "text": "", "input": "What is the description of the treatment type that costs the least money in total?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY ASC SUM(cost_of_treatment) FROM PROJECT T1.treatment_type_description FROM AGGREGATE SUM(cost_of_treatment), COUNT(*) GROUP BY T1.treatment_type_code FROM JOIN AS T1 FROM Treatment_types WITH AS T2 FROM Treatments ON T1.treatment_type_code = T2.treatment_type_code ", "text": "", "input": "Give me the description of the treatment type whose total cost is the lowest.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC SUM(T3.cost_of_treatment) FROM PROJECT T1.owner_id, T1.zip_code FROM AGGREGATE SUM(T3.cost_of_treatment), COUNT(*) GROUP BY T1.owner_id FROM JOIN AS T1 FROM Owners WITH JOIN AS T2 FROM Dogs WITH AS T3 FROM Treatments ON T2.dog_id = T3.dog_id ON T1.owner_id = T2.owner_id ", "text": "", "input": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC SUM(T3.cost_of_treatment) FROM PROJECT T1.owner_id, T1.zip_code FROM AGGREGATE SUM(T3.cost_of_treatment), COUNT(*) GROUP BY T1.owner_id FROM JOIN AS T1 FROM Owners WITH JOIN AS T2 FROM Dogs WITH AS T3 FROM Treatments ON T2.dog_id = T3.dog_id ON T1.owner_id = T2.owner_id ", "text": "", "input": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "output": "PROJECT T1.professional_id, T1.cell_number FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.professional_id FROM JOIN AS T1 FROM Professionals WITH AS T2 FROM Treatments ON T1.professional_id = T2.professional_id ", "text": "", "input": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "output": "PROJECT T1.professional_id, T1.cell_number FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.professional_id FROM JOIN AS T1 FROM Professionals WITH AS T2 FROM Treatments ON T1.professional_id = T2.professional_id ", "text": "", "input": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "output": "PROJECT DISTINCT T1.first_name, T1.last_name FROM SELECT WHERE cost_of_treatment < PROJECT AVG(cost_of_treatment) FROM AGGREGATE AVG(cost_of_treatment) FROM Treatments FROM AS T1 FROM Professionals ", "text": "", "input": "What are the first name and last name of the professionals who have done treatment with cost below average?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "output": "PROJECT DISTINCT T1.first_name, T1.last_name FROM SELECT WHERE cost_of_treatment < PROJECT AVG(cost_of_treatment) FROM AGGREGATE AVG(cost_of_treatment) FROM Treatments FROM AS T1 FROM Professionals ", "text": "", "input": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "output": "PROJECT T1.date_of_treatment, T2.first_name FROM JOIN AS T1 FROM Treatments WITH AS T2 FROM Professionals ON T1.professional_id = T2.professional_id ", "text": "", "input": "List the date of each treatment, together with the first name of the professional who operated it.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "output": "PROJECT T1.date_of_treatment, T2.first_name FROM JOIN AS T1 FROM Treatments WITH AS T2 FROM Professionals ON T1.professional_id = T2.professional_id ", "text": "", "input": "What are the date and the operating professional's first name of each treatment?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "output": "PROJECT T1.cost_of_treatment, T2.treatment_type_description FROM JOIN AS T1 FROM Treatments WITH AS T2 FROM treatment_types ON T1.treatment_type_code = T2.treatment_type_code ", "text": "", "input": "List the cost of each treatment and the corresponding treatment type description.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "output": "PROJECT T1.cost_of_treatment, T2.treatment_type_description FROM JOIN AS T1 FROM Treatments WITH AS T2 FROM treatment_types ON T1.treatment_type_code = T2.treatment_type_code ", "text": "", "input": "What are the cost and treatment type description of each treatment?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "output": "PROJECT T1.first_name, T1.last_name, T2.size_code FROM JOIN AS T1 FROM Owners WITH AS T2 FROM Dogs ON T1.owner_id = T2.owner_id ", "text": "", "input": "List each owner's first name, last name, and the size of his for her dog.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "output": "PROJECT T1.first_name, T1.last_name, T2.size_code FROM JOIN AS T1 FROM Owners WITH AS T2 FROM Dogs ON T1.owner_id = T2.owner_id ", "text": "", "input": "What are each owner's first name, last name, and the size of their dog?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "output": "PROJECT T1.first_name, T2.name FROM JOIN AS T1 FROM Owners WITH AS T2 FROM Dogs ON T1.owner_id = T2.owner_id ", "text": "", "input": "List pairs of the owner's first name and the dogs's name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "output": "PROJECT T1.first_name, T2.name FROM JOIN AS T1 FROM Owners WITH AS T2 FROM Dogs ON T1.owner_id = T2.owner_id ", "text": "", "input": "What are each owner's first name and their dogs's name?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "output": "PROJECT T1.name, T2.date_of_treatment FROM SELECT WHERE T1.breed_code = LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT breed_code FROM AGGREGATE COUNT(*) GROUP BY breed_code FROM Dogs FROM JOIN AS T1 FROM Dogs WITH AS T2 FROM Treatments ON T1.dog_id = T2.dog_id ", "text": "", "input": "List the names of the dogs of the rarest breed and the treatment dates of them.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "output": "PROJECT T1.name, T2.date_of_treatment FROM SELECT WHERE T1.breed_code = LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT breed_code FROM AGGREGATE COUNT(*) GROUP BY breed_code FROM Dogs FROM JOIN AS T1 FROM Dogs WITH AS T2 FROM Treatments ON T1.dog_id = T2.dog_id ", "text": "", "input": "Which dogs are of the rarest breed? Show their names and treatment dates.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "output": "PROJECT T1.first_name, T2.name FROM SELECT WHERE T1.state = 'Virginia' FROM JOIN AS T1 FROM Owners WITH AS T2 FROM Dogs ON T1.owner_id = T2.owner_id ", "text": "", "input": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "output": "PROJECT T1.first_name, T2.name FROM SELECT WHERE T1.state = 'Virginia' FROM JOIN AS T1 FROM Owners WITH AS T2 FROM Dogs ON T1.owner_id = T2.owner_id ", "text": "", "input": "Find the first names of owners living in Virginia and the names of dogs they own.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "output": "PROJECT DISTINCT T1.date_arrived, T1.date_departed FROM JOIN AS T1 FROM Dogs WITH AS T2 FROM Treatments ON T1.dog_id = T2.dog_id ", "text": "", "input": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "output": "PROJECT DISTINCT T1.date_arrived, T1.date_departed FROM JOIN AS T1 FROM Dogs WITH AS T2 FROM Treatments ON T1.dog_id = T2.dog_id ", "text": "", "input": "Find the arriving date and the departing date of the dogs that received a treatment.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "output": "PROJECT T1.last_name FROM SELECT WHERE T2.age = PROJECT MAX(age) FROM AGGREGATE MAX(age) FROM Dogs FROM JOIN AS T1 FROM Owners WITH AS T2 FROM Dogs ON T1.owner_id = T2.owner_id ", "text": "", "input": "List the last name of the owner owning the youngest dog.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "output": "PROJECT T1.last_name FROM SELECT WHERE T2.age = PROJECT MAX(age) FROM AGGREGATE MAX(age) FROM Dogs FROM JOIN AS T1 FROM Owners WITH AS T2 FROM Dogs ON T1.owner_id = T2.owner_id ", "text": "", "input": "Who owns the youngest dog? Give me his or her last name.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "output": "PROJECT email_address FROM SELECT WHERE state = 'Hawaii' OR state = 'Wisconsin' FROM Professionals ", "text": "", "input": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "output": "PROJECT email_address FROM SELECT WHERE state = 'Hawaii' OR state = 'Wisconsin' FROM Professionals ", "text": "", "input": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT date_arrived ,  date_departed FROM Dogs", "output": "PROJECT date_arrived, date_departed FROM Dogs ", "text": "", "input": "What are the arriving date and the departing date of all the dogs?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT date_arrived ,  date_departed FROM Dogs", "output": "PROJECT date_arrived, date_departed FROM Dogs ", "text": "", "input": "List the arrival date and the departure date for all the dogs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "output": "PROJECT COUNT(DISTINCT dog_id) FROM AGGREGATE COUNT(DISTINCT dog_id) FROM Treatments ", "text": "", "input": "How many dogs went through any treatments?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT count(DISTINCT dog_id) FROM Treatments", "output": "PROJECT COUNT(DISTINCT dog_id) FROM AGGREGATE COUNT(DISTINCT dog_id) FROM Treatments ", "text": "", "input": "Count the number of dogs that went through a treatment.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "output": "PROJECT COUNT(DISTINCT professional_id) FROM AGGREGATE COUNT(DISTINCT professional_id) FROM Treatments ", "text": "", "input": "How many professionals have performed any treatment to dogs?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "output": "PROJECT COUNT(DISTINCT professional_id) FROM AGGREGATE COUNT(DISTINCT professional_id) FROM Treatments ", "text": "", "input": "Find the number of professionals who have ever treated dogs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "output": "PROJECT role_code, street, city, state FROM SELECT WHERE city LIKE '%West%' FROM professionals ", "text": "", "input": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "output": "PROJECT role_code, street, city, state FROM SELECT WHERE city LIKE '%West%' FROM professionals ", "text": "", "input": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "output": "PROJECT first_name, last_name, email_address FROM SELECT WHERE state LIKE '%North%' FROM Owners ", "text": "", "input": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "output": "PROJECT first_name, last_name, email_address FROM SELECT WHERE state LIKE '%North%' FROM Owners ", "text": "", "input": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE age < PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM Dogs FROM Dogs ", "text": "", "input": "How many dogs have an age below the average?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE age < PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM Dogs FROM Dogs ", "text": "", "input": "Count the number of dogs of an age below the average.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC date_of_treatment FROM PROJECT cost_of_treatment FROM Treatments ", "text": "", "input": "How much does the most recent treatment cost?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC date_of_treatment FROM PROJECT cost_of_treatment FROM Treatments ", "text": "", "input": "Show me the cost of the most recently performed treatment.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE dog_id NOT IN PROJECT dog_id FROM Treatments FROM Dogs ", "text": "", "input": "How many dogs have not gone through any treatment?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE dog_id NOT IN PROJECT dog_id FROM treatments FROM dogs ", "text": "", "input": "Tell me the number of dogs that have not received any treatment .", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE owner_id NOT IN PROJECT owner_id FROM Dogs FROM Owners ", "text": "", "input": "How many owners temporarily do not have any dogs?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE owner_id NOT IN PROJECT owner_id FROM Dogs FROM Owners ", "text": "", "input": "Find the number of owners who do not own any dogs at this moment.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE professional_id NOT IN PROJECT professional_id FROM Treatments FROM Professionals ", "text": "", "input": "How many professionals did not operate any treatment on dogs?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE professional_id NOT IN PROJECT professional_id FROM Treatments FROM Professionals ", "text": "", "input": "Find the number of professionals who have not treated any dogs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "output": "PROJECT name, age, weight FROM SELECT WHERE abandoned_yn = 1 FROM Dogs ", "text": "", "input": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "output": "PROJECT name, age, weight FROM SELECT WHERE abandoned_yn = 1 FROM Dogs ", "text": "", "input": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT avg(age) FROM Dogs", "output": "PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM Dogs ", "text": "", "input": "What is the average age of all the dogs?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT avg(age) FROM Dogs", "output": "PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM Dogs ", "text": "", "input": "Compute the average age of all the dogs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT max(age) FROM Dogs", "output": "PROJECT MAX(age) FROM AGGREGATE MAX(age) FROM Dogs ", "text": "", "input": "What is the age of the oldest dog?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT max(age) FROM Dogs", "output": "PROJECT MAX(age) FROM AGGREGATE MAX(age) FROM Dogs ", "text": "", "input": "Tell me the age of the oldest dog.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT charge_type ,  charge_amount FROM Charges", "output": "PROJECT charge_type, charge_amount FROM Charges ", "text": "", "input": "How much does each charge type costs? List both charge type and amount.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT charge_type ,  charge_amount FROM Charges", "output": "PROJECT charge_type, charge_amount FROM Charges ", "text": "", "input": "List each charge type and its amount.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT max(charge_amount) FROM Charges", "output": "PROJECT MAX(charge_amount) FROM AGGREGATE MAX(charge_amount) FROM Charges ", "text": "", "input": "How much does the most expensive charge type costs?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT max(charge_amount) FROM Charges", "output": "PROJECT MAX(charge_amount) FROM AGGREGATE MAX(charge_amount) FROM Charges ", "text": "", "input": "What is the charge amount of the most expensive charge type?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "output": "PROJECT email_address, cell_number, home_phone FROM professionals ", "text": "", "input": "List the email, cell phone and home phone of all the professionals.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "output": "PROJECT email_address, cell_number, home_phone FROM professionals ", "text": "", "input": "What are the email, cell phone and home phone of each professional?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "output": "PROJECT DISTINCT breed_code, size_code FROM dogs ", "text": "", "input": "What are all the possible breed type and size type combinations?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "output": "PROJECT DISTINCT breed_code, size_code FROM dogs ", "text": "", "input": "Find the distinct breed type and size type combinations for dogs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "output": "PROJECT DISTINCT T1.first_name, T3.treatment_type_description FROM JOIN AS T1 FROM professionals WITH JOIN AS T2 FROM Treatments WITH AS T3 FROM Treatment_types ON T2.treatment_type_code = T3.treatment_type_code ON T1.professional_id = T2.professional_id ", "text": "", "input": "List the first name of all the professionals along with the description of the treatment they have done.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "output": "PROJECT DISTINCT T1.first_name, T3.treatment_type_description FROM JOIN AS T1 FROM professionals WITH JOIN AS T2 FROM Treatments WITH AS T3 FROM Treatment_types ON T2.treatment_type_code = T3.treatment_type_code ON T1.professional_id = T2.professional_id ", "text": "", "input": "What are each professional's first name and description of the treatment they have performed?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Breeds ( breed_code text, breed_name text, PRIMARY KEY(breed_code)); CREATE TABLE Charges ( charge_id number, charge_type text, charge_amount number, PRIMARY KEY(charge_id)); CREATE TABLE Sizes ( size_code text, size_description text, PRIMARY KEY(size_code)); CREATE TABLE Treatment_Types ( treatment_type_code text, treatment_type_description text, PRIMARY KEY(treatment_type_code)); CREATE TABLE Owners ( owner_id number, first_name text, last_name text, street text, city text, state text, zip_code text, email_address text, home_phone text, cell_number text, PRIMARY KEY(owner_id)); CREATE TABLE Dogs ( dog_id number, owner_id number, abandoned_yn text, breed_code text, size_code text, name text, age text, date_of_birth time, gender text, weight text, date_arrived time, date_adopted time, date_departed time, PRIMARY KEY(dog_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(owner_id) REFERENCES Owners (owner_id), FOREIGN KEY(size_code) REFERENCES Sizes (size_code), FOREIGN KEY(breed_code) REFERENCES Breeds (breed_code)); CREATE TABLE Professionals ( professional_id number, role_code text, first_name text, street text, city text, state text, zip_code text, last_name text, email_address text, home_phone text, cell_number text, PRIMARY KEY(professional_id)); CREATE TABLE Treatments ( treatment_id number, dog_id number, professional_id number, treatment_type_code text, date_of_treatment time, cost_of_treatment number, PRIMARY KEY(treatment_id), FOREIGN KEY(dog_id) REFERENCES Dogs (dog_id), FOREIGN KEY(professional_id) REFERENCES Professionals (professional_id), FOREIGN KEY(treatment_type_code) REFERENCES Treatment_Types (treatment_type_code)); "}, {"sql": "SELECT count(*) FROM singer", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM singer ", "text": "", "input": "How many singers are there?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT count(*) FROM singer", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM singer ", "text": "", "input": "What is the count of singers?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "output": "ORDER BY ASC Net_Worth_Millions FROM PROJECT Name FROM singer ", "text": "", "input": "List the name of singers in ascending order of net worth.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC", "output": "ORDER BY ASC Net_Worth_Millions FROM PROJECT Name FROM singer ", "text": "", "input": "What are the names of singers ordered by ascending net worth?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Birth_Year ,  Citizenship FROM singer", "output": "PROJECT Birth_Year, Citizenship FROM singer ", "text": "", "input": "What are the birth year and citizenship of singers?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Birth_Year ,  Citizenship FROM singer", "output": "PROJECT Birth_Year, Citizenship FROM singer ", "text": "", "input": "What are the birth years and citizenships of the singers?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "output": "PROJECT Name FROM SELECT WHERE Citizenship <> \"France\" FROM singer ", "text": "", "input": "List the name of singers whose citizenship is not \"France\".", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"", "output": "PROJECT Name FROM SELECT WHERE Citizenship <> \"France\" FROM singer ", "text": "", "input": "What are the names of the singers who are not French citizens?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "output": "PROJECT Name FROM SELECT WHERE Birth_Year = 1948 OR Birth_Year = 1949 FROM singer ", "text": "", "input": "Show the name of singers whose birth year is either 1948 or 1949?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949", "output": "PROJECT Name FROM SELECT WHERE Birth_Year = 1948 OR Birth_Year = 1949 FROM singer ", "text": "", "input": "What are the names of the singers whose birth years are either 1948 or 1949?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC Net_Worth_Millions FROM PROJECT Name FROM singer ", "text": "", "input": "What is the name of the singer with the largest net worth?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC Net_Worth_Millions FROM PROJECT Name FROM singer ", "text": "", "input": "What is the name of the singer who is worth the most?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "output": "PROJECT Citizenship, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Citizenship FROM singer ", "text": "", "input": "Show different citizenship of singers and the number of singers of each citizenship.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship", "output": "PROJECT Citizenship, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Citizenship FROM singer ", "text": "", "input": "For each citizenship, how many singers are from that country?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Citizenship FROM AGGREGATE COUNT(*) GROUP BY Citizenship FROM singer ", "text": "", "input": "Please show the most common citizenship of singers.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "select citizenship from singer group by citizenship order by count(*) desc limit 1", "output": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT citizenship FROM AGGREGATE COUNT(*) GROUP BY citizenship FROM singer ", "text": "", "input": "What is the most common singer citizenship ?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "output": "PROJECT Citizenship, MAX(Net_Worth_Millions) FROM AGGREGATE MAX(Net_Worth_Millions), COUNT(*) GROUP BY Citizenship FROM singer ", "text": "", "input": "Show different citizenships and the maximum net worth of singers of each citizenship.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship", "output": "PROJECT Citizenship, MAX(Net_Worth_Millions) FROM AGGREGATE MAX(Net_Worth_Millions), COUNT(*) GROUP BY Citizenship FROM singer ", "text": "", "input": "For each citizenship, what is the maximum net worth?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "output": "PROJECT T2.Title, T1.Name FROM JOIN AS T1 FROM singer WITH AS T2 FROM song ON T1.Singer_ID = T2.Singer_ID ", "text": "", "input": "Show titles of songs and names of singers.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID", "output": "PROJECT T2.Title, T1.Name FROM JOIN AS T1 FROM singer WITH AS T2 FROM song ON T1.Singer_ID = T2.Singer_ID ", "text": "", "input": "What are the song titles and singer names?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "output": "PROJECT DISTINCT T1.Name FROM SELECT WHERE T2.Sales > 300000 FROM JOIN AS T1 FROM singer WITH AS T2 FROM song ON T1.Singer_ID = T2.Singer_ID ", "text": "", "input": "Show distinct names of singers that have songs with sales more than 300000.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000", "output": "PROJECT DISTINCT T1.Name FROM SELECT WHERE T2.Sales > 300000 FROM JOIN AS T1 FROM singer WITH AS T2 FROM song ON T1.Singer_ID = T2.Singer_ID ", "text": "", "input": "what are the different names of the singers that have sales more than 300000?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "output": "PROJECT T1.Name FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T1.Name FROM JOIN AS T1 FROM singer WITH AS T2 FROM song ON T1.Singer_ID = T2.Singer_ID ", "text": "", "input": "Show the names of singers that have more than one song.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "output": "PROJECT T1.Name FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T1.Name FROM JOIN AS T1 FROM singer WITH AS T2 FROM song ON T1.Singer_ID = T2.Singer_ID ", "text": "", "input": "What are the names of the singers that have more than one songs?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "output": "PROJECT T1.Name, SUM(T2.Sales) FROM AGGREGATE SUM(T2.Sales), COUNT(*) GROUP BY T1.Name FROM JOIN AS T1 FROM singer WITH AS T2 FROM song ON T1.Singer_ID = T2.Singer_ID ", "text": "", "input": "Show the names of singers and the total sales of their songs.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name", "output": "PROJECT T1.Name, SUM(T2.Sales) FROM AGGREGATE SUM(T2.Sales), COUNT(*) GROUP BY T1.Name FROM JOIN AS T1 FROM singer WITH AS T2 FROM song ON T1.Singer_ID = T2.Singer_ID ", "text": "", "input": "For each singer name, what is the total sales for their songs?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "output": "PROJECT Name FROM SELECT WHERE Singer_ID NOT IN PROJECT Singer_ID FROM song FROM singer ", "text": "", "input": "List the name of singers that do not have any song.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)", "output": "PROJECT Name FROM SELECT WHERE Singer_ID NOT IN PROJECT Singer_ID FROM song FROM singer ", "text": "", "input": "What is the sname of every sing that does not have any song?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "output": "INTERSECT PROJECT Citizenship FROM SELECT WHERE Birth_Year < 1945 FROM singer WITH PROJECT Citizenship FROM SELECT WHERE Birth_Year > 1955 FROM singer ", "text": "", "input": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955", "output": "INTERSECT PROJECT Citizenship FROM SELECT WHERE Birth_Year < 1945 FROM singer WITH PROJECT Citizenship FROM SELECT WHERE Birth_Year > 1955 FROM singer ", "text": "", "input": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE singer ( Singer_ID number, Name text, Birth_Year number, Net_Worth_Millions number, Citizenship text, PRIMARY KEY(Singer_ID)); CREATE TABLE song ( Song_ID number, Title text, Singer_ID number, Sales number, Highest_Position number, PRIMARY KEY(Song_ID), FOREIGN KEY(Singer_ID) REFERENCES singer (Singer_ID)); "}, {"sql": "SELECT count(*) FROM Other_Available_Features", "output": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Other_Available_Features ", "text": "", "input": "How many available features are there in total?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Feature_Types ( feature_type_code text, feature_type_name text, PRIMARY KEY(feature_type_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Other_Available_Features ( feature_id number, feature_type_code text, feature_name text, feature_description text, PRIMARY KEY(feature_id), FOREIGN KEY(feature_type_code) REFERENCES Ref_Feature_Types (feature_type_code)); CREATE TABLE Properties ( property_id number, property_type_code text, date_on_market time, date_sold time, property_name text, property_address text, room_count number, vendor_requested_price number, buyer_offered_price number, agreed_selling_price number, apt_feature_1 text, apt_feature_2 text, apt_feature_3 text, fld_feature_1 text, fld_feature_2 text, fld_feature_3 text, hse_feature_1 text, hse_feature_2 text, hse_feature_3 text, oth_feature_1 text, oth_feature_2 text, oth_feature_3 text, shp_feature_1 text, shp_feature_2 text, shp_feature_3 text, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code)); CREATE TABLE Other_Property_Features ( property_id number, feature_id number, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Other_Available_Features (feature_id)); "}, {"sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "output": "PROJECT T2.feature_type_name FROM SELECT WHERE T1.feature_name = \"AirCon\" FROM JOIN AS T1 FROM Other_Available_Features WITH AS T2 FROM Ref_Feature_Types ON T1.feature_type_code = T2.feature_type_code ", "text": "", "input": "What is the feature type name of feature AirCon?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Feature_Types ( feature_type_code text, feature_type_name text, PRIMARY KEY(feature_type_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Other_Available_Features ( feature_id number, feature_type_code text, feature_name text, feature_description text, PRIMARY KEY(feature_id), FOREIGN KEY(feature_type_code) REFERENCES Ref_Feature_Types (feature_type_code)); CREATE TABLE Properties ( property_id number, property_type_code text, date_on_market time, date_sold time, property_name text, property_address text, room_count number, vendor_requested_price number, buyer_offered_price number, agreed_selling_price number, apt_feature_1 text, apt_feature_2 text, apt_feature_3 text, fld_feature_1 text, fld_feature_2 text, fld_feature_3 text, hse_feature_1 text, hse_feature_2 text, hse_feature_3 text, oth_feature_1 text, oth_feature_2 text, oth_feature_3 text, shp_feature_1 text, shp_feature_2 text, shp_feature_3 text, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code)); CREATE TABLE Other_Property_Features ( property_id number, feature_id number, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Other_Available_Features (feature_id)); "}, {"sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "output": "PROJECT T2.property_type_description FROM AGGREGATE COUNT(*) GROUP BY T1.property_type_code FROM JOIN AS T1 FROM Properties WITH AS T2 FROM Ref_Property_Types ON T1.property_type_code = T2.property_type_code ", "text": "", "input": "Show the property type descriptions of properties belonging to that code.", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Feature_Types ( feature_type_code text, feature_type_name text, PRIMARY KEY(feature_type_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Other_Available_Features ( feature_id number, feature_type_code text, feature_name text, feature_description text, PRIMARY KEY(feature_id), FOREIGN KEY(feature_type_code) REFERENCES Ref_Feature_Types (feature_type_code)); CREATE TABLE Properties ( property_id number, property_type_code text, date_on_market time, date_sold time, property_name text, property_address text, room_count number, vendor_requested_price number, buyer_offered_price number, agreed_selling_price number, apt_feature_1 text, apt_feature_2 text, apt_feature_3 text, fld_feature_1 text, fld_feature_2 text, fld_feature_3 text, hse_feature_1 text, hse_feature_2 text, hse_feature_3 text, oth_feature_1 text, oth_feature_2 text, oth_feature_3 text, shp_feature_1 text, shp_feature_2 text, shp_feature_3 text, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code)); CREATE TABLE Other_Property_Features ( property_id number, feature_id number, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Other_Available_Features (feature_id)); "}, {"sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "output": "UNION PROJECT property_name FROM SELECT WHERE property_type_code = \"House\" FROM Properties WITH PROJECT property_name FROM SELECT WHERE property_type_code = \"Apartment\" AND room_count > 1 FROM Properties ", "text": "", "input": "What are the names of properties that are either houses or apartments with more than 1 room?", "instruction": "You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. The ordering format or precedence of the SQL language tokens are as follows: LIMIT -> ORDER BY -> UNION/INTERSECT/EXCEPT -> PROJECT/PROJECT DISTINCT -> WHERE (HAVING) -> AGGREGATE/GROUP BY -> WHERE (WHERE) -> JOIN -> AS -> table -> subquery. This means that if there is a LIMIT clause in the SQL query, the entire cluase will be placed at the beginning in the TSQL output. If there is an PROJECT clause, it will be placed after the LIMIT or ORDER BY clause (assuming either one of them appear in the SQL query, if not PROJECT clause will be at the beginning), and so on. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Feature_Types ( feature_type_code text, feature_type_name text, PRIMARY KEY(feature_type_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Other_Available_Features ( feature_id number, feature_type_code text, feature_name text, feature_description text, PRIMARY KEY(feature_id), FOREIGN KEY(feature_type_code) REFERENCES Ref_Feature_Types (feature_type_code)); CREATE TABLE Properties ( property_id number, property_type_code text, date_on_market time, date_sold time, property_name text, property_address text, room_count number, vendor_requested_price number, buyer_offered_price number, agreed_selling_price number, apt_feature_1 text, apt_feature_2 text, apt_feature_3 text, fld_feature_1 text, fld_feature_2 text, fld_feature_3 text, hse_feature_1 text, hse_feature_2 text, hse_feature_3 text, oth_feature_1 text, oth_feature_2 text, oth_feature_3 text, shp_feature_1 text, shp_feature_2 text, shp_feature_3 text, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code)); CREATE TABLE Other_Property_Features ( property_id number, feature_id number, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Other_Available_Features (feature_id)); "}]