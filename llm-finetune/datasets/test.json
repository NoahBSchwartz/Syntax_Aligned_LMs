[
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: How many clubs are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM club",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Count the number of clubs.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM club",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: List the name of clubs in ascending alphabetical order.\n### Response (TSQL):",
    "sql": "SELECT Name FROM club ORDER BY Name ASC",
    "dsql": "ORDER BY ASC Name FROM PROJECT Name FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What are the names of clubs, ordered alphabetically?\n### Response (TSQL):",
    "sql": "SELECT Name FROM club ORDER BY Name ASC",
    "dsql": "ORDER BY ASC Name FROM PROJECT Name FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What are the managers and captains of clubs?\n### Response (TSQL):",
    "sql": "SELECT Manager ,  Captain FROM club",
    "dsql": "PROJECT Manager, Captain FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Return the managers and captains of all clubs.\n### Response (TSQL):",
    "sql": "SELECT Manager ,  Captain FROM club",
    "dsql": "PROJECT Manager, Captain FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: List the name of clubs whose manufacturer is not \"Nike\"\n### Response (TSQL):",
    "sql": "SELECT Name FROM club WHERE Manufacturer != \"Nike\"",
    "dsql": "PROJECT Name FROM SELECT WHERE Manufacturer <> \"Nike\" FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What are the names of clubs who do not have the manufacturer Nike?\n### Response (TSQL):",
    "sql": "SELECT Name FROM club WHERE Manufacturer != \"Nike\"",
    "dsql": "PROJECT Name FROM SELECT WHERE Manufacturer <> \"Nike\" FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What are the names of players in ascending order of wins count?\n### Response (TSQL):",
    "sql": "SELECT Name FROM player ORDER BY Wins_count ASC",
    "dsql": "ORDER BY ASC Wins_count FROM PROJECT Name FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Return the names of players in order of count of wins, ascending.\n### Response (TSQL):",
    "sql": "SELECT Name FROM player ORDER BY Wins_count ASC",
    "dsql": "ORDER BY ASC Wins_count FROM PROJECT Name FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What is the name of the player with the highest earnings?\n### Response (TSQL):",
    "sql": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC Earnings FROM PROJECT Name FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Return the name of the player who earns the most money.\n### Response (TSQL):",
    "sql": "SELECT Name FROM player ORDER BY Earnings DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC Earnings FROM PROJECT Name FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What are the distinct countries of players with earnings higher than 1200000?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000",
    "dsql": "PROJECT DISTINCT Country FROM SELECT WHERE Earnings > 1200000 FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: From which countries are players who make more than 1200000 from?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT Country FROM player WHERE Earnings  >  1200000",
    "dsql": "PROJECT DISTINCT Country FROM SELECT WHERE Earnings > 1200000 FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What is the country of the player with the highest earnings among players that have more than 2 win counts?\n### Response (TSQL):",
    "sql": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC Earnings FROM PROJECT Country FROM SELECT WHERE Wins_count > 2 FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Of players who have more than 2 wins, what is the country of the player who makes the most?\n### Response (TSQL):",
    "sql": "SELECT Country FROM player WHERE Wins_count  >  2 ORDER BY Earnings DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC Earnings FROM PROJECT Country FROM SELECT WHERE Wins_count > 2 FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show names of players and names of clubs they are in.\n### Response (TSQL):",
    "sql": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
    "dsql": "PROJECT T2.Name, T1.Name FROM JOIN AS T1 FROM club WITH AS T2 FROM player ON T1.Club_ID = T2.Club_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What are the names of players and the corresponding clubs that they are in?\n### Response (TSQL):",
    "sql": "SELECT T2.Name ,  T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID",
    "dsql": "PROJECT T2.Name, T1.Name FROM JOIN AS T1 FROM club WITH AS T2 FROM player ON T1.Club_ID = T2.Club_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show names of clubs that have players with more than 2 win counts.\n### Response (TSQL):",
    "sql": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2",
    "dsql": "PROJECT T1.Name FROM SELECT WHERE T2.Wins_count > 2 FROM JOIN AS T1 FROM club WITH AS T2 FROM player ON T1.Club_ID = T2.Club_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What are the names of clubs that have players who have won more than twice?\n### Response (TSQL):",
    "sql": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Wins_count  >  2",
    "dsql": "PROJECT T1.Name FROM SELECT WHERE T2.Wins_count > 2 FROM JOIN AS T1 FROM club WITH AS T2 FROM player ON T1.Club_ID = T2.Club_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show names of players from the club with manager \"Sam Allardyce\".\n### Response (TSQL):",
    "sql": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\"",
    "dsql": "PROJECT T2.Name FROM SELECT WHERE T1.Manager = \"Sam Allardyce\" FROM JOIN AS T1 FROM club WITH AS T2 FROM player ON T1.Club_ID = T2.Club_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What are the names of players from the club managed by Sam Allardyce?\n### Response (TSQL):",
    "sql": "SELECT T2.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.Manager  =  \"Sam Allardyce\"",
    "dsql": "PROJECT T2.Name FROM SELECT WHERE T1.Manager = \"Sam Allardyce\" FROM JOIN AS T1 FROM club WITH AS T2 FROM player ON T1.Club_ID = T2.Club_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show names of clubs in descending order of average earnings of players belonging.\n### Response (TSQL):",
    "sql": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC",
    "dsql": "ORDER BY DESC AVG(T2.Earnings) FROM PROJECT T1.Name FROM AGGREGATE AVG(T2.Earnings), COUNT(*) GROUP BY T1.Club_ID FROM JOIN AS T1 FROM club WITH AS T2 FROM player ON T1.Club_ID = T2.Club_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What are the names of clubs, ordered descending by the average earnings of players within each?\n### Response (TSQL):",
    "sql": "SELECT T1.Name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID GROUP BY T1.Club_ID ORDER BY avg(T2.Earnings) DESC",
    "dsql": "ORDER BY DESC AVG(T2.Earnings) FROM PROJECT T1.Name FROM AGGREGATE AVG(T2.Earnings), COUNT(*) GROUP BY T1.Club_ID FROM JOIN AS T1 FROM club WITH AS T2 FROM player ON T1.Club_ID = T2.Club_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show different manufacturers and the number of clubs they are associated with.\n### Response (TSQL):",
    "sql": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer",
    "dsql": "PROJECT Manufacturer, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Manufacturer FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: How many clubs use each manufacturer?\n### Response (TSQL):",
    "sql": "SELECT Manufacturer ,  COUNT(*) FROM club GROUP BY Manufacturer",
    "dsql": "PROJECT Manufacturer, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Manufacturer FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Please show the most common manufacturer of clubs.\n### Response (TSQL):",
    "sql": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Manufacturer FROM AGGREGATE COUNT(*) GROUP BY Manufacturer FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Which manufacturer is most common among clubs?\n### Response (TSQL):",
    "sql": "SELECT Manufacturer FROM club GROUP BY Manufacturer ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Manufacturer FROM AGGREGATE COUNT(*) GROUP BY Manufacturer FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: List the manufacturers that are associated with more than one club.\n### Response (TSQL):",
    "sql": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
    "dsql": "PROJECT Manufacturer FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY Manufacturer FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Which manufacturers work for more than 1 club?\n### Response (TSQL):",
    "sql": "SELECT Manufacturer FROM club GROUP BY Manufacturer HAVING COUNT(*)  >  1",
    "dsql": "PROJECT Manufacturer FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY Manufacturer FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: List the country that have more than one player.\n### Response (TSQL):",
    "sql": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1",
    "dsql": "PROJECT Country FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY Country FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Which countries have produced more than one player?\n### Response (TSQL):",
    "sql": "SELECT Country FROM player GROUP BY Country HAVING COUNT(*)  >  1",
    "dsql": "PROJECT Country FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY Country FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: List the name of clubs that do not have players.\n### Response (TSQL):",
    "sql": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
    "dsql": "PROJECT Name FROM SELECT WHERE Club_ID NOT IN PROJECT Club_ID FROM player FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What are the names of clubs that do not have any players?\n### Response (TSQL):",
    "sql": "SELECT Name FROM club WHERE Club_ID NOT IN (SELECT Club_ID FROM player)",
    "dsql": "PROJECT Name FROM SELECT WHERE Club_ID NOT IN PROJECT Club_ID FROM player FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show the country of players with earnings more than 1400000 and players with earnings less than 1100000.\n### Response (TSQL):",
    "sql": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000",
    "dsql": "INTERSECT PROJECT Country FROM SELECT WHERE Earnings > 1400000 FROM player WITH PROJECT Country FROM SELECT WHERE Earnings < 1100000 FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Which country has produced both players with earnings over 1400000 and players with earnings below 1100000?\n### Response (TSQL):",
    "sql": "SELECT Country FROM player WHERE Earnings  >  1400000 INTERSECT SELECT Country FROM player WHERE Earnings  <  1100000",
    "dsql": "INTERSECT PROJECT Country FROM SELECT WHERE Earnings > 1400000 FROM player WITH PROJECT Country FROM SELECT WHERE Earnings < 1100000 FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What is the number of distinct countries of all players?\n### Response (TSQL):",
    "sql": "SELECT COUNT (DISTINCT Country) FROM player",
    "dsql": "PROJECT COUNT(DISTINCT Country) FROM AGGREGATE COUNT(DISTINCT Country) FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: How many different countries are players from?\n### Response (TSQL):",
    "sql": "SELECT COUNT (DISTINCT Country) FROM player",
    "dsql": "PROJECT COUNT(DISTINCT Country) FROM AGGREGATE COUNT(DISTINCT Country) FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show the earnings of players from country \"Australia\" or \"Zimbabwe\".\n### Response (TSQL):",
    "sql": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\"",
    "dsql": "PROJECT Earnings FROM SELECT WHERE Country = \"Australia\" OR Country = \"Zimbabwe\" FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE club ( Club_ID number, Name text, Manager text, Captain text, Manufacturer text, Sponsor text, PRIMARY KEY(Club_ID)); CREATE TABLE player ( Player_ID number, Name text, Country text, Earnings number, Events_number number, Wins_count number, Club_ID number, PRIMARY KEY(Player_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What are the earnings of players from either of the countries of Australia or Zimbabwe?\n### Response (TSQL):",
    "sql": "SELECT Earnings FROM player WHERE Country  =  \"Australia\" OR Country  =  \"Zimbabwe\"",
    "dsql": "PROJECT Earnings FROM SELECT WHERE Country = \"Australia\" OR Country = \"Zimbabwe\" FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: List the id, first name and last name of the customers who both have placed more than 2 orders and have bought at least 3 items.\n### Response (TSQL):",
    "sql": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
    "dsql": "INTERSECT PROJECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY T1.customer_id FROM JOIN AS T1 FROM Customers WITH AS T2 FROM Orders ON T1.customer_id = T2.customer_id WITH PROJECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM SELECT WHERE COUNT(*) >= 3 FROM AGGREGATE COUNT(*) GROUP BY T1.customer_id FROM JOIN AS T1 FROM Customers WITH JOIN AS T2 FROM Orders WITH AS T3 FROM Order_items ON T2.order_id = T3.order_id ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the ids, first and last names of the customers who have ordered more than twice and have bought at least 3 items?\n### Response (TSQL):",
    "sql": "SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2 INTERSECT SELECT T1.customer_id ,  T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING count(*)  >= 3",
    "dsql": "INTERSECT PROJECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY T1.customer_id FROM JOIN AS T1 FROM Customers WITH AS T2 FROM Orders ON T1.customer_id = T2.customer_id WITH PROJECT T1.customer_id, T1.customer_first_name, T1.customer_last_name FROM SELECT WHERE COUNT(*) >= 3 FROM AGGREGATE COUNT(*) GROUP BY T1.customer_id FROM JOIN AS T1 FROM Customers WITH JOIN AS T2 FROM Orders WITH AS T3 FROM Order_items ON T2.order_id = T3.order_id ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: For the orders with any produts, how many products does each orders contain ? List the order id, status and the number.\n### Response (TSQL):",
    "sql": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id",
    "dsql": "PROJECT T1.order_id, T1.order_status_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.order_id FROM JOIN AS T1 FROM Orders WITH AS T2 FROM Order_items ON T1.order_id = T2.order_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: For every order, how many products does it contain, and what are the orders' statuses and ids?\n### Response (TSQL):",
    "sql": "SELECT T1.order_id ,  T1.order_status_code ,  count(*) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id",
    "dsql": "PROJECT T1.order_id, T1.order_status_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.order_id FROM JOIN AS T1 FROM Orders WITH AS T2 FROM Order_items ON T1.order_id = T2.order_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: List the dates of the orders which were placed at the earliest time or have more than 1 items.\n### Response (TSQL):",
    "sql": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1",
    "dsql": "UNION PROJECT MIN(date_order_placed) FROM AGGREGATE MIN(date_order_placed) FROM Orders WITH PROJECT T1.date_order_placed FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T1.order_id FROM JOIN AS T1 FROM Orders WITH AS T2 FROM Order_items ON T1.order_id = T2.order_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the dates of the earliest order and the dates of all orders with more than 1 item?\n### Response (TSQL):",
    "sql": "SELECT min(date_order_placed) FROM Orders UNION SELECT T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  1",
    "dsql": "UNION PROJECT MIN(date_order_placed) FROM AGGREGATE MIN(date_order_placed) FROM Orders WITH PROJECT T1.date_order_placed FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T1.order_id FROM JOIN AS T1 FROM Orders WITH AS T2 FROM Order_items ON T1.order_id = T2.order_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: Which customers did not make any orders? List the first name, middle initial and last name.\n### Response (TSQL):",
    "sql": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
    "dsql": "EXCEPT PROJECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WITH PROJECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name FROM JOIN AS T1 FROM Customers WITH AS T2 FROM Orders ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: WHat are the first and last names, and middle initials of all customers who did not make any orders?\n### Response (TSQL):",
    "sql": "SELECT customer_first_name ,  customer_middle_initial ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id",
    "dsql": "EXCEPT PROJECT customer_first_name, customer_middle_initial, customer_last_name FROM Customers WITH PROJECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name FROM JOIN AS T1 FROM Customers WITH AS T2 FROM Orders ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the id, name, price and color of the products which have not been ordered for at least twice?\n### Response (TSQL):",
    "sql": "SELECT product_id ,  product_name ,  product_price ,  product_color FROM Products EXCEPT SELECT T1.product_id ,  T1.product_name ,  T1.product_price ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.product_id HAVING count(*)  >=  2",
    "dsql": "EXCEPT PROJECT product_id, product_name, product_price, product_color FROM Products WITH PROJECT T1.product_id, T1.product_name, T1.product_price, T1.product_color FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.product_id FROM JOIN AS T1 FROM Products WITH JOIN AS T2 FROM Order_items WITH AS T3 FROM Orders ON T2.order_id = T3.order_id ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the ids , names , prices , and colors of all products that have been listed in less than two orders ?\n### Response (TSQL):",
    "sql": "select t1.product_id ,  t1.product_name ,  t1.product_price ,  t1.product_color from products as t1 join order_items as t2 on t1.product_id  =  t2.product_id join orders as t3 on t2.order_id  =  t3.order_id group by t1.product_id having count(*) < 2",
    "dsql": "PROJECT t1.product_id, t1.product_name, t1.product_price, t1.product_color FROM SELECT WHERE COUNT(*) < 2 FROM AGGREGATE COUNT(*) GROUP BY t1.product_id FROM JOIN AS t1 FROM products WITH JOIN AS t2 FROM order_items WITH AS t3 FROM orders ON t2.order_id = t3.order_id ON t1.product_id = t2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: Which orders have at least 2 products on it? List the order id and date.\n### Response (TSQL):",
    "sql": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2",
    "dsql": "PROJECT T1.order_id, T1.date_order_placed FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.order_id FROM JOIN AS T1 FROM Orders WITH AS T2 FROM Order_items ON T1.order_id = T2.order_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the ids and dates of the orders with at least two products?\n### Response (TSQL):",
    "sql": "SELECT T1.order_id ,  T1.date_order_placed FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >=  2",
    "dsql": "PROJECT T1.order_id, T1.date_order_placed FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.order_id FROM JOIN AS T1 FROM Orders WITH AS T2 FROM Order_items ON T1.order_id = T2.order_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: Which product are listed in orders most frequently? List the id, product name and price.\n### Response (TSQL):",
    "sql": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.product_id, T1.product_name, T1.product_price FROM AGGREGATE COUNT(*) GROUP BY T1.product_id FROM JOIN AS T1 FROM Products WITH AS T2 FROM Order_items ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the ids, names, and prices of all products that are ordered most frequently?\n### Response (TSQL):",
    "sql": "SELECT T1.product_id ,  T1.product_name ,  T1.product_price FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.product_id, T1.product_name, T1.product_price FROM AGGREGATE COUNT(*) GROUP BY T1.product_id FROM JOIN AS T1 FROM Products WITH AS T2 FROM Order_items ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: Which order have the least sum of the product prices. List the order id and sum.\n### Response (TSQL):",
    "sql": "SELECT T1.order_id ,  sum(T2.product_price) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.order_id ORDER BY sum(T2.product_price) ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC SUM(T2.product_price) FROM PROJECT T1.order_id, SUM(T2.product_price) FROM AGGREGATE SUM(T2.product_price), COUNT(*) GROUP BY T1.order_id FROM JOIN AS T1 FROM Order_items WITH AS T2 FROM Products ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What is the order that total cost the least , and how much is the total cost ?\n### Response (TSQL):",
    "sql": "select t1.order_id ,  sum(t2.product_price) from order_items as t1 join products as t2 on t1.product_id  =  t2.product_id group by t1.order_id order by sum(t2.product_price) asc limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC SUM(t2.product_price) FROM PROJECT t1.order_id, SUM(t2.product_price) FROM AGGREGATE SUM(t2.product_price), COUNT(*) GROUP BY t1.order_id FROM JOIN AS t1 FROM order_items WITH AS t2 FROM products ON t1.product_id = t2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What is the most popular payment method?\n### Response (TSQL):",
    "sql": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Payment_method_code FROM AGGREGATE COUNT(*) GROUP BY Payment_method_code FROM Customer_Payment_Methods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What is the payment method that most customers use?\n### Response (TSQL):",
    "sql": "SELECT Payment_method_code FROM Customer_Payment_Methods GROUP BY Payment_method_code ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Payment_method_code FROM AGGREGATE COUNT(*) GROUP BY Payment_method_code FROM Customer_Payment_Methods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many number of products does each gender of customers buy? List the gender and the number\n### Response (TSQL):",
    "sql": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code",
    "dsql": "PROJECT T1.gender_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.gender_code FROM JOIN AS T1 FROM Customers WITH JOIN AS T2 FROM Orders WITH AS T3 FROM Order_items ON T2.order_id = T3.order_id ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many products does each gender buy?\n### Response (TSQL):",
    "sql": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.gender_code",
    "dsql": "PROJECT T1.gender_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.gender_code FROM JOIN AS T1 FROM Customers WITH JOIN AS T2 FROM Orders WITH AS T3 FROM Order_items ON T2.order_id = T3.order_id ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many orders has each gender of customers placed?\n### Response (TSQL):",
    "sql": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code",
    "dsql": "PROJECT T1.gender_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.gender_code FROM JOIN AS T1 FROM Customers WITH AS T2 FROM Orders ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many orders has each gender placed?\n### Response (TSQL):",
    "sql": "SELECT T1.gender_code ,  count(*) FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.gender_code",
    "dsql": "PROJECT T1.gender_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.gender_code FROM JOIN AS T1 FROM Customers WITH AS T2 FROM Orders ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: List the customers' first name, middle initial, last name and payment methods.\n### Response (TSQL):",
    "sql": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id",
    "dsql": "PROJECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name, T2.Payment_method_code FROM JOIN AS T1 FROM Customers WITH AS T2 FROM Customer_Payment_Methods ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the first names, middle initials, last names, and payment methods of all customers?\n### Response (TSQL):",
    "sql": "SELECT T1.customer_first_name ,  T1.customer_middle_initial ,  T1.customer_last_name ,  T2.Payment_method_code FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id",
    "dsql": "PROJECT T1.customer_first_name, T1.customer_middle_initial, T1.customer_last_name, T2.Payment_method_code FROM JOIN AS T1 FROM Customers WITH AS T2 FROM Customer_Payment_Methods ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: List the invoices' status, date and the date of shipment.\n### Response (TSQL):",
    "sql": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number",
    "dsql": "PROJECT T1.invoice_status_code, T1.invoice_date, T2.shipment_date FROM JOIN AS T1 FROM Invoices WITH AS T2 FROM Shipments ON T1.invoice_number = T2.invoice_number "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the statuses, dates, and shipment dates for all invoices?\n### Response (TSQL):",
    "sql": "SELECT T1.invoice_status_code ,  T1.invoice_date ,  T2.shipment_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number",
    "dsql": "PROJECT T1.invoice_status_code, T1.invoice_date, T2.shipment_date FROM JOIN AS T1 FROM Invoices WITH AS T2 FROM Shipments ON T1.invoice_number = T2.invoice_number "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: List the names of the products being shipped and the corresponding shipment date.\n### Response (TSQL):",
    "sql": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
    "dsql": "PROJECT T1.product_name, T4.shipment_date FROM JOIN AS T1 FROM Products WITH JOIN AS T2 FROM Order_items WITH JOIN AS T3 FROM Shipment_Items WITH AS T4 FROM Shipments ON T3.shipment_id = T4.shipment_id ON T2.order_item_id = T3.order_item_id ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the names of the products tht have been shipped, and on what days were they shipped?\n### Response (TSQL):",
    "sql": "SELECT T1.product_name ,  T4.shipment_date FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
    "dsql": "PROJECT T1.product_name, T4.shipment_date FROM JOIN AS T1 FROM Products WITH JOIN AS T2 FROM Order_items WITH JOIN AS T3 FROM Shipment_Items WITH AS T4 FROM Shipments ON T3.shipment_id = T4.shipment_id ON T2.order_item_id = T3.order_item_id ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What is the status code of the items being ordered and shipped and its corresponding shipment tracking number?\n### Response (TSQL):",
    "sql": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id",
    "dsql": "PROJECT T1.order_item_status_code, T3.shipment_tracking_number FROM JOIN AS T1 FROM Order_items WITH JOIN AS T2 FROM Shipment_Items WITH AS T3 FROM Shipments ON T2.shipment_id = T3.shipment_id ON T1.order_item_id = T2.order_item_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What is the status code of the items have been ordered and shipped, and also what are their shipment tracking numbers?\n### Response (TSQL):",
    "sql": "SELECT T1.order_item_status_code ,  T3.shipment_tracking_number FROM Order_items AS T1 JOIN Shipment_Items AS T2 ON T1.order_item_id  =  T2.order_item_id JOIN Shipments AS T3 ON T2.shipment_id  =  T3.shipment_id",
    "dsql": "PROJECT T1.order_item_status_code, T3.shipment_tracking_number FROM JOIN AS T1 FROM Order_items WITH JOIN AS T2 FROM Shipment_Items WITH AS T3 FROM Shipments ON T2.shipment_id = T3.shipment_id ON T1.order_item_id = T2.order_item_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What is the product name and the color of the ordered items which have been shipped?\n### Response (TSQL):",
    "sql": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
    "dsql": "PROJECT T1.product_name, T1.product_color FROM JOIN AS T1 FROM Products WITH JOIN AS T2 FROM Order_items WITH JOIN AS T3 FROM Shipment_Items WITH AS T4 FROM Shipments ON T3.shipment_id = T4.shipment_id ON T2.order_item_id = T3.order_item_id ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the names and colors of all products that have been shipped?\n### Response (TSQL):",
    "sql": "SELECT T1.product_name ,  T1.product_color FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Shipment_Items AS T3 ON T2.order_item_id  =  T3.order_item_id JOIN Shipments AS T4 ON T3.shipment_id  =  T4.shipment_id",
    "dsql": "PROJECT T1.product_name, T1.product_color FROM JOIN AS T1 FROM Products WITH JOIN AS T2 FROM Order_items WITH JOIN AS T3 FROM Shipment_Items WITH AS T4 FROM Shipments ON T3.shipment_id = T4.shipment_id ON T2.order_item_id = T3.order_item_id ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: List all the distinct product names, price and descriptions which are bought by female customers.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
    "dsql": "PROJECT DISTINCT T1.product_name, T1.product_price, T1.product_description FROM SELECT WHERE T4.gender_code = 'Female' FROM JOIN AS T1 FROM Products WITH JOIN AS T2 FROM Order_items WITH JOIN AS T3 FROM Orders WITH AS T4 FROM Customers ON T3.customer_id = T4.customer_id ON T2.order_id = T3.order_id ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the different names, prices, and descriptions for all products bought by female customers?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.product_name ,  T1.product_price ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T2.order_id  =  T3.order_id JOIN Customers AS T4 ON T3.customer_id  =  T4.customer_id WHERE T4.gender_code  =  'Female'",
    "dsql": "PROJECT DISTINCT T1.product_name, T1.product_price, T1.product_description FROM SELECT WHERE T4.gender_code = 'Female' FROM JOIN AS T1 FROM Products WITH JOIN AS T2 FROM Order_items WITH JOIN AS T3 FROM Orders WITH AS T4 FROM Customers ON T3.customer_id = T4.customer_id ON T2.order_id = T3.order_id ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are invoices status of all the orders which have not been shipped?\n### Response (TSQL):",
    "sql": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )",
    "dsql": "PROJECT invoice_status_code FROM SELECT WHERE invoice_number NOT IN PROJECT invoice_number FROM Shipments FROM Invoices "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the invoice statuses for all orderes that have not been shipped out yet?\n### Response (TSQL):",
    "sql": "SELECT invoice_status_code FROM Invoices WHERE invoice_number NOT IN ( SELECT invoice_number FROM Shipments )",
    "dsql": "PROJECT invoice_status_code FROM SELECT WHERE invoice_number NOT IN PROJECT invoice_number FROM Shipments FROM Invoices "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the total cost of all the orders ? List the order id , date , and total cost .\n### Response (TSQL):",
    "sql": "select t1.order_id ,  t1.date_order_placed ,  sum(t3.product_price) from orders as t1 join order_items as t2 on t1.order_id  =  t2.order_id join products as t3 on t2.product_id  =  t3.product_id group by t1.order_id",
    "dsql": "PROJECT t1.order_id, t1.date_order_placed, SUM(t3.product_price) FROM AGGREGATE SUM(t3.product_price), COUNT(*) GROUP BY t1.order_id FROM JOIN AS t1 FROM orders WITH JOIN AS t2 FROM order_items WITH AS t3 FROM products ON t2.product_id = t3.product_id ON t1.order_id = t2.order_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: For each order, what is its id, date, and total amount paid?\n### Response (TSQL):",
    "sql": "SELECT T1.order_id ,  T1.date_order_placed ,  sum(T3.product_price) FROM Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id JOIN Products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T1.order_id",
    "dsql": "PROJECT T1.order_id, T1.date_order_placed, SUM(T3.product_price) FROM AGGREGATE COUNT(*), SUM(T3.product_price) GROUP BY T1.order_id FROM JOIN AS T1 FROM Orders WITH JOIN AS T2 FROM Order_items WITH AS T3 FROM Products ON T2.product_id = T3.product_id ON T1.order_id = T2.order_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many customers have placed any order?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT customer_id) FROM Orders",
    "dsql": "PROJECT COUNT(DISTINCT customer_id) FROM AGGREGATE COUNT(DISTINCT customer_id) FROM Orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many different customers have ordered things?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT customer_id) FROM Orders",
    "dsql": "PROJECT COUNT(DISTINCT customer_id) FROM AGGREGATE COUNT(DISTINCT customer_id) FROM Orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many item states are there in the orders?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT order_item_status_code) FROM Order_items",
    "dsql": "PROJECT COUNT(DISTINCT order_item_status_code) FROM AGGREGATE COUNT(DISTINCT order_item_status_code) FROM Order_items "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many different item status codes are there listed in ordered items?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT order_item_status_code) FROM Order_items",
    "dsql": "PROJECT COUNT(DISTINCT order_item_status_code) FROM AGGREGATE COUNT(DISTINCT order_item_status_code) FROM Order_items "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many different payment methods are there?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods",
    "dsql": "PROJECT COUNT(DISTINCT Payment_method_code) FROM AGGREGATE COUNT(DISTINCT Payment_method_code) FROM Customer_Payment_Methods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many different payment methods can customers choose from?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT Payment_method_code) FROM Customer_Payment_Methods",
    "dsql": "PROJECT COUNT(DISTINCT Payment_method_code) FROM AGGREGATE COUNT(DISTINCT Payment_method_code) FROM Customer_Payment_Methods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the login names and passwords of the customers whose phone number have the prefix '+12'?\n### Response (TSQL):",
    "sql": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
    "dsql": "PROJECT login_name, login_password FROM SELECT WHERE phone_number LIKE '+12%' FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the usernames and passwords of all customers whose phone number starts with '+12'?\n### Response (TSQL):",
    "sql": "SELECT login_name ,  login_password FROM Customers WHERE phone_number LIKE '+12%'",
    "dsql": "PROJECT login_name, login_password FROM SELECT WHERE phone_number LIKE '+12%' FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the product sizes of the products whose name has the substring 'Dell'?\n### Response (TSQL):",
    "sql": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
    "dsql": "PROJECT product_size FROM SELECT WHERE product_name LIKE '%Dell%' FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the sizes of all products whose name includes the word 'Dell'?\n### Response (TSQL):",
    "sql": "SELECT product_size FROM Products WHERE product_name LIKE '%Dell%'",
    "dsql": "PROJECT product_size FROM SELECT WHERE product_name LIKE '%Dell%' FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the product price and the product size of the products whose price is above average?\n### Response (TSQL):",
    "sql": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
    "dsql": "PROJECT product_price, product_size FROM SELECT WHERE product_price > PROJECT AVG(product_price) FROM AGGREGATE AVG(product_price) FROM Products FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the prices and sizes of all products whose price is above the mean?\n### Response (TSQL):",
    "sql": "SELECT product_price ,  product_size FROM Products WHERE product_price  >  ( SELECT avg(product_price) FROM Products )",
    "dsql": "PROJECT product_price, product_size FROM SELECT WHERE product_price > PROJECT AVG(product_price) FROM AGGREGATE AVG(product_price) FROM Products FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many kinds of products have not been sold?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE product_id NOT IN PROJECT product_id FROM Order_items FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What is the number of products that have not been ordered yet?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE product_id NOT IN PROJECT product_id FROM Order_items FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many customers do not have any payment method?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE customer_id NOT IN PROJECT customer_id FROM Customer_Payment_Methods FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many customers do not have a listed payment method?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payment_Methods )",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE customer_id NOT IN PROJECT customer_id FROM Customer_Payment_Methods FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are all the order status and all the dates of orders?\n### Response (TSQL):",
    "sql": "SELECT order_status_code ,  date_order_placed FROM Orders",
    "dsql": "PROJECT order_status_code, date_order_placed FROM Orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the status codes and dates placed for all of the orders?\n### Response (TSQL):",
    "sql": "SELECT order_status_code ,  date_order_placed FROM Orders",
    "dsql": "PROJECT order_status_code, date_order_placed FROM Orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: List the address, town and county information of the customers who live in the USA.\n### Response (TSQL):",
    "sql": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'",
    "dsql": "PROJECT address_line_1, town_city, county FROM SELECT WHERE Country = 'USA' FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the addresses, towns, and county information for all customers who live in the United States?\n### Response (TSQL):",
    "sql": "SELECT address_line_1 ,  town_city ,  county FROM Customers WHERE Country  =  'USA'",
    "dsql": "PROJECT address_line_1, town_city, county FROM SELECT WHERE Country = 'USA' FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: List all the pairs of buyer first names and product names.\n### Response (TSQL):",
    "sql": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
    "dsql": "PROJECT T1.customer_first_name, T4.product_name FROM JOIN AS T1 FROM Customers WITH JOIN AS T2 FROM Orders WITH JOIN AS T3 FROM Order_items WITH AS T4 FROM Products ON T3.product_id = T4.product_id ON T2.order_id = T3.order_id ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the first names of all buyers and what products did they buy? List them in pairs.\n### Response (TSQL):",
    "sql": "SELECT T1.customer_first_name ,  T4.product_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN Order_items AS T3 ON T2.order_id  =  T3.order_id JOIN Products AS T4 ON T3.product_id  =  T4.product_id",
    "dsql": "PROJECT T1.customer_first_name, T4.product_name FROM JOIN AS T1 FROM Customers WITH JOIN AS T2 FROM Orders WITH JOIN AS T3 FROM Order_items WITH AS T4 FROM Products ON T3.product_id = T4.product_id ON T2.order_id = T3.order_id ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many items are shipped?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Shipment_Items",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Shipment_Items "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How many products have been shipped?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Shipment_Items",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Shipment_Items "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What is the product average price?\n### Response (TSQL):",
    "sql": "SELECT avg(product_price) FROM Products",
    "dsql": "PROJECT AVG(product_price) FROM AGGREGATE AVG(product_price) FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: How much do the products cost on average?\n### Response (TSQL):",
    "sql": "SELECT avg(product_price) FROM Products",
    "dsql": "PROJECT AVG(product_price) FROM AGGREGATE AVG(product_price) FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What is the average price of the products being ordered?\n### Response (TSQL):",
    "sql": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
    "dsql": "PROJECT AVG(T1.product_price) FROM AGGREGATE AVG(T1.product_price) FROM JOIN AS T1 FROM Products WITH AS T2 FROM Order_items ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What is the price of all products being ordered on average?\n### Response (TSQL):",
    "sql": "SELECT avg(T1.product_price) FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
    "dsql": "PROJECT AVG(T1.product_price) FROM AGGREGATE AVG(T1.product_price) FROM JOIN AS T1 FROM Products WITH AS T2 FROM Order_items ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the email address, town and county of the customers who are of the least common gender?\n### Response (TSQL):",
    "sql": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
    "dsql": "PROJECT email_address, town_city, county FROM SELECT WHERE gender_code = LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT gender_code FROM AGGREGATE COUNT(*) GROUP BY gender_code FROM Customers FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the email addresses, cities, and counties listed for all cusomters who are from the gender that orders less often?\n### Response (TSQL):",
    "sql": "SELECT email_address ,  town_city ,  county FROM Customers WHERE gender_code  =  ( SELECT gender_code FROM Customers GROUP BY gender_code ORDER BY count(*) ASC LIMIT 1 )",
    "dsql": "PROJECT email_address, town_city, county FROM SELECT WHERE gender_code = LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT gender_code FROM AGGREGATE COUNT(*) GROUP BY gender_code FROM Customers FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: List the order date of the orders who are placed by customers with at least 2 payment methods.\n### Response (TSQL):",
    "sql": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )",
    "dsql": "PROJECT date_order_placed FROM SELECT WHERE customer_id IN PROJECT T1.customer_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.customer_id FROM JOIN AS T1 FROM Customers WITH AS T2 FROM Customer_Payment_Methods ON T1.customer_id = T2.customer_id FROM Orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What is the date of all orders that have been placed by customers with at least 2 payment methods?\n### Response (TSQL):",
    "sql": "SELECT date_order_placed FROM Orders WHERE customer_id IN ( SELECT T1.customer_id FROM Customers AS T1 JOIN Customer_Payment_Methods AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 )",
    "dsql": "PROJECT date_order_placed FROM SELECT WHERE customer_id IN PROJECT T1.customer_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.customer_id FROM JOIN AS T1 FROM Customers WITH AS T2 FROM Customer_Payment_Methods ON T1.customer_id = T2.customer_id FROM Orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What is the most uncommon order status?\n### Response (TSQL):",
    "sql": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT order_status_code FROM AGGREGATE COUNT(*) GROUP BY order_status_code FROM Orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What is the least common order status?\n### Response (TSQL):",
    "sql": "SELECT order_status_code FROM Orders GROUP BY order_status_code ORDER BY count(*) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT order_status_code FROM AGGREGATE COUNT(*) GROUP BY order_status_code FROM Orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: For all the products sold for more than 3 times, list their id and description.\n### Response (TSQL):",
    "sql": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3",
    "dsql": "PROJECT T1.product_id, T1.product_description FROM SELECT WHERE COUNT(*) > 3 FROM AGGREGATE COUNT(*) GROUP BY T1.product_id FROM JOIN AS T1 FROM Products WITH AS T2 FROM Order_items ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: For all products sold more than 3 times, what are their ids and descriptions?\n### Response (TSQL):",
    "sql": "SELECT T1.product_id ,  T1.product_description FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id HAVING count(*)  >  3",
    "dsql": "PROJECT T1.product_id, T1.product_description FROM SELECT WHERE COUNT(*) > 3 FROM AGGREGATE COUNT(*) GROUP BY T1.product_id FROM JOIN AS T1 FROM Products WITH AS T2 FROM Order_items ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: List the invoice dates and ids of the invoices causing at least 2 shipments.\n### Response (TSQL):",
    "sql": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2",
    "dsql": "PROJECT T1.invoice_date, T1.invoice_number FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.invoice_number FROM JOIN AS T1 FROM Invoices WITH AS T2 FROM Shipments ON T1.invoice_number = T2.invoice_number "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the dates and ids of the invoices that are related to at least 2 shipments?\n### Response (TSQL):",
    "sql": "SELECT T1.invoice_date ,  T1.invoice_number FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number HAVING count(*)  >=  2",
    "dsql": "PROJECT T1.invoice_date, T1.invoice_number FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.invoice_number FROM JOIN AS T1 FROM Invoices WITH AS T2 FROM Shipments ON T1.invoice_number = T2.invoice_number "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: what are all shipment tracking numbers and shipment dates?\n### Response (TSQL):",
    "sql": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments",
    "dsql": "PROJECT shipment_tracking_number, shipment_date FROM Shipments "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the tracking numbers and dates for all shipments listed?\n### Response (TSQL):",
    "sql": "SELECT shipment_tracking_number ,  shipment_date FROM Shipments",
    "dsql": "PROJECT shipment_tracking_number, shipment_date FROM Shipments "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the color, description and size of the products priced below the maximum price.\n### Response (TSQL):",
    "sql": "SELECT product_color ,  product_description ,  product_size FROM Products WHERE product_price  <  ( SELECT max(product_price) FROM products )",
    "dsql": "PROJECT product_color, product_description, product_size FROM SELECT WHERE product_price < PROJECT MAX(product_price) FROM AGGREGATE MAX(product_price) FROM products FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, parent_product_id number, product_name text, product_price number, product_color text, product_size text, product_description text, PRIMARY KEY(product_id)); CREATE TABLE Customers ( customer_id number, gender_code text, customer_first_name text, customer_middle_initial text, customer_last_name text, email_address text, login_name text, login_password text, phone_number text, address_line_1 text, town_city text, county text, country text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Payment_Methods ( customer_id number, payment_method_code text, FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Invoices ( invoice_number number, invoice_status_code text, invoice_date time, PRIMARY KEY(invoice_number)); CREATE TABLE Orders ( order_id number, customer_id number, order_status_code text, date_order_placed time, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, product_id number, order_id number, order_item_status_code text, PRIMARY KEY(order_item_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(product_id) REFERENCES Products (product_id)); CREATE TABLE Shipments ( shipment_id number, order_id number, invoice_number number, shipment_tracking_number text, shipment_date time, PRIMARY KEY(shipment_id), FOREIGN KEY(order_id) REFERENCES Orders (order_id), FOREIGN KEY(invoice_number) REFERENCES Invoices (invoice_number)); CREATE TABLE Shipment_Items ( shipment_id number, order_item_id number, PRIMARY KEY(shipment_id), FOREIGN KEY(order_item_id) REFERENCES Order_Items (order_item_id), FOREIGN KEY(shipment_id) REFERENCES Shipments (shipment_id)); \n### Question: What are the colors , descriptions , and sizes for all products that are not at the maximum price ?\n### Response (TSQL):",
    "sql": "select product_color ,  product_description ,  product_size from products where product_price  !=  ( select max(product_price) from products )",
    "dsql": "PROJECT product_color, product_description, product_size FROM SELECT WHERE product_price <> PROJECT MAX(product_price) FROM AGGREGATE MAX(product_price) FROM products FROM products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: Return the names of directors who are older than the average age.\n### Response (TSQL):",
    "sql": "SELECT name FROM director WHERE age  >  (SELECT avg(age) FROM director)",
    "dsql": "PROJECT name FROM SELECT WHERE age > PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM director FROM director "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: Find the the name of the oldest director.\n### Response (TSQL):",
    "sql": "SELECT name FROM director ORDER BY age DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC age FROM PROJECT name FROM director "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: How many channels have the word 'bbc' in their internet link?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM channel WHERE internet LIKE \"%bbc%\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE internet LIKE \"%bbc%\" FROM channel "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: How many different digital terrestrial channels are there?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT Digital_terrestrial_channel) FROM channel",
    "dsql": "PROJECT COUNT(DISTINCT Digital_terrestrial_channel) FROM AGGREGATE COUNT(DISTINCT Digital_terrestrial_channel) FROM channel "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: List all program titles in the order of starting year. List the most recent one first.\n### Response (TSQL):",
    "sql": "SELECT title FROM program ORDER BY start_year DESC",
    "dsql": "ORDER BY DESC start_year FROM PROJECT title FROM program "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: Which director is in charge of the most programs?\n### Response (TSQL):",
    "sql": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t2.name FROM AGGREGATE COUNT(*) GROUP BY t1.director_id FROM JOIN AS t1 FROM program WITH AS t2 FROM director ON t1.director_id = t2.director_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: Find the name and age of the director who is in charge of the most programs?\n### Response (TSQL):",
    "sql": "SELECT t2.name ,  t2.age FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id GROUP BY t1.director_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t2.name, t2.age FROM AGGREGATE COUNT(*) GROUP BY t1.director_id FROM JOIN AS t1 FROM program WITH AS t2 FROM director ON t1.director_id = t2.director_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: Return the title of the program that began most recently.\n### Response (TSQL):",
    "sql": "SELECT title FROM program ORDER BY start_year DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC start_year FROM PROJECT title FROM program "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: Find the name and website link of the channels that have more than one program.\n### Response (TSQL):",
    "sql": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id HAVING count(*)  >  1",
    "dsql": "PROJECT t1.name, t1.internet FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY t1.channel_id FROM JOIN AS t1 FROM channel WITH AS t2 FROM program ON t1.channel_id = t2.channel_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: Find the number of programs for each channel. Return the name of each channel as well.\n### Response (TSQL):",
    "sql": "SELECT t1.name ,  count(*) FROM channel AS t1 JOIN program AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id",
    "dsql": "PROJECT t1.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY t1.channel_id FROM JOIN AS t1 FROM channel WITH AS t2 FROM program ON t1.channel_id = t2.channel_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: Find the number of channels that do not run any program.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM channel WHERE channel_id NOT IN (SELECT channel_id FROM program)",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE channel_id NOT IN PROJECT channel_id FROM program FROM channel "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: What is the name of the director who is in the \"Dracula\" program?\n### Response (TSQL):",
    "sql": "SELECT t2.name FROM program AS t1 JOIN director AS t2 ON t1.director_id  =  t2.director_id WHERE t1.title  =  'Dracula'",
    "dsql": "PROJECT t2.name FROM SELECT WHERE t1.title = 'Dracula' FROM JOIN AS t1 FROM program WITH AS t2 FROM director ON t1.director_id = t2.director_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: Find the name and internet web of the channel that is directed by the most directors.\n### Response (TSQL):",
    "sql": "SELECT t1.name ,  t1.internet FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id GROUP BY t1.channel_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t1.name, t1.internet FROM AGGREGATE COUNT(*) GROUP BY t1.channel_id FROM JOIN AS t1 FROM channel WITH AS t2 FROM director_admin ON t1.channel_id = t2.channel_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: Find the name of the directors whose age is between 30 and 60.\n### Response (TSQL):",
    "sql": "SELECT name FROM director WHERE age BETWEEN 30 AND 60",
    "dsql": "PROJECT name FROM SELECT WHERE age BETWEEN 30 AND 60 FROM director "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: give me the name of channels that have both a director younger than 40 and a director older than 60.\n### Response (TSQL):",
    "sql": "SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  <  40 INTERSECT SELECT t1.name FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.age  >  60",
    "dsql": "INTERSECT PROJECT t1.name FROM SELECT WHERE t3.age < 40 FROM JOIN AS t1 FROM channel WITH JOIN AS t2 FROM director_admin WITH AS t3 FROM director ON t2.director_id = t3.director_id ON t1.channel_id = t2.channel_id WITH PROJECT t1.name FROM SELECT WHERE t3.age > 60 FROM JOIN AS t1 FROM channel WITH JOIN AS t2 FROM director_admin WITH AS t3 FROM director ON t2.director_id = t3.director_id ON t1.channel_id = t2.channel_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE channel ( Channel_ID number, Name text, Analogue_terrestrial_channel text, Digital_terrestrial_channel text, Internet text, PRIMARY KEY(Channel_ID)); CREATE TABLE director ( Director_ID number, Name text, Age number, PRIMARY KEY(Director_ID)); CREATE TABLE program ( Program_ID number, Start_Year number, Title text, Director_ID number, Channel_ID number, PRIMARY KEY(Program_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); CREATE TABLE director_admin ( Director_ID number, Channel_ID number, Is_first_director others, PRIMARY KEY(Director_ID), FOREIGN KEY(Channel_ID) REFERENCES channel (Channel_ID), FOREIGN KEY(Director_ID) REFERENCES director (Director_ID)); \n### Question: Find the id and name of the channel that is not directed by Hank Baskett.\n### Response (TSQL):",
    "sql": "SELECT t1.name ,  t1.channel_id FROM channel AS t1 JOIN director_admin AS t2 ON t1.channel_id  =  t2.channel_id JOIN director AS t3 ON t2.director_id  =  t3.director_id WHERE t3.name != \"Hank Baskett\"",
    "dsql": "PROJECT t1.name, t1.channel_id FROM SELECT WHERE t3.name <> \"Hank Baskett\" FROM JOIN AS t1 FROM channel WITH JOIN AS t2 FROM director_admin WITH AS t3 FROM director ON t2.director_id = t3.director_id ON t1.channel_id = t2.channel_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: How many radios are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM radio",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM radio "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: List the transmitters of radios in ascending order of erp kw .\n### Response (TSQL):",
    "sql": "select transmitter from radio order by erp_kw asc",
    "dsql": "ORDER BY ASC erp_kw FROM PROJECT transmitter FROM radio "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: What are the names and original air dates of tv shows?\n### Response (TSQL):",
    "sql": "SELECT tv_show_name ,  Original_Airdate FROM tv_show",
    "dsql": "PROJECT tv_show_name, Original_Airdate FROM tv_show "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: List the station names of city channels whose affiliation is not \"ABC\".\n### Response (TSQL):",
    "sql": "SELECT Station_name FROM city_channel WHERE Affiliation != \"ABC\"",
    "dsql": "PROJECT Station_name FROM SELECT WHERE Affiliation <> \"ABC\" FROM city_channel "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: Show the transmitters of radios whose ERP is bigger than 150 or smaller than 30.\n### Response (TSQL):",
    "sql": "SELECT Transmitter FROM radio WHERE ERP_kW  >  150 OR ERP_kW  <  30",
    "dsql": "PROJECT Transmitter FROM SELECT WHERE ERP_kW > 150 OR ERP_kW < 30 FROM radio "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: What is the transmitter of the radio with the largest ERP_kW?\n### Response (TSQL):",
    "sql": "SELECT Transmitter FROM radio ORDER BY ERP_kW DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC ERP_kW FROM PROJECT Transmitter FROM radio "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: What is the average ERP across all radios?\n### Response (TSQL):",
    "sql": "SELECT avg(ERP_kW) FROM radio",
    "dsql": "PROJECT AVG(ERP_kW) FROM AGGREGATE AVG(ERP_kW) FROM radio "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: Show the different affiliations of city channels and the number of city channels with each affiliation.\n### Response (TSQL):",
    "sql": "SELECT Affiliation ,  COUNT(*) FROM city_channel GROUP BY Affiliation",
    "dsql": "PROJECT Affiliation, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Affiliation FROM city_channel "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: Please show the most common affiliation for city channels.\n### Response (TSQL):",
    "sql": "SELECT Affiliation FROM city_channel GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Affiliation FROM AGGREGATE COUNT(*) GROUP BY Affiliation FROM city_channel "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: List the affiliations shared by more than three city channels.\n### Response (TSQL):",
    "sql": "SELECT Affiliation FROM city_channel GROUP BY Affiliation HAVING COUNT(*)  >  3",
    "dsql": "PROJECT Affiliation FROM SELECT WHERE COUNT(*) > 3 FROM AGGREGATE COUNT(*) GROUP BY Affiliation FROM city_channel "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: Show the cities and station names of city channels in ascending alphabetical order of station name.\n### Response (TSQL):",
    "sql": "SELECT City ,  Station_name FROM city_channel ORDER BY Station_name ASC",
    "dsql": "ORDER BY ASC Station_name FROM PROJECT City, Station_name FROM city_channel "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: Show the transmitters of radios and the cities of the channels they are associated with.\n### Response (TSQL):",
    "sql": "SELECT T3.Transmitter ,  T2.City FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID",
    "dsql": "PROJECT T3.Transmitter, T2.City FROM JOIN AS T2 FROM city_channel WITH JOIN AS T1 FROM city_channel_radio WITH AS T3 FROM radio ON T1.Radio_ID = T3.Radio_ID ON T1.City_channel_ID = T2.ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: Show the transmitters of radios and the station names of the channels they are associated with in descending order of the ERP of the radios.\n### Response (TSQL):",
    "sql": "SELECT T3.Transmitter ,  T2.Station_name FROM city_channel_radio AS T1 JOIN city_channel AS T2 ON T1.City_channel_ID  =  T2.ID JOIN radio AS T3 ON T1.Radio_ID  =  T3.Radio_ID ORDER BY T3.ERP_kW DESC",
    "dsql": "ORDER BY DESC T3.ERP_kW FROM PROJECT T3.Transmitter, T2.Station_name FROM JOIN AS T2 FROM city_channel WITH JOIN AS T1 FROM city_channel_radio WITH AS T3 FROM radio ON T1.Radio_ID = T3.Radio_ID ON T1.City_channel_ID = T2.ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: Show the transmitters of the radios and the number of city channels they are associated with.\n### Response (TSQL):",
    "sql": "SELECT T2.Transmitter ,  COUNT(*) FROM city_channel_radio AS T1 JOIN radio AS T2 ON T1.Radio_ID  =  T2.Radio_ID GROUP BY T2.Transmitter",
    "dsql": "PROJECT T2.Transmitter, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.Transmitter FROM JOIN AS T1 FROM city_channel_radio WITH AS T2 FROM radio ON T1.Radio_ID = T2.Radio_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE city_channel ( ID number, City text, Station_name text, Owned_Since number, Affiliation text, PRIMARY KEY(ID)); CREATE TABLE radio ( Radio_ID number, Transmitter text, Radio_MHz text, 2FM_MHz text, RnaG_MHz text, Lyric_FM_MHz text, ERP_kW text, PRIMARY KEY(Radio_ID)); CREATE TABLE tv_show ( tv_show_ID number, tv_show_name text, Sub_tittle text, Next_show_name text, Original_Airdate text, PRIMARY KEY(tv_show_ID)); CREATE TABLE city_channel_radio ( City_channel_ID number, Radio_ID number, Is_online others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(Radio_ID) REFERENCES radio (Radio_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); CREATE TABLE city_channel_tv_show ( City_channel_ID number, tv_show_ID number, Is_online others, Is_free others, PRIMARY KEY(City_channel_ID), FOREIGN KEY(tv_show_ID) REFERENCES tv_show (tv_show_ID), FOREIGN KEY(City_channel_ID) REFERENCES city_channel (ID)); \n### Question: Show the distinct transmitters of radios that are not associated with any city channel.\n### Response (TSQL):",
    "sql": "SELECT Transmitter FROM radio WHERE Radio_ID NOT IN (SELECT Radio_ID FROM city_channel_radio)",
    "dsql": "PROJECT Transmitter FROM SELECT WHERE Radio_ID NOT IN PROJECT Radio_ID FROM city_channel_radio FROM radio "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What is the model of the vehicle with maximum top speed whose power is higher than 6000?\n### Response (TSQL):",
    "sql": "SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC top_speed FROM PROJECT model FROM SELECT WHERE power > 6000 FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Of vehicles with power over 6000, return the model of the vehicle with the greatest top speed.\n### Response (TSQL):",
    "sql": "SELECT model FROM vehicle WHERE power  >  6000 ORDER BY top_speed DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC top_speed FROM PROJECT model FROM SELECT WHERE power > 6000 FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the names of the drivers who are citizens of the 'United States'?\n### Response (TSQL):",
    "sql": "SELECT name FROM driver WHERE citizenship  =  'United States'",
    "dsql": "PROJECT name FROM SELECT WHERE citizenship = 'United States' FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Return the names of drivers with citizenship from the United States.\n### Response (TSQL):",
    "sql": "SELECT name FROM driver WHERE citizenship  =  'United States'",
    "dsql": "PROJECT name FROM SELECT WHERE citizenship = 'United States' FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: How many vehicles has a driver driven at most, and what is the driver id of the driver who has driven this many vehicles?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT COUNT(*), driver_id FROM AGGREGATE COUNT(*) GROUP BY driver_id FROM vehicle_driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What is the id of the driver who has driven the most vehicles, and how many vehicles is this?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  driver_id FROM vehicle_driver GROUP BY driver_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT COUNT(*), driver_id FROM AGGREGATE COUNT(*) GROUP BY driver_id FROM vehicle_driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What is the maximum and average power for the vehicles manufactured by 'Zhuzhou'?\n### Response (TSQL):",
    "sql": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'",
    "dsql": "PROJECT MAX(power), AVG(power) FROM AGGREGATE MAX(power), AVG(power) FROM SELECT WHERE builder = 'Zhuzhou' FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Return the maximum and average power for the vehicles built by Zhuzhou.\n### Response (TSQL):",
    "sql": "SELECT max(power) ,  avg(power) FROM vehicle WHERE builder  =  'Zhuzhou'",
    "dsql": "PROJECT MAX(power), AVG(power) FROM AGGREGATE MAX(power), AVG(power) FROM SELECT WHERE builder = 'Zhuzhou' FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What is the id of the vehicle driven for the least times for the vehicles ever used?\n### Response (TSQL):",
    "sql": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT vehicle_id FROM AGGREGATE COUNT(*) GROUP BY vehicle_id FROM vehicle_driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Return the id of the vehicle that has been driven the fewest times.\n### Response (TSQL):",
    "sql": "SELECT vehicle_id FROM vehicle_driver GROUP BY vehicle_id ORDER BY count(*) ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT vehicle_id FROM AGGREGATE COUNT(*) GROUP BY vehicle_id FROM vehicle_driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What is the top speed and power of the vehicle manufactured in the year of 1996?\n### Response (TSQL):",
    "sql": "SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996",
    "dsql": "PROJECT top_speed, power FROM SELECT WHERE build_year = 1996 FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Return the top speed and power of the vehicle that was built in the year 1996.\n### Response (TSQL):",
    "sql": "SELECT top_speed ,  power FROM vehicle WHERE build_year  =  1996",
    "dsql": "PROJECT top_speed, power FROM SELECT WHERE build_year = 1996 FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the build year, model name and builder of the vehicles?\n### Response (TSQL):",
    "sql": "SELECT build_year ,  model ,  builder FROM vehicle",
    "dsql": "PROJECT build_year, model, builder FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Give the build year, model, and builder of each vehicle.\n### Response (TSQL):",
    "sql": "SELECT build_year ,  model ,  builder FROM vehicle",
    "dsql": "PROJECT build_year, model, builder FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: How many drivers have driven vehicles built in 2012?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012",
    "dsql": "PROJECT COUNT(DISTINCT T1.driver_id) FROM AGGREGATE COUNT(DISTINCT T1.driver_id) FROM SELECT WHERE T2.build_year = 2012 FROM JOIN AS T1 FROM vehicle_driver WITH AS T2 FROM vehicle ON T1.vehicle_id = T2.vehicle_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Count the number of different drivers who have driven vehicles built in 2012.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T1.driver_id) FROM vehicle_driver AS T1 JOIN vehicle AS T2 ON T1.vehicle_id  =  T2.vehicle_id WHERE T2.build_year  =  2012",
    "dsql": "PROJECT COUNT(DISTINCT T1.driver_id) FROM AGGREGATE COUNT(DISTINCT T1.driver_id) FROM SELECT WHERE T2.build_year = 2012 FROM JOIN AS T1 FROM vehicle_driver WITH AS T2 FROM vehicle ON T1.vehicle_id = T2.vehicle_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: How many drivers have raced in 'NASCAR'?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Racing_Series = 'NASCAR' FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Count the number of drivers who have raced in NASCAR.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM driver WHERE Racing_Series  =  'NASCAR'",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Racing_Series = 'NASCAR' FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What is the average top speed of vehicles?\n### Response (TSQL):",
    "sql": "SELECT avg(top_speed) FROM vehicle",
    "dsql": "PROJECT AVG(top_speed) FROM AGGREGATE AVG(top_speed) FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Return the average top speed across all vehicles.\n### Response (TSQL):",
    "sql": "SELECT avg(top_speed) FROM vehicle",
    "dsql": "PROJECT AVG(top_speed) FROM AGGREGATE AVG(top_speed) FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the distinct driver names who have driven vehicles with power more than 5000 ?\n### Response (TSQL):",
    "sql": "select distinct t1.name from driver as t1 join vehicle_driver as t2 on t1.driver_id  =  t2.driver_id join vehicle as t3 on t2.vehicle_id  =  t3.vehicle_id where t3.power  >  5000",
    "dsql": "PROJECT DISTINCT t1.name FROM SELECT WHERE t3.power > 5000 FROM JOIN AS t1 FROM driver WITH JOIN AS t2 FROM vehicle_driver WITH AS t3 FROM vehicle ON t2.vehicle_id = t3.vehicle_id ON t1.driver_id = t2.driver_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Return the names of drivers who have driven vehicles with power over 5000.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.Name FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.power  >  5000",
    "dsql": "PROJECT DISTINCT T1.Name FROM SELECT WHERE T3.power > 5000 FROM JOIN AS T1 FROM driver WITH JOIN AS T2 FROM vehicle_driver WITH AS T3 FROM vehicle ON T2.vehicle_id = T3.vehicle_id ON T1.driver_id = T2.driver_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Which car models have total production larger than 100 or top speed higher than 150?\n### Response (TSQL):",
    "sql": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150",
    "dsql": "PROJECT model FROM SELECT WHERE total_production > 100 OR top_speed > 150 FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Give the models of cars that have a total production of over 100 or a top speed over 150.\n### Response (TSQL):",
    "sql": "SELECT model FROM vehicle WHERE total_production  >  100 OR top_speed  >  150",
    "dsql": "PROJECT model FROM SELECT WHERE total_production > 100 OR top_speed > 150 FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the model names and build year of the cars with 'DJ' in its model name?\n### Response (TSQL):",
    "sql": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'",
    "dsql": "PROJECT model, build_year FROM SELECT WHERE model LIKE '%DJ%' FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Return the model and build year of cars that include \"DJ\" in their model names.\n### Response (TSQL):",
    "sql": "SELECT model ,  build_year FROM vehicle WHERE model LIKE '%DJ%'",
    "dsql": "PROJECT model, build_year FROM SELECT WHERE model LIKE '%DJ%' FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the models which have not been driven by any drivers?\n### Response (TSQL):",
    "sql": "SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id",
    "dsql": "EXCEPT PROJECT model FROM vehicle WITH PROJECT T1.model FROM JOIN AS T1 FROM vehicle WITH AS T2 FROM vehicle_driver ON T1.vehicle_id = T2.vehicle_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Return the models of vehicles that have never been driven.\n### Response (TSQL):",
    "sql": "SELECT model FROM vehicle EXCEPT SELECT T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id",
    "dsql": "EXCEPT PROJECT model FROM vehicle WITH PROJECT T1.model FROM JOIN AS T1 FROM vehicle WITH AS T2 FROM vehicle_driver ON T1.vehicle_id = T2.vehicle_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the vehicle ids and models of the vehicle which have been driven by two drivers or been manufactured by 'Ziyang'.\n### Response (TSQL):",
    "sql": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
    "dsql": "PROJECT T1.vehicle_id, T1.model FROM SELECT WHERE COUNT(*) = 2 OR T1.builder = 'Ziyang' FROM AGGREGATE COUNT(*) GROUP BY T2.vehicle_id FROM JOIN AS T1 FROM vehicle WITH AS T2 FROM vehicle_driver ON T1.vehicle_id = T2.vehicle_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Return the ids and models of vehicles that have been driven by exactly two drivers or built by Ziyang.\n### Response (TSQL):",
    "sql": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  =  2 OR T1.builder  =  'Ziyang'",
    "dsql": "PROJECT T1.vehicle_id, T1.model FROM SELECT WHERE COUNT(*) = 2 OR T1.builder = 'Ziyang' FROM AGGREGATE COUNT(*) GROUP BY T2.vehicle_id FROM JOIN AS T1 FROM vehicle WITH AS T2 FROM vehicle_driver ON T1.vehicle_id = T2.vehicle_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the vehicle ids and models which have been driven by more than 2 drivers or been driven by the driver named 'Jeff Gordon'?\n### Response (TSQL):",
    "sql": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2",
    "dsql": "UNION PROJECT T1.vehicle_id, T1.model FROM SELECT WHERE T3.name = 'Jeff Gordon' FROM JOIN AS T1 FROM vehicle WITH JOIN AS T2 FROM vehicle_driver WITH AS T3 FROM driver ON T2.driver_id = T3.driver_id ON T1.vehicle_id = T2.vehicle_id WITH PROJECT T1.vehicle_id, T1.model FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY T2.vehicle_id FROM JOIN AS T1 FROM vehicle WITH AS T2 FROM vehicle_driver ON T1.vehicle_id = T2.vehicle_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Return the ids and models of vehicles that have been driven by more than 2 drivers or been driven by the Jeff Gordon.\n### Response (TSQL):",
    "sql": "SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id JOIN driver AS T3 ON T2.driver_id  =  T3.driver_id WHERE T3.name  =  'Jeff Gordon' UNION SELECT T1.vehicle_id ,  T1.model FROM vehicle AS T1 JOIN vehicle_driver AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T2.vehicle_id HAVING count(*)  >  2",
    "dsql": "UNION PROJECT T1.vehicle_id, T1.model FROM SELECT WHERE T3.name = 'Jeff Gordon' FROM JOIN AS T1 FROM vehicle WITH JOIN AS T2 FROM vehicle_driver WITH AS T3 FROM driver ON T2.driver_id = T3.driver_id ON T1.vehicle_id = T2.vehicle_id WITH PROJECT T1.vehicle_id, T1.model FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY T2.vehicle_id FROM JOIN AS T1 FROM vehicle WITH AS T2 FROM vehicle_driver ON T1.vehicle_id = T2.vehicle_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: How many vehicles have maximum top speed?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE top_speed = PROJECT MAX(top_speed) FROM AGGREGATE MAX(top_speed) FROM vehicle FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Count the number of vehicles that have a top speed equal to the maximum across all vehicles.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM vehicle WHERE top_speed  =  (SELECT max(top_speed) FROM vehicle)",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE top_speed = PROJECT MAX(top_speed) FROM AGGREGATE MAX(top_speed) FROM vehicle FROM vehicle "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Show all driver names in the alphabetical order.\n### Response (TSQL):",
    "sql": "SELECT name FROM driver ORDER BY name",
    "dsql": "ORDER BY name FROM PROJECT name FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the names of drivers, returned in alphbetical order?\n### Response (TSQL):",
    "sql": "SELECT name FROM driver ORDER BY name",
    "dsql": "ORDER BY name FROM PROJECT name FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: How many drivers have been racing in each racing series?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series",
    "dsql": "PROJECT COUNT(*), racing_series FROM AGGREGATE COUNT(*) GROUP BY racing_series FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Count the number of drivers that have raced in each series.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  racing_series FROM driver GROUP BY racing_series",
    "dsql": "PROJECT COUNT(*), racing_series FROM AGGREGATE COUNT(*) GROUP BY racing_series FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the name and citizenship of the drivers who have driven the vehicle model 'DJ1'?\n### Response (TSQL):",
    "sql": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'",
    "dsql": "PROJECT T1.name, T1.citizenship FROM SELECT WHERE T3.model = 'DJ1' FROM JOIN AS T1 FROM driver WITH JOIN AS T2 FROM vehicle_driver WITH AS T3 FROM vehicle ON T2.vehicle_id = T3.vehicle_id ON T1.driver_id = T2.driver_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Return the names and citizenships of drivers who have driven the vehicle with the model 'DJ1'.\n### Response (TSQL):",
    "sql": "SELECT T1.name ,  T1.citizenship FROM driver AS T1 JOIN vehicle_driver AS T2 ON T1.driver_id  =  T2.driver_id JOIN vehicle AS T3 ON T2.vehicle_id  =  T3.vehicle_id WHERE T3.model  =  'DJ1'",
    "dsql": "PROJECT T1.name, T1.citizenship FROM SELECT WHERE T3.model = 'DJ1' FROM JOIN AS T1 FROM driver WITH JOIN AS T2 FROM vehicle_driver WITH AS T3 FROM vehicle ON T2.vehicle_id = T3.vehicle_id ON T1.driver_id = T2.driver_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: How many drivers have not driven any cars?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE driver_id NOT IN PROJECT driver_id FROM vehicle_driver FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE vehicle ( Vehicle_ID number, Model text, Build_Year text, Top_Speed number, Power number, Builder text, Total_Production text, PRIMARY KEY(Vehicle_ID)); CREATE TABLE driver ( Driver_ID number, Name text, Citizenship text, Racing_Series text, PRIMARY KEY(Driver_ID)); CREATE TABLE vehicle_driver ( Driver_ID number, Vehicle_ID number, PRIMARY KEY(Driver_ID), FOREIGN KEY(Vehicle_ID) REFERENCES vehicle (Vehicle_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Count the number of drivers who have not driven any vehicles.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM driver WHERE driver_id NOT IN ( SELECT driver_id FROM vehicle_driver )",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE driver_id NOT IN PROJECT driver_id FROM vehicle_driver FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: How many exams are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Exams",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Exams "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Count the number of exams.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Exams",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Exams "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: List the distinct subject code of exams in ascending alphabetical order .\n### Response (TSQL):",
    "sql": "select distinct subject_code from exams order by subject_code asc",
    "dsql": "ORDER BY ASC subject_code FROM PROJECT DISTINCT subject_code FROM exams "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Give me an alphabetically ordered list of the distinct subject code for exams.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT Subject_Code FROM Exams ORDER BY Subject_Code",
    "dsql": "ORDER BY Subject_Code FROM PROJECT DISTINCT Subject_Code FROM Exams "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: What are the names and dates of the exams with subject code that is not \"Database\"?\n### Response (TSQL):",
    "sql": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
    "dsql": "PROJECT Exam_Date, Exam_Name FROM SELECT WHERE Subject_Code <> 'Database' FROM Exams "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Find the exams whose subject code is not \"Database\". What are the exam dates and exam names?\n### Response (TSQL):",
    "sql": "SELECT Exam_Date ,  Exam_Name FROM Exams WHERE Subject_Code != 'Database'",
    "dsql": "PROJECT Exam_Date, Exam_Name FROM SELECT WHERE Subject_Code <> 'Database' FROM Exams "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: List the dates of the exams with subject code containing the word \"data\", in descending order of dates.\n### Response (TSQL):",
    "sql": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
    "dsql": "ORDER BY DESC Exam_Date FROM PROJECT Exam_Date FROM SELECT WHERE Subject_Code LIKE '%data%' FROM Exams "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: What are the dates of the exams whose subject code contains the substring \"data\"? Return them in descending order of dates.\n### Response (TSQL):",
    "sql": "SELECT Exam_Date FROM Exams WHERE Subject_Code LIKE '%data%' ORDER BY Exam_Date DESC",
    "dsql": "ORDER BY DESC Exam_Date FROM PROJECT Exam_Date FROM SELECT WHERE Subject_Code LIKE '%data%' FROM Exams "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: What are the type of questions and their counts?\n### Response (TSQL):",
    "sql": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
    "dsql": "PROJECT Type_of_Question_Code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Type_of_Question_Code FROM Questions "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: For each question type, return its type code and its count of occurrence.\n### Response (TSQL):",
    "sql": "SELECT Type_of_Question_Code ,  COUNT(*) FROM Questions GROUP BY Type_of_Question_Code",
    "dsql": "PROJECT Type_of_Question_Code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Type_of_Question_Code FROM Questions "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: What are the distinct student answer texts that received comments \"Normal\"?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
    "dsql": "PROJECT DISTINCT Student_Answer_Text FROM SELECT WHERE Comments = \"Normal\" FROM Student_Answers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: List all the distinct student answer texts to which comments \"Normal\" were given?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\"",
    "dsql": "PROJECT DISTINCT Student_Answer_Text FROM SELECT WHERE Comments = \"Normal\" FROM Student_Answers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: How many different comments are there for student answers?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT Comments) FROM Student_Answers",
    "dsql": "PROJECT COUNT(DISTINCT Comments) FROM AGGREGATE COUNT(DISTINCT Comments) FROM Student_Answers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Count the number of different comments for student answers.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT Comments) FROM Student_Answers",
    "dsql": "PROJECT COUNT(DISTINCT Comments) FROM AGGREGATE COUNT(DISTINCT Comments) FROM Student_Answers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: List all the student answer texts in descending order of count.\n### Response (TSQL):",
    "sql": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
    "dsql": "ORDER BY DESC COUNT(*) FROM PROJECT Student_Answer_Text FROM AGGREGATE COUNT(*) GROUP BY Student_Answer_Text FROM Student_Answers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Sort the student answer texts in descending order of their frequency of occurrence.\n### Response (TSQL):",
    "sql": "SELECT Student_Answer_Text FROM Student_Answers GROUP BY Student_Answer_Text ORDER BY COUNT(*) DESC",
    "dsql": "ORDER BY DESC COUNT(*) FROM PROJECT Student_Answer_Text FROM AGGREGATE COUNT(*) GROUP BY Student_Answer_Text FROM Student_Answers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Please show the first names of students and the dates of their answers.\n### Response (TSQL):",
    "sql": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID",
    "dsql": "PROJECT T2.First_Name, T1.Date_of_Answer FROM JOIN AS T1 FROM Student_Answers WITH AS T2 FROM Students ON T1.Student_ID = T2.Student_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: For each student answer, find the first name of the student and the date of the answer.\n### Response (TSQL):",
    "sql": "SELECT T2.First_Name ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID",
    "dsql": "PROJECT T2.First_Name, T1.Date_of_Answer FROM JOIN AS T1 FROM Student_Answers WITH AS T2 FROM Students ON T1.Student_ID = T2.Student_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Please show the email addresses of students and the dates of their answers in descending order of dates.\n### Response (TSQL):",
    "sql": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC",
    "dsql": "ORDER BY DESC T1.Date_of_Answer FROM PROJECT T2.Email_Adress, T1.Date_of_Answer FROM JOIN AS T1 FROM Student_Answers WITH AS T2 FROM Students ON T1.Student_ID = T2.Student_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: For each student answer, find the email address of the student and the date of the answer. Sort them in descending order of dates.\n### Response (TSQL):",
    "sql": "SELECT T2.Email_Adress ,  T1.Date_of_Answer FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID ORDER BY T1.Date_of_Answer DESC",
    "dsql": "ORDER BY DESC T1.Date_of_Answer FROM PROJECT T2.Email_Adress, T1.Date_of_Answer FROM JOIN AS T1 FROM Student_Answers WITH AS T2 FROM Students ON T1.Student_ID = T2.Student_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Please show the least common assessment for students.\n### Response (TSQL):",
    "sql": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT Assessment FROM AGGREGATE COUNT(*) GROUP BY Assessment FROM Student_Assessments "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Which assessment has the smallest frequency count?\n### Response (TSQL):",
    "sql": "SELECT Assessment FROM Student_Assessments GROUP BY Assessment ORDER BY COUNT(*) ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT Assessment FROM AGGREGATE COUNT(*) GROUP BY Assessment FROM Student_Assessments "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Please show the first names of the students that have at least two answer records.\n### Response (TSQL):",
    "sql": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2",
    "dsql": "PROJECT T2.First_Name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.Student_ID FROM JOIN AS T1 FROM Student_Answers WITH AS T2 FROM Students ON T1.Student_ID = T2.Student_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Which students have 2 or more answer records? Give me their first names.\n### Response (TSQL):",
    "sql": "SELECT T2.First_Name FROM Student_Answers AS T1 JOIN Students AS T2 ON T1.Student_ID  =  T2.Student_ID GROUP BY T1.Student_ID HAVING COUNT(*)  >=  2",
    "dsql": "PROJECT T2.First_Name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.Student_ID FROM JOIN AS T1 FROM Student_Answers WITH AS T2 FROM Students ON T1.Student_ID = T2.Student_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: What is the most common valid answer text?\n### Response (TSQL):",
    "sql": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Valid_Answer_Text FROM AGGREGATE COUNT(*) GROUP BY Valid_Answer_Text FROM Valid_Answers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Find the valid answer text that appeared most frequently.\n### Response (TSQL):",
    "sql": "SELECT Valid_Answer_Text FROM Valid_Answers GROUP BY Valid_Answer_Text ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Valid_Answer_Text FROM AGGREGATE COUNT(*) GROUP BY Valid_Answer_Text FROM Valid_Answers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: List the last names of the students whose gender is not \"M\".\n### Response (TSQL):",
    "sql": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\"",
    "dsql": "PROJECT Last_Name FROM SELECT WHERE Gender_MFU <> \"M\" FROM Students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: What are the last names of the students with gender other than \"M\"?\n### Response (TSQL):",
    "sql": "SELECT Last_Name FROM Students WHERE Gender_MFU != \"M\"",
    "dsql": "PROJECT Last_Name FROM SELECT WHERE Gender_MFU <> \"M\" FROM Students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: List each gender and the corresponding number of students.\n### Response (TSQL):",
    "sql": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
    "dsql": "PROJECT Gender_MFU, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Gender_MFU FROM Students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: For each gender, return the gender code and the number of students who identify as that gender.\n### Response (TSQL):",
    "sql": "SELECT Gender_MFU ,  COUNT(*) FROM Students GROUP BY Gender_MFU",
    "dsql": "PROJECT Gender_MFU, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Gender_MFU FROM Students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: List the last names of the students whose gender is \"F\" or \"M\".\n### Response (TSQL):",
    "sql": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\"",
    "dsql": "PROJECT Last_Name FROM SELECT WHERE Gender_MFU = \"F\" OR Gender_MFU = \"M\" FROM Students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Which students identify their gender as \"F\" or \"M\"? Give me their last names.\n### Response (TSQL):",
    "sql": "SELECT Last_Name FROM Students WHERE Gender_MFU  =  \"F\" OR Gender_MFU  =  \"M\"",
    "dsql": "PROJECT Last_Name FROM SELECT WHERE Gender_MFU = \"F\" OR Gender_MFU = \"M\" FROM Students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: List the first names of the students who do not have any answers.\n### Response (TSQL):",
    "sql": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
    "dsql": "PROJECT First_Name FROM SELECT WHERE Student_ID NOT IN PROJECT Student_ID FROM Student_Answers FROM Students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Which students do not have any answers? Find their first names.\n### Response (TSQL):",
    "sql": "SELECT First_Name FROM Students WHERE Student_ID NOT IN (SELECT Student_ID FROM Student_Answers)",
    "dsql": "PROJECT First_Name FROM SELECT WHERE Student_ID NOT IN PROJECT Student_ID FROM Student_Answers FROM Students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Show the student answer texts that received both \"Normal\" and \"Absent\" as comments.\n### Response (TSQL):",
    "sql": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\"",
    "dsql": "INTERSECT PROJECT Student_Answer_Text FROM SELECT WHERE Comments = \"Normal\" FROM Student_Answers WITH PROJECT Student_Answer_Text FROM SELECT WHERE Comments = \"Absent\" FROM Student_Answers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Which student answer texts were given both \"Normal\" and \"Absent\" as comments?\n### Response (TSQL):",
    "sql": "SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Normal\" INTERSECT SELECT Student_Answer_Text FROM Student_Answers WHERE Comments  =  \"Absent\"",
    "dsql": "INTERSECT PROJECT Student_Answer_Text FROM SELECT WHERE Comments = \"Normal\" FROM Student_Answers WITH PROJECT Student_Answer_Text FROM SELECT WHERE Comments = \"Absent\" FROM Student_Answers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Show the types of questions that have at least three questions.\n### Response (TSQL):",
    "sql": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3",
    "dsql": "PROJECT Type_of_Question_Code FROM SELECT WHERE COUNT(*) >= 3 FROM AGGREGATE COUNT(*) GROUP BY Type_of_Question_Code FROM Questions "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Which types of questions have 3 or more questions? Return the questions type code.\n### Response (TSQL):",
    "sql": "SELECT Type_of_Question_Code FROM Questions GROUP BY Type_of_Question_Code HAVING count(*)  >=  3",
    "dsql": "PROJECT Type_of_Question_Code FROM SELECT WHERE COUNT(*) >= 3 FROM AGGREGATE COUNT(*) GROUP BY Type_of_Question_Code FROM Questions "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: Show all information on students.\n### Response (TSQL):",
    "sql": "SELECT * FROM Students",
    "dsql": "PROJECT * FROM Students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( Student_ID number, First_Name text, Middle_Name text, Last_Name text, Gender_MFU text, Student_Address text, Email_Adress text, Cell_Mobile_Phone text, Home_Phone text, PRIMARY KEY(Student_ID)); CREATE TABLE Questions ( Question_ID number, Type_of_Question_Code text, Question_Text text, PRIMARY KEY(Question_ID)); CREATE TABLE Exams ( Exam_ID number, Subject_Code text, Exam_Date time, Exam_Name text, PRIMARY KEY(Exam_ID)); CREATE TABLE Questions_in_Exams ( Exam_ID number, Question_ID number, PRIMARY KEY(Exam_ID), FOREIGN KEY(Exam_ID) REFERENCES Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Valid_Answers ( Valid_Answer_ID number, Question_ID number, Valid_Answer_Text text, PRIMARY KEY(Valid_Answer_ID), FOREIGN KEY(Question_ID) REFERENCES Questions (Question_ID)); CREATE TABLE Student_Answers ( Student_Answer_ID number, Exam_ID number, Question_ID number, Student_ID number, Date_of_Answer time, Comments text, Satisfactory_YN text, Student_Answer_Text text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Exam_ID) REFERENCES Questions_in_Exams (Exam_ID), FOREIGN KEY(Question_ID) REFERENCES Questions_in_Exams (Question_ID), FOREIGN KEY(Student_ID) REFERENCES Students (Student_ID)); CREATE TABLE Student_Assessments ( Student_Answer_ID text, Valid_Answer_ID number, Student_Answer_Text text, Satisfactory_YN text, Assessment text, PRIMARY KEY(Student_Answer_ID), FOREIGN KEY(Valid_Answer_ID) REFERENCES Valid_Answers (Valid_Answer_ID)); \n### Question: What is al the available information of each student?\n### Response (TSQL):",
    "sql": "SELECT * FROM Students",
    "dsql": "PROJECT * FROM Students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: How many addresses do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Addresses",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Addresses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Count the number of addresses.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Addresses",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Addresses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: List all address ids and address details.\n### Response (TSQL):",
    "sql": "SELECT address_id ,  address_details FROM Addresses",
    "dsql": "PROJECT address_id, address_details FROM Addresses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are all the address ids and address details?\n### Response (TSQL):",
    "sql": "SELECT address_id ,  address_details FROM Addresses",
    "dsql": "PROJECT address_id, address_details FROM Addresses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: How many products do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Products",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Count the number of products.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Products",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show all product ids, product type codes, and product name.\n### Response (TSQL):",
    "sql": "SELECT product_id ,  product_type_code ,  product_name FROM Products",
    "dsql": "PROJECT product_id, product_type_code, product_name FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the ids, type codes, and names for all products?\n### Response (TSQL):",
    "sql": "SELECT product_id ,  product_type_code ,  product_name FROM Products",
    "dsql": "PROJECT product_id, product_type_code, product_name FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the price for the product with name Monitor?\n### Response (TSQL):",
    "sql": "SELECT product_price FROM Products WHERE product_name  =  \"Monitor\"",
    "dsql": "PROJECT product_price FROM SELECT WHERE product_name = \"Monitor\" FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Give the price of the Monitor product.\n### Response (TSQL):",
    "sql": "SELECT product_price FROM Products WHERE product_name  =  \"Monitor\"",
    "dsql": "PROJECT product_price FROM SELECT WHERE product_name = \"Monitor\" FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show the minimum, average, maximum price for all products.\n### Response (TSQL):",
    "sql": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
    "dsql": "PROJECT MIN(product_price), AVG(product_price), MAX(product_price) FROM AGGREGATE MAX(product_price), MIN(product_price), AVG(product_price) FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the minimum, average, and maximum prices across all products?\n### Response (TSQL):",
    "sql": "SELECT min(product_price) ,  avg(product_price) ,  max(product_price) FROM Products",
    "dsql": "PROJECT MIN(product_price), AVG(product_price), MAX(product_price) FROM AGGREGATE MAX(product_price), MIN(product_price), AVG(product_price) FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the average price for products with type Clothes?\n### Response (TSQL):",
    "sql": "SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Clothes\"",
    "dsql": "PROJECT AVG(product_price) FROM AGGREGATE AVG(product_price) FROM SELECT WHERE product_type_code = \"Clothes\" FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Return the average price of Clothes.\n### Response (TSQL):",
    "sql": "SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Clothes\"",
    "dsql": "PROJECT AVG(product_price) FROM AGGREGATE AVG(product_price) FROM SELECT WHERE product_type_code = \"Clothes\" FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: How many hardware type products do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE product_type_code = \"Hardware\" FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Count the number of products of the type Hardware.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Products WHERE product_type_code  =  \"Hardware\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE product_type_code = \"Hardware\" FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show all product names with price higher than the average.\n### Response (TSQL):",
    "sql": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)",
    "dsql": "PROJECT product_name FROM SELECT WHERE product_price > PROJECT AVG(product_price) FROM AGGREGATE AVG(product_price) FROM Products FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the names of products that have a price above the average for all products.\n### Response (TSQL):",
    "sql": "SELECT product_name FROM Products WHERE product_price  >  (SELECT avg(product_price) FROM Products)",
    "dsql": "PROJECT product_name FROM SELECT WHERE product_price > PROJECT AVG(product_price) FROM AGGREGATE AVG(product_price) FROM Products FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show all hardware product names with price higher than the average price of hardware type products.\n### Response (TSQL):",
    "sql": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")",
    "dsql": "PROJECT product_name FROM SELECT WHERE product_type_code = \"Hardware\" AND product_price > PROJECT AVG(product_price) FROM AGGREGATE AVG(product_price) FROM SELECT WHERE product_type_code = \"Hardware\" FROM Products FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the names of Hardware product with prices above the average price of Hardware products.\n### Response (TSQL):",
    "sql": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" AND product_price  >  (SELECT avg(product_price) FROM Products WHERE product_type_code  =  \"Hardware\")",
    "dsql": "PROJECT product_name FROM SELECT WHERE product_type_code = \"Hardware\" AND product_price > PROJECT AVG(product_price) FROM AGGREGATE AVG(product_price) FROM SELECT WHERE product_type_code = \"Hardware\" FROM Products FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the name of the most expensive product with type Clothes?\n### Response (TSQL):",
    "sql": "SELECT product_name FROM Products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC product_price FROM PROJECT product_name FROM SELECT WHERE product_type_code = \"Clothes\" FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Give the name of the most expensive Clothes product.\n### Response (TSQL):",
    "sql": "SELECT product_name FROM Products WHERE product_type_code  =  \"Clothes\" ORDER BY product_price DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC product_price FROM PROJECT product_name FROM SELECT WHERE product_type_code = \"Clothes\" FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the product id and product name for the cheapest Hardware type product?\n### Response (TSQL):",
    "sql": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC product_price FROM PROJECT product_id, product_name FROM SELECT WHERE product_type_code = \"Hardware\" FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Give the id and name of the cheapest Hardware product.\n### Response (TSQL):",
    "sql": "SELECT product_id ,  product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC product_price FROM PROJECT product_id, product_name FROM SELECT WHERE product_type_code = \"Hardware\" FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: List all product names in descending order of price.\n### Response (TSQL):",
    "sql": "SELECT product_name FROM Products ORDER BY product_price DESC",
    "dsql": "ORDER BY DESC product_price FROM PROJECT product_name FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the names of the products, sorted by descending price?\n### Response (TSQL):",
    "sql": "SELECT product_name FROM Products ORDER BY product_price DESC",
    "dsql": "ORDER BY DESC product_price FROM PROJECT product_name FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show all hardware type products in ascending order of price.\n### Response (TSQL):",
    "sql": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC",
    "dsql": "ORDER BY ASC product_price FROM PROJECT product_name FROM SELECT WHERE product_type_code = \"Hardware\" FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the names of all Hardware products, sorted by price ascending?\n### Response (TSQL):",
    "sql": "SELECT product_name FROM Products WHERE product_type_code  =  \"Hardware\" ORDER BY product_price ASC",
    "dsql": "ORDER BY ASC product_price FROM PROJECT product_name FROM SELECT WHERE product_type_code = \"Hardware\" FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: List all product type codes and the number of products in each type.\n### Response (TSQL):",
    "sql": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
    "dsql": "PROJECT product_type_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY product_type_code FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: How many products are there for each product type?\n### Response (TSQL):",
    "sql": "SELECT product_type_code ,  count(*) FROM Products GROUP BY product_type_code",
    "dsql": "PROJECT product_type_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY product_type_code FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show all product type codes and the average price for each type.\n### Response (TSQL):",
    "sql": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
    "dsql": "PROJECT product_type_code, AVG(product_price) FROM AGGREGATE COUNT(*), AVG(product_price) GROUP BY product_type_code FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the average price of products for each product type?\n### Response (TSQL):",
    "sql": "SELECT product_type_code ,  avg(product_price) FROM Products GROUP BY product_type_code",
    "dsql": "PROJECT product_type_code, AVG(product_price) FROM AGGREGATE COUNT(*), AVG(product_price) GROUP BY product_type_code FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the product type code with at least two products?\n### Response (TSQL):",
    "sql": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2",
    "dsql": "PROJECT product_type_code FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY product_type_code FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Give the product type codes of product types that have two or more products.\n### Response (TSQL):",
    "sql": "SELECT product_type_code FROM Products GROUP BY product_type_code HAVING count(*)  >=  2",
    "dsql": "PROJECT product_type_code FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY product_type_code FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the product type code with most number of products?\n### Response (TSQL):",
    "sql": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT product_type_code FROM AGGREGATE COUNT(*) GROUP BY product_type_code FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the most frequent product type code?\n### Response (TSQL):",
    "sql": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT product_type_code FROM AGGREGATE COUNT(*) GROUP BY product_type_code FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: How many customers do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Customers",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Count the number of customers.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Customers",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show all customer ids and customer names.\n### Response (TSQL):",
    "sql": "SELECT customer_id ,  customer_name FROM Customers",
    "dsql": "PROJECT customer_id, customer_name FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the ids and names of all customers?\n### Response (TSQL):",
    "sql": "SELECT customer_id ,  customer_name FROM Customers",
    "dsql": "PROJECT customer_id, customer_name FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the customer address, customer phone, and customer email for Jeromy?\n### Response (TSQL):",
    "sql": "SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  \"Jeromy\"",
    "dsql": "PROJECT customer_address, customer_phone, customer_email FROM SELECT WHERE customer_name = \"Jeromy\" FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Give the address, phone, and email for customers with the name Jeromy.\n### Response (TSQL):",
    "sql": "SELECT customer_address ,  customer_phone ,  customer_email FROM Customers WHERE customer_name  =  \"Jeromy\"",
    "dsql": "PROJECT customer_address, customer_phone, customer_email FROM SELECT WHERE customer_name = \"Jeromy\" FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show all payment method codes and the number of customers in each code.\n### Response (TSQL):",
    "sql": "SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code",
    "dsql": "PROJECT payment_method_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY payment_method_code FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: How many customers use each payment method?\n### Response (TSQL):",
    "sql": "SELECT payment_method_code ,  count(*) FROM Customers GROUP BY payment_method_code",
    "dsql": "PROJECT payment_method_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY payment_method_code FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the payment method code used by most number of customers?\n### Response (TSQL):",
    "sql": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT payment_method_code FROM AGGREGATE COUNT(*) GROUP BY payment_method_code FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Give the code of the payment method that is most commonly used.\n### Response (TSQL):",
    "sql": "SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT payment_method_code FROM AGGREGATE COUNT(*) GROUP BY payment_method_code FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show all customer names with the  payment method code used by least number of customers.\n### Response (TSQL):",
    "sql": "SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)",
    "dsql": "PROJECT customer_name FROM SELECT WHERE payment_method_code = LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT payment_method_code FROM AGGREGATE COUNT(*) GROUP BY payment_method_code FROM Customers FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the names of customers who use the least common payment method?\n### Response (TSQL):",
    "sql": "SELECT customer_name FROM Customers WHERE payment_method_code  =  ( SELECT payment_method_code FROM Customers GROUP BY payment_method_code ORDER BY count(*) ASC LIMIT 1)",
    "dsql": "PROJECT customer_name FROM SELECT WHERE payment_method_code = LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT payment_method_code FROM AGGREGATE COUNT(*) GROUP BY payment_method_code FROM Customers FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the payment method and customer number for customer named Jeromy?\n### Response (TSQL):",
    "sql": "SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\"",
    "dsql": "PROJECT payment_method_code, customer_number FROM SELECT WHERE customer_name = \"Jeromy\" FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Give the payment method code and customer number corresponding to the customer named Jeromy.\n### Response (TSQL):",
    "sql": "SELECT payment_method_code ,  customer_number FROM Customers WHERE customer_name  =  \"Jeromy\"",
    "dsql": "PROJECT payment_method_code, customer_number FROM SELECT WHERE customer_name = \"Jeromy\" FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the distinct payment methods used by customers?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT payment_method_code FROM Customers",
    "dsql": "PROJECT DISTINCT payment_method_code FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Give the different payment method codes that customers use.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT payment_method_code FROM Customers",
    "dsql": "PROJECT DISTINCT payment_method_code FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show the id and the product type for all products, order by product name.\n### Response (TSQL):",
    "sql": "SELECT product_id ,  product_type_code FROM Products ORDER BY product_name",
    "dsql": "ORDER BY product_name FROM PROJECT product_id, product_type_code FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the ids and product types for all products, sorted alphabetically by product name?\n### Response (TSQL):",
    "sql": "SELECT product_id ,  product_type_code FROM Products ORDER BY product_name",
    "dsql": "ORDER BY product_name FROM PROJECT product_id, product_type_code FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the product type with least number of products?\n### Response (TSQL):",
    "sql": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT product_type_code FROM AGGREGATE COUNT(*) GROUP BY product_type_code FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the code of the product type that is least common?\n### Response (TSQL):",
    "sql": "SELECT product_type_code FROM Products GROUP BY product_type_code ORDER BY count(*) ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT product_type_code FROM AGGREGATE COUNT(*) GROUP BY product_type_code FROM Products "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: How many customer orders do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Customer_orders",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Customer_orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Count the number of customer orders.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Customer_orders",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Customer_orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show the order ids, order dates, and order status codes for all orders by customer Jeromy.\n### Response (TSQL):",
    "sql": "SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\"",
    "dsql": "PROJECT order_id, order_date, order_status_code FROM SELECT WHERE T2.customer_name = \"Jeromy\" FROM JOIN AS T1 FROM Customer_orders WITH AS T2 FROM Customers ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What were the ids, dates, and status codes for orders made by Jeromy?\n### Response (TSQL):",
    "sql": "SELECT order_id ,  order_date ,  order_status_code FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_name  =  \"Jeromy\"",
    "dsql": "PROJECT order_id, order_date, order_status_code FROM SELECT WHERE T2.customer_name = \"Jeromy\" FROM JOIN AS T1 FROM Customer_orders WITH AS T2 FROM Customers ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show all customer names, ids and the number of orders by each customer.\n### Response (TSQL):",
    "sql": "SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
    "dsql": "PROJECT T2.customer_name, T1.customer_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.customer_id FROM JOIN AS T1 FROM Customer_orders WITH AS T2 FROM Customers ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the names, ids, and number of orders made for each customer?\n### Response (TSQL):",
    "sql": "SELECT T2.customer_name ,  T1.customer_id ,  count(*) FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id",
    "dsql": "PROJECT T2.customer_name, T1.customer_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.customer_id FROM JOIN AS T1 FROM Customer_orders WITH AS T2 FROM Customers ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the customer id, name, phone, and email for the customer with most orders?\n### Response (TSQL):",
    "sql": "SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.customer_id, T2.customer_name, T2.customer_phone, T2.customer_email FROM AGGREGATE COUNT(*) GROUP BY T1.customer_id FROM JOIN AS T1 FROM Customer_orders WITH AS T2 FROM Customers ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Give the id, name, phone, and email corresponding to the customer who made the most orders.\n### Response (TSQL):",
    "sql": "SELECT T1.customer_id ,  T2.customer_name ,  T2.customer_phone ,  T2.customer_email FROM Customer_orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.customer_id, T2.customer_name, T2.customer_phone, T2.customer_email FROM AGGREGATE COUNT(*) GROUP BY T1.customer_id FROM JOIN AS T1 FROM Customer_orders WITH AS T2 FROM Customers ON T1.customer_id = T2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show all order status and the number of orders in each status.\n### Response (TSQL):",
    "sql": "SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code",
    "dsql": "PROJECT order_status_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY order_status_code FROM Customer_orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: How many orders have each order status code?\n### Response (TSQL):",
    "sql": "SELECT order_status_code ,  count(*) FROM Customer_orders GROUP BY order_status_code",
    "dsql": "PROJECT order_status_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY order_status_code FROM Customer_orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the order status code that is most common?\n### Response (TSQL):",
    "sql": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT order_status_code FROM AGGREGATE COUNT(*) GROUP BY order_status_code FROM Customer_orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Give the order status code that is most frequent across customer orders.\n### Response (TSQL):",
    "sql": "SELECT order_status_code FROM Customer_orders GROUP BY order_status_code ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT order_status_code FROM AGGREGATE COUNT(*) GROUP BY order_status_code FROM Customer_orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: How many customers do not have an order?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE customer_id NOT IN PROJECT customer_id FROM Customer_orders FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Count the number of customers who have not made an order.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN  ( SELECT customer_id FROM Customer_orders)",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE customer_id NOT IN PROJECT customer_id FROM Customer_orders FROM Customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show all product names without an order.\n### Response (TSQL):",
    "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
    "dsql": "EXCEPT PROJECT product_name FROM Products WITH PROJECT T1.product_name FROM JOIN AS t1 FROM Products WITH AS T2 FROM Order_items ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the names of products that have not been ordered?\n### Response (TSQL):",
    "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS t1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id",
    "dsql": "EXCEPT PROJECT product_name FROM Products WITH PROJECT T1.product_name FROM JOIN AS t1 FROM Products WITH AS T2 FROM Order_items ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: How many products named Monitor have been ordered?\n### Response (TSQL):",
    "sql": "SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  \"Monitor\"",
    "dsql": "PROJECT SUM(order_quantity) FROM AGGREGATE SUM(order_quantity) FROM SELECT WHERE T2.product_name = \"Monitor\" FROM JOIN AS T1 FROM Order_items WITH AS T2 FROM Products ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What is the total number of Monitor products that have been ordered?\n### Response (TSQL):",
    "sql": "SELECT sum(order_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id WHERE T2.product_name  =  \"Monitor\"",
    "dsql": "PROJECT SUM(order_quantity) FROM AGGREGATE SUM(order_quantity) FROM SELECT WHERE T2.product_name = \"Monitor\" FROM JOIN AS T1 FROM Order_items WITH AS T2 FROM Products ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: How many customers have ordered the product named Monitor?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
    "dsql": "PROJECT COUNT(DISTINCT T3.customer_id) FROM AGGREGATE COUNT(DISTINCT T3.customer_id) FROM SELECT WHERE T2.product_name = \"Monitor\" FROM JOIN AS T1 FROM Order_items WITH JOIN AS T2 FROM Products WITH AS T1 FROM Order_items ON T3.order_id = T1.order_id ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Count the number of different customers who have bought a Monitor Product.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T3.customer_id) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Customer_orders AS T3 ON T3.order_id  =  T1.order_id WHERE T2.product_name  =  \"Monitor\"",
    "dsql": "PROJECT COUNT(DISTINCT T3.customer_id) FROM AGGREGATE COUNT(DISTINCT T3.customer_id) FROM SELECT WHERE T2.product_name = \"Monitor\" FROM JOIN AS T1 FROM Order_items WITH JOIN AS T2 FROM Products WITH AS T1 FROM Order_items ON T3.order_id = T1.order_id ON T1.product_id = T2.product_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: How many customers have an order?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
    "dsql": "PROJECT COUNT(DISTINCT customer_id) FROM AGGREGATE COUNT(DISTINCT customer_id) FROM Customer_orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Count the number of differnt customers who have made an order.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT customer_id) FROM Customer_orders",
    "dsql": "PROJECT COUNT(DISTINCT customer_id) FROM AGGREGATE COUNT(DISTINCT customer_id) FROM Customer_orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show all customer ids without an order.\n### Response (TSQL):",
    "sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders",
    "dsql": "EXCEPT PROJECT customer_id FROM Customers WITH PROJECT customer_id FROM Customer_orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the ids of customers who have not made an order?\n### Response (TSQL):",
    "sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Customer_orders",
    "dsql": "EXCEPT PROJECT customer_id FROM Customers WITH PROJECT customer_id FROM Customer_orders "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: Show all the order dates and ids of the orders with quantity of any product larger than 6 or with more than 3 products.\n### Response (TSQL):",
    "sql": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;",
    "dsql": "UNION PROJECT T1.order_date, T1.order_id FROM SELECT WHERE T2.order_quantity > 6 FROM JOIN AS T1 FROM Customer_Orders WITH AS T2 FROM Order_items ON T1.order_id = T2.order_id WITH PROJECT T1.order_date, T1.order_id FROM SELECT WHERE COUNT(*) > 3 FROM AGGREGATE COUNT(*) GROUP BY T1.order_id FROM JOIN AS T1 FROM Customer_Orders WITH AS T2 FROM Order_items ON T1.order_id = T2.order_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Products ( product_id number, product_type_code text, product_name text, product_price number, PRIMARY KEY(product_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Customers ( customer_id number, address_id number, payment_method_code text, customer_number text, customer_name text, customer_address text, customer_phone text, customer_email text, PRIMARY KEY(customer_id)); CREATE TABLE Customer_Orders ( order_id number, customer_id number, order_date time, order_status_code text, PRIMARY KEY(order_id), FOREIGN KEY(customer_id) REFERENCES Customers (customer_id)); CREATE TABLE Order_Items ( order_item_id number, order_id number, product_id number, order_quantity text, FOREIGN KEY(product_id) REFERENCES Products (product_id), FOREIGN KEY(order_id) REFERENCES Customer_Orders (order_id)); \n### Question: What are the order ids and corresponding order dates for orders with a quantity greater than 6 or consisting of more than 3 products?\n### Response (TSQL):",
    "sql": "SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id WHERE T2.order_quantity  >  6 UNION SELECT T1.order_date ,  T1.order_id FROM Customer_Orders AS T1 JOIN Order_items AS T2 ON T1.order_id  =  T2.order_id GROUP BY T1.order_id HAVING count(*)  >  3;",
    "dsql": "UNION PROJECT T1.order_date, T1.order_id FROM SELECT WHERE T2.order_quantity > 6 FROM JOIN AS T1 FROM Customer_Orders WITH AS T2 FROM Order_items ON T1.order_id = T2.order_id WITH PROJECT T1.order_date, T1.order_id FROM SELECT WHERE COUNT(*) > 3 FROM AGGREGATE COUNT(*) GROUP BY T1.order_id FROM JOIN AS T1 FROM Customer_Orders WITH AS T2 FROM Order_items ON T1.order_id = T2.order_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: How many buildings are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM building",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Count the number of buildings.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM building",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: List the names of buildings in ascending order of number of stories.\n### Response (TSQL):",
    "sql": "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
    "dsql": "ORDER BY ASC Number_of_Stories FROM PROJECT Name FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: What is the list of building names, sorted by the number of stories of each building in ascending order?\n### Response (TSQL):",
    "sql": "SELECT Name FROM building ORDER BY Number_of_Stories ASC",
    "dsql": "ORDER BY ASC Number_of_Stories FROM PROJECT Name FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: List the addresses of buildings in descending order of building completion year.\n### Response (TSQL):",
    "sql": "SELECT Address FROM building ORDER BY Completed_Year DESC",
    "dsql": "ORDER BY DESC Completed_Year FROM PROJECT Address FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Sort the buildings in descending order of building completion year, and return the building addresses.\n### Response (TSQL):",
    "sql": "SELECT Address FROM building ORDER BY Completed_Year DESC",
    "dsql": "ORDER BY DESC Completed_Year FROM PROJECT Address FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: What is the maximum number of stories of buildings not completed in 1980?\n### Response (TSQL):",
    "sql": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\"",
    "dsql": "PROJECT MAX(Number_of_Stories) FROM AGGREGATE MAX(Number_of_Stories) FROM SELECT WHERE Completed_Year <> \"1980\" FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Among the buildings not completed in 1980, what is the maximum number of stories?\n### Response (TSQL):",
    "sql": "SELECT max(Number_of_Stories) FROM building WHERE Completed_Year != \"1980\"",
    "dsql": "PROJECT MAX(Number_of_Stories) FROM AGGREGATE MAX(Number_of_Stories) FROM SELECT WHERE Completed_Year <> \"1980\" FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: What is the average population for all regions?\n### Response (TSQL):",
    "sql": "SELECT avg(Population) FROM region",
    "dsql": "PROJECT AVG(Population) FROM AGGREGATE AVG(Population) FROM region "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Compute the average population of a region.\n### Response (TSQL):",
    "sql": "SELECT avg(Population) FROM region",
    "dsql": "PROJECT AVG(Population) FROM AGGREGATE AVG(Population) FROM region "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: What are the names of regions in ascending alphabetical order?\n### Response (TSQL):",
    "sql": "SELECT Name FROM region ORDER BY Name ASC",
    "dsql": "ORDER BY ASC Name FROM PROJECT Name FROM region "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: List the names of regions in alphabetical order.\n### Response (TSQL):",
    "sql": "SELECT Name FROM region ORDER BY Name ASC",
    "dsql": "ORDER BY ASC Name FROM PROJECT Name FROM region "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: What are the capitals of the regions with area bigger than 10000?\n### Response (TSQL):",
    "sql": "SELECT Capital FROM region WHERE Area  >  10000",
    "dsql": "PROJECT Capital FROM SELECT WHERE Area > 10000 FROM region "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Give me the capitals of the regions whose area is larger than 10000.\n### Response (TSQL):",
    "sql": "SELECT Capital FROM region WHERE Area  >  10000",
    "dsql": "PROJECT Capital FROM SELECT WHERE Area > 10000 FROM region "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: List the capital of the region with the largest population.\n### Response (TSQL):",
    "sql": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC Population FROM PROJECT Capital FROM region "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Which region has the largest population? Give me the capital of the region.\n### Response (TSQL):",
    "sql": "SELECT Capital FROM region ORDER BY Population DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC Population FROM PROJECT Capital FROM region "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: List the names of the regions with the top 5 largest areas.\n### Response (TSQL):",
    "sql": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
    "dsql": "LIMIT 5 FROM ORDER BY DESC Area FROM PROJECT Name FROM region "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: What are the names of the 5 largest regions in terms of area?\n### Response (TSQL):",
    "sql": "SELECT Name FROM region ORDER BY Area DESC LIMIT 5",
    "dsql": "LIMIT 5 FROM ORDER BY DESC Area FROM PROJECT Name FROM region "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Show the names of buildings and the names of regions they are in.\n### Response (TSQL):",
    "sql": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
    "dsql": "PROJECT T1.Name, T2.Name FROM JOIN AS T1 FROM building WITH AS T2 FROM region ON T1.Region_ID = T2.Region_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: For each building, return the name of the building and the name of the region it belongs to.\n### Response (TSQL):",
    "sql": "SELECT T1.Name ,  T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
    "dsql": "PROJECT T1.Name, T2.Name FROM JOIN AS T1 FROM building WITH AS T2 FROM region ON T1.Region_ID = T2.Region_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Show the names of regions that have more than one building.\n### Response (TSQL):",
    "sql": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1",
    "dsql": "PROJECT T2.Name FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T1.Region_ID FROM JOIN AS T1 FROM building WITH AS T2 FROM region ON T1.Region_ID = T2.Region_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Which regions have more than one building? Give me the names of the regions.\n### Response (TSQL):",
    "sql": "SELECT T2.Name FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID HAVING COUNT(*)  >  1",
    "dsql": "PROJECT T2.Name FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T1.Region_ID FROM JOIN AS T1 FROM building WITH AS T2 FROM region ON T1.Region_ID = T2.Region_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Show the capital of the region that has the most buildings.\n### Response (TSQL):",
    "sql": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.capital FROM AGGREGATE COUNT(*) GROUP BY T1.Region_ID FROM JOIN AS T1 FROM building WITH AS T2 FROM region ON T1.Region_ID = T2.Region_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Which region has the largest number of buildings? Show me the capital of the region.\n### Response (TSQL):",
    "sql": "SELECT T2.capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID GROUP BY T1.Region_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.capital FROM AGGREGATE COUNT(*) GROUP BY T1.Region_ID FROM JOIN AS T1 FROM building WITH AS T2 FROM region ON T1.Region_ID = T2.Region_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Show addresses of buildings and the capitals of regions they are in.\n### Response (TSQL):",
    "sql": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
    "dsql": "PROJECT T1.Address, T2.Capital FROM JOIN AS T1 FROM building WITH AS T2 FROM region ON T1.Region_ID = T2.Region_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: For each building, return the address of the building and the name of the region it belongs to.\n### Response (TSQL):",
    "sql": "SELECT T1.Address ,  T2.Capital FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID",
    "dsql": "PROJECT T1.Address, T2.Capital FROM JOIN AS T1 FROM building WITH AS T2 FROM region ON T1.Region_ID = T2.Region_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Show the number of stories of buildings in the region with name \"Abruzzo\".\n### Response (TSQL):",
    "sql": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
    "dsql": "PROJECT T1.Number_of_Stories FROM SELECT WHERE T2.Name = \"Abruzzo\" FROM JOIN AS T1 FROM building WITH AS T2 FROM region ON T1.Region_ID = T2.Region_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Return the number of stories for each building in the region named \"Abruzzo\".\n### Response (TSQL):",
    "sql": "SELECT T1.Number_of_Stories FROM building AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Name  =  \"Abruzzo\"",
    "dsql": "PROJECT T1.Number_of_Stories FROM SELECT WHERE T2.Name = \"Abruzzo\" FROM JOIN AS T1 FROM building WITH AS T2 FROM region ON T1.Region_ID = T2.Region_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Please show each completion year and the number of buildings completed in that year.\n### Response (TSQL):",
    "sql": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year",
    "dsql": "PROJECT Completed_Year, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Completed_Year FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: For completion year, return the year and the number of buildings completed.\n### Response (TSQL):",
    "sql": "SELECT Completed_Year ,  COUNT(*) FROM building GROUP BY Completed_Year",
    "dsql": "PROJECT Completed_Year, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Completed_Year FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: List the year in which the most buildings are completed.\n### Response (TSQL):",
    "sql": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Completed_Year FROM AGGREGATE COUNT(*) GROUP BY Completed_Year FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: In which year did the most building constructions complete?\n### Response (TSQL):",
    "sql": "SELECT Completed_Year FROM building GROUP BY Completed_Year ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Completed_Year FROM AGGREGATE COUNT(*) GROUP BY Completed_Year FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: List the names of regions that do not have any buildings.\n### Response (TSQL):",
    "sql": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
    "dsql": "PROJECT Name FROM SELECT WHERE Region_ID NOT IN PROJECT Region_ID FROM building FROM region "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: What are the names of regions in which there are no buildings?\n### Response (TSQL):",
    "sql": "SELECT Name FROM region WHERE Region_ID NOT IN (SELECT Region_ID FROM building)",
    "dsql": "PROJECT Name FROM SELECT WHERE Region_ID NOT IN PROJECT Region_ID FROM building FROM region "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Show the completed years shared by buildings with more than 20 stories and buildings with less than 15 stories.\n### Response (TSQL):",
    "sql": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15",
    "dsql": "INTERSECT PROJECT Completed_Year FROM SELECT WHERE Number_of_Stories > 20 FROM building WITH PROJECT Completed_Year FROM SELECT WHERE Number_of_Stories < 15 FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: In which years did both buildings with more than 20 stories and buildings with less than 15 stories were completed?\n### Response (TSQL):",
    "sql": "SELECT Completed_Year FROM building WHERE Number_of_Stories  >  20 INTERSECT SELECT Completed_Year FROM building WHERE Number_of_Stories  <  15",
    "dsql": "INTERSECT PROJECT Completed_Year FROM SELECT WHERE Number_of_Stories > 20 FROM building WITH PROJECT Completed_Year FROM SELECT WHERE Number_of_Stories < 15 FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Show the distinct addresses of buildings.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT Address FROM building",
    "dsql": "PROJECT DISTINCT Address FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Give me a list of distinct building addresses.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT Address FROM building",
    "dsql": "PROJECT DISTINCT Address FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Show the completed years of buildings in descending order of the number of stories.\n### Response (TSQL):",
    "sql": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
    "dsql": "ORDER BY DESC Number_of_Stories FROM PROJECT Completed_Year FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE building ( Building_ID number, Region_ID number, Name text, Address text, Number_of_Stories number, Completed_Year number, PRIMARY KEY(Building_ID), FOREIGN KEY(Region_ID) REFERENCES region (Region_ID)); CREATE TABLE region ( Region_ID number, Name text, Capital text, Area number, Population number, PRIMARY KEY(Region_ID)); \n### Question: Sort buildings in descending order of the number of stories, and return their completion years.\n### Response (TSQL):",
    "sql": "SELECT Completed_Year FROM building ORDER BY Number_of_Stories DESC",
    "dsql": "ORDER BY DESC Number_of_Stories FROM PROJECT Completed_Year FROM building "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: List details of all the channel in alphabetical order .\n### Response (TSQL):",
    "sql": "select channel_details from channels order by channel_details",
    "dsql": "ORDER BY channel_details FROM PROJECT channel_details FROM channels "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: What is the list of channel details ordered alphabetically ?\n### Response (TSQL):",
    "sql": "select channel_details from channels order by channel_details",
    "dsql": "ORDER BY channel_details FROM PROJECT channel_details FROM channels "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: How many services are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM services",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM services "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Count the number of services.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM services",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM services "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: What is the most common analytical layer type code?\n### Response (TSQL):",
    "sql": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT analytical_layer_type_code FROM AGGREGATE COUNT(*) GROUP BY analytical_layer_type_code FROM analytical_layer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find the analytical layer type code that appears most often.\n### Response (TSQL):",
    "sql": "SELECT analytical_layer_type_code FROM analytical_layer GROUP BY analytical_layer_type_code ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT analytical_layer_type_code FROM AGGREGATE COUNT(*) GROUP BY analytical_layer_type_code FROM analytical_layer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find all the services that has been used by the customer with details \"Hardy Kutch\".\n### Response (TSQL):",
    "sql": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\"",
    "dsql": "PROJECT t3.service_details FROM SELECT WHERE t1.customer_details = \"Hardy Kutch\" FROM JOIN AS t1 FROM customers WITH JOIN AS t2 FROM customers_and_services WITH AS t3 FROM services ON t2.service_id = t3.service_id ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Which services were used by the customer with details \"Hardy Kutch\"? Give me the service details.\n### Response (TSQL):",
    "sql": "SELECT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t1.customer_details  =  \"Hardy Kutch\"",
    "dsql": "PROJECT t3.service_details FROM SELECT WHERE t1.customer_details = \"Hardy Kutch\" FROM JOIN AS t1 FROM customers WITH JOIN AS t2 FROM customers_and_services WITH AS t3 FROM services ON t2.service_id = t3.service_id ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find the details of the services that have been used by more than 3 times .\n### Response (TSQL):",
    "sql": "select t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id group by t1.service_details having count(*)  >  3",
    "dsql": "PROJECT t1.service_details FROM SELECT WHERE COUNT(*) > 3 FROM AGGREGATE COUNT(*) GROUP BY t1.service_details FROM JOIN AS t1 FROM services WITH AS t2 FROM customers_and_services ON t1.service_id = t2.service_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Which services were used by customers by more than 3 times? Give me the service details.\n### Response (TSQL):",
    "sql": "SELECT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_details HAVING count(*)  >  3",
    "dsql": "PROJECT t1.service_details FROM SELECT WHERE COUNT(*) > 3 FROM AGGREGATE COUNT(*) GROUP BY t1.service_details FROM JOIN AS t1 FROM services WITH AS t2 FROM customers_and_services ON t1.service_id = t2.service_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find the details of the customer who has used services the most times.\n### Response (TSQL):",
    "sql": "SELECT t1.customer_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_details ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t1.customer_details FROM AGGREGATE COUNT(*) GROUP BY t1.customer_details FROM JOIN AS t1 FROM customers WITH AS t2 FROM customers_and_services ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: return the details of the customer with largest count of used services.\n### Response (TSQL):",
    "sql": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t1.customer_details FROM AGGREGATE COUNT(*) GROUP BY t1.customer_details FROM JOIN AS t1 FROM customers WITH AS t2 FROM customers_and_services ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find the name of the customer who has used the most types of services .\n### Response (TSQL):",
    "sql": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t1.customer_details FROM AGGREGATE COUNT(*) GROUP BY t1.customer_details FROM JOIN AS t1 FROM customers WITH AS t2 FROM customers_and_services ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Which customer has used the most types of services ? Give me the customer details .\n### Response (TSQL):",
    "sql": "select t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id group by t1.customer_details order by count(*) desc limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t1.customer_details FROM AGGREGATE COUNT(*) GROUP BY t1.customer_details FROM JOIN AS t1 FROM customers WITH AS t2 FROM customers_and_services ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find the details of the customer who has never used any services .\n### Response (TSQL):",
    "sql": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)",
    "dsql": "PROJECT customer_details FROM SELECT WHERE customer_id NOT IN PROJECT customer_id FROM customers_and_services FROM customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Which customers never used any services ? Give me the customer details .\n### Response (TSQL):",
    "sql": "select customer_details from customers where customer_id not in (select customer_id from customers_and_services)",
    "dsql": "PROJECT customer_details FROM SELECT WHERE customer_id NOT IN PROJECT customer_id FROM customers_and_services FROM customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find the details of the customers who have used the least-used service .\n### Response (TSQL):",
    "sql": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)",
    "dsql": "PROJECT DISTINCT t1.customer_details FROM SELECT WHERE t2.service_id = LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT service_id FROM AGGREGATE COUNT(*) GROUP BY service_id FROM services FROM JOIN AS t1 FROM customers WITH AS t2 FROM customers_and_services ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Which customers used the least commonly-used service ? Give me the distinct customer details .\n### Response (TSQL):",
    "sql": "select distinct t1.customer_details from customers as t1 join customers_and_services as t2 on t1.customer_id  =  t2.customer_id where t2.service_id  =  (select service_id from services group by service_id order by count(*) asc limit 1)",
    "dsql": "PROJECT DISTINCT t1.customer_details FROM SELECT WHERE t2.service_id = LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT service_id FROM AGGREGATE COUNT(*) GROUP BY service_id FROM services FROM JOIN AS t1 FROM customers WITH AS t2 FROM customers_and_services ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: How many distinct customer and services details are there?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services",
    "dsql": "PROJECT COUNT(DISTINCT customers_and_services_details) FROM AGGREGATE COUNT(DISTINCT customers_and_services_details) FROM customers_and_services "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Count the total number of available customers and services details.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT customers_and_services_details) FROM customers_and_services",
    "dsql": "PROJECT COUNT(DISTINCT customers_and_services_details) FROM AGGREGATE COUNT(DISTINCT customers_and_services_details) FROM customers_and_services "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find all the customers whose name contains \"Kutch\".\n### Response (TSQL):",
    "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\"",
    "dsql": "PROJECT customer_details FROM SELECT WHERE customer_details LIKE \"%Kutch%\" FROM customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: What are the details of the customers who have \"Kutch\" in part of their details?\n### Response (TSQL):",
    "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Kutch%\"",
    "dsql": "PROJECT customer_details FROM SELECT WHERE customer_details LIKE \"%Kutch%\" FROM customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find the name of all the services which either have been used by customer \"Hardy Kutch\" or have been rated as \"good\" in one of the customer interactions.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\"",
    "dsql": "PROJECT DISTINCT t3.service_details FROM SELECT WHERE t1.customer_details = \"Hardy Kutch\" OR t4.services_and_channels_details = \"good\" FROM JOIN AS t1 FROM customers WITH JOIN AS t2 FROM customers_and_services WITH JOIN AS t3 FROM services WITH AS t4 FROM customer_interactions ON t3.service_id = t4.service_id ON t2.service_id = t3.service_id ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Which services are used by the customer \"Hardy Kutch\" or are rated as \"good\" in a customer interaction? Give me the service details.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" OR t4.services_and_channels_details  =  \"good\"",
    "dsql": "PROJECT DISTINCT t3.service_details FROM SELECT WHERE t1.customer_details = \"Hardy Kutch\" OR t4.services_and_channels_details = \"good\" FROM JOIN AS t1 FROM customers WITH JOIN AS t2 FROM customers_and_services WITH JOIN AS t3 FROM services WITH AS t4 FROM customer_interactions ON t3.service_id = t4.service_id ON t2.service_id = t3.service_id ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find the names of all the services which both have been used by customer \"Hardy Kutch\" and have been rated \"bad\" in one of the customer interactions.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\"",
    "dsql": "PROJECT DISTINCT t3.service_details FROM SELECT WHERE t1.customer_details = \"Hardy Kutch\" AND t4.services_and_channels_details = \"bad\" FROM JOIN AS t1 FROM customers WITH JOIN AS t2 FROM customers_and_services WITH JOIN AS t3 FROM services WITH AS t4 FROM customer_interactions ON t3.service_id = t4.service_id ON t2.service_id = t3.service_id ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Which services are both used by the customer \"Hardy Kutch\" and are rated as \"bad\" in a customer interaction? Give me the service details.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT t3.service_details FROM customers AS t1 JOIN customers_and_services AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id JOIN customer_interactions AS t4 ON t3.service_id  =  t4.service_id WHERE t1.customer_details  =  \"Hardy Kutch\" AND t4.services_and_channels_details  =  \"bad\"",
    "dsql": "PROJECT DISTINCT t3.service_details FROM SELECT WHERE t1.customer_details = \"Hardy Kutch\" AND t4.services_and_channels_details = \"bad\" FROM JOIN AS t1 FROM customers WITH JOIN AS t2 FROM customers_and_services WITH JOIN AS t3 FROM services WITH AS t4 FROM customer_interactions ON t3.service_id = t4.service_id ON t2.service_id = t3.service_id ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find details of all the services that have interacted with `` 15 ij '' for the the channel details.\n### Response (TSQL):",
    "sql": "select distinct t1.service_details from services as t1 join customer_interactions as t2 on t1.service_id  =  t2.service_id join channels as t3 on t2.channel_id  =  t3.channel_id where t3.channel_details  =  \"15 ij\"",
    "dsql": "PROJECT DISTINCT t1.service_details FROM SELECT WHERE t3.channel_details = \"15 ij\" FROM JOIN AS t1 FROM services WITH JOIN AS t2 FROM customer_interactions WITH AS t3 FROM channels ON t2.channel_id = t3.channel_id ON t1.service_id = t2.service_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Give me the details of all the services that have interacted with the channel with detail \"15 ij\".\n### Response (TSQL):",
    "sql": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customer_interactions AS t2 ON t1.service_id  =  t2.service_id JOIN channels AS t3 ON t2.channel_id  =  t3.channel_id WHERE t3.channel_details  =  \"15 ij\"",
    "dsql": "PROJECT DISTINCT t1.service_details FROM SELECT WHERE t3.channel_details = \"15 ij\" FROM JOIN AS t1 FROM services WITH JOIN AS t2 FROM customer_interactions WITH AS t3 FROM channels ON t2.channel_id = t3.channel_id ON t1.service_id = t2.service_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find all the details of the customers who have been involved in an interaction with status `` Stuck '' and service and channel detail `` bad '' .\n### Response (TSQL):",
    "sql": "select t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id where t2.status_code  =  \"stuck\" and services_and_channels_details  =  \"bad\"",
    "dsql": "PROJECT t1.customer_details FROM SELECT WHERE t2.status_code = \"stuck\" AND services_and_channels_details = \"bad\" FROM JOIN AS t1 FROM customers WITH AS t2 FROM customer_interactions ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Which customers have experienced status \"Stuck\" and service and channel detail \"bad\" in  an interaction? Give me the customer details.\n### Response (TSQL):",
    "sql": "SELECT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.status_code  =  \"Stuck\" AND services_and_channels_details  =  \"bad\"",
    "dsql": "PROJECT t1.customer_details FROM SELECT WHERE t2.status_code = \"Stuck\" AND services_and_channels_details = \"bad\" FROM JOIN AS t1 FROM customers WITH AS t2 FROM customer_interactions ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: How many integration platforms are successful?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE integration_platform_details = \"Success\" FROM integration_platform "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Count the number of integration platforms that have \"Success\" in the details.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM integration_platform WHERE integration_platform_details  =  \"Success\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE integration_platform_details = \"Success\" FROM integration_platform "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: List the details of all the customers who are associated with a failed integration platform .\n### Response (TSQL):",
    "sql": "select distinct t1.customer_details from customers as t1 join customer_interactions as t2 on t1.customer_id  =  t2.customer_id join integration_platform as t3 where t3.integration_platform_details  =  \"fail\"",
    "dsql": "PROJECT DISTINCT t1.customer_details FROM SELECT WHERE t3.integration_platform_details = \"fail\" FROM JOIN AS t1 FROM customers WITH AS t2 FROM customer_interactions ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Which customers have integration platform details \"Fail\" in interactions? Give me the customer details.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT t1.customer_details FROM customers AS t1 JOIN customer_interactions AS t2 ON t1.customer_id  =  t2.customer_id JOIN integration_platform AS t3 WHERE t3.integration_platform_details  =  \"Fail\"",
    "dsql": "PROJECT DISTINCT t1.customer_details FROM SELECT WHERE t3.integration_platform_details = \"Fail\" FROM JOIN AS t1 FROM customers WITH AS t2 FROM customer_interactions ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Which service ( s ) has never been used by any customer ? List their details .\n### Response (TSQL):",
    "sql": "select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id",
    "dsql": "EXCEPT PROJECT service_details FROM services WITH PROJECT t2.service_details FROM JOIN AS t1 FROM customers_and_services WITH AS t2 FROM services ON t1.service_id = t2.service_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find details of the services that no customer has ever used . Return the service details .\n### Response (TSQL):",
    "sql": "select service_details from services except select t2.service_details from customers_and_services as t1 join services as t2 on t1.service_id  =  t2.service_id",
    "dsql": "EXCEPT PROJECT service_details FROM services WITH PROJECT t2.service_details FROM JOIN AS t1 FROM customers_and_services WITH AS t2 FROM services ON t1.service_id = t2.service_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find all the layer type codes with their corresponding usage count.\n### Response (TSQL):",
    "sql": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code",
    "dsql": "PROJECT analytical_layer_type_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY analytical_layer_type_code FROM analytical_layer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: For each analytical layer, return the analytical layer type code and the number of times it was used.\n### Response (TSQL):",
    "sql": "SELECT analytical_layer_type_code ,  count(*) FROM analytical_layer GROUP BY analytical_layer_type_code",
    "dsql": "PROJECT analytical_layer_type_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY analytical_layer_type_code FROM analytical_layer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Find details of all the services that have been marked as `` unsatisfied '' in customers and services details .\n### Response (TSQL):",
    "sql": "select distinct t1.service_details from services as t1 join customers_and_services as t2 on t1.service_id  =  t2.service_id where t2.customers_and_services_details  =  \"unsatisfied\"",
    "dsql": "PROJECT DISTINCT t1.service_details FROM SELECT WHERE t2.customers_and_services_details = \"unsatisfied\" FROM JOIN AS t1 FROM services WITH AS t2 FROM customers_and_services ON t1.service_id = t2.service_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Services ( Service_ID number, Service_Details text, PRIMARY KEY(Service_ID)); CREATE TABLE Customers ( Customer_ID number, Customer_Details text, PRIMARY KEY(Customer_ID)); CREATE TABLE Channels ( Channel_ID number, Channel_Details text, PRIMARY KEY(Channel_ID)); CREATE TABLE Customers_and_Services ( Customers_and_Services_ID number, Customer_ID number, Service_ID number, Customers_and_Services_Details text, PRIMARY KEY(Customers_and_Services_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Customer_Interactions ( Customer_Interaction_ID number, Channel_ID number, Customer_ID number, Service_ID number, Status_Code text, Services_and_Channels_Details text, PRIMARY KEY(Customer_Interaction_ID), FOREIGN KEY(Customer_ID) REFERENCES Customers (Customer_ID), FOREIGN KEY(Channel_ID) REFERENCES Channels (Channel_ID), FOREIGN KEY(Service_ID) REFERENCES Services (Service_ID)); CREATE TABLE Integration_Platform ( Integration_Platform_ID number, Customer_Interaction_ID number, Integration_Platform_Details text, PRIMARY KEY(Integration_Platform_ID), FOREIGN KEY(Customer_Interaction_ID) REFERENCES Customer_Interactions (Customer_Interaction_ID)); CREATE TABLE Analytical_Layer ( Analytical_ID number, Customers_and_Services_ID text, Pattern_Recognition text, Analytical_Layer_Type_Code text, PRIMARY KEY(Analytical_ID), FOREIGN KEY(Customers_and_Services_ID) REFERENCES Customers_and_Services (Customers_and_Services_ID)); \n### Question: Which services have been rated as \"unsatisfied\" in customers and services details? Give me the service_details.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT t1.service_details FROM services AS t1 JOIN customers_and_services AS t2 ON t1.service_id  =  t2.service_id WHERE t2.customers_and_services_details  =  \"Unsatisfied\"",
    "dsql": "PROJECT DISTINCT t1.service_details FROM SELECT WHERE t2.customers_and_services_details = \"Unsatisfied\" FROM JOIN AS t1 FROM services WITH AS t2 FROM customers_and_services ON t1.service_id = t2.service_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: How many vehicles do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM vehicles",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Count the number of vehicles.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM vehicles",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show names for all vehicles in descending order of model year.\n### Response (TSQL):",
    "sql": "SELECT name FROM vehicles ORDER BY model_year DESC",
    "dsql": "ORDER BY DESC model_year FROM PROJECT name FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What are the names of all vehicles, ordered by model year descending?\n### Response (TSQL):",
    "sql": "SELECT name FROM vehicles ORDER BY model_year DESC",
    "dsql": "ORDER BY DESC model_year FROM PROJECT name FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: List all distinct types of powertrain of vehicles.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT type_of_powertrain FROM vehicles",
    "dsql": "PROJECT DISTINCT type_of_powertrain FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What are the different types of powertrains?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT type_of_powertrain FROM vehicles",
    "dsql": "PROJECT DISTINCT type_of_powertrain FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show name, type of powertrain, and annual fuel cost for all vehicles with model year 2013 or 2014.\n### Response (TSQL):",
    "sql": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014",
    "dsql": "PROJECT name, type_of_powertrain, annual_fuel_cost FROM SELECT WHERE model_year = 2013 OR model_year = 2014 FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What are the names, types of powertrains, and yearly fuel costs for vehicles with model years in either 2013 2014?\n### Response (TSQL):",
    "sql": "SELECT name ,  type_of_powertrain ,  annual_fuel_cost FROM vehicles WHERE model_year  =  2013 OR model_year  =  2014",
    "dsql": "PROJECT name, type_of_powertrain, annual_fuel_cost FROM SELECT WHERE model_year = 2013 OR model_year = 2014 FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show types of powertrain with vehicles both from 2014 and 2013.\n### Response (TSQL):",
    "sql": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013",
    "dsql": "INTERSECT PROJECT type_of_powertrain FROM SELECT WHERE model_year = 2014 FROM vehicles WITH PROJECT type_of_powertrain FROM SELECT WHERE model_year = 2013 FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What are the types of powertrains that have vehicles that were made in both 2013 and 2014?\n### Response (TSQL):",
    "sql": "SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2014 INTERSECT SELECT type_of_powertrain FROM vehicles WHERE model_year  =  2013",
    "dsql": "INTERSECT PROJECT type_of_powertrain FROM SELECT WHERE model_year = 2014 FROM vehicles WITH PROJECT type_of_powertrain FROM SELECT WHERE model_year = 2013 FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show all types of powertrain and the number of vehicles in each type.\n### Response (TSQL):",
    "sql": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
    "dsql": "PROJECT type_of_powertrain, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY type_of_powertrain FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: How many vehicles have each type of powertrain?\n### Response (TSQL):",
    "sql": "SELECT type_of_powertrain ,  count(*) FROM vehicles GROUP BY type_of_powertrain",
    "dsql": "PROJECT type_of_powertrain, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY type_of_powertrain FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What is the type of powertrain with most number of vehicles.\n### Response (TSQL):",
    "sql": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT type_of_powertrain FROM AGGREGATE COUNT(*) GROUP BY type_of_powertrain FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Which type of powertrain is most common?\n### Response (TSQL):",
    "sql": "SELECT type_of_powertrain FROM vehicles GROUP BY type_of_powertrain ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT type_of_powertrain FROM AGGREGATE COUNT(*) GROUP BY type_of_powertrain FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show minimum, maximum, and average annual fuel cost for all vehicles.\n### Response (TSQL):",
    "sql": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles",
    "dsql": "PROJECT MIN(annual_fuel_cost), MAX(annual_fuel_cost), AVG(annual_fuel_cost) FROM AGGREGATE MAX(annual_fuel_cost), MIN(annual_fuel_cost), AVG(annual_fuel_cost) FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What are the minimum, maximum, and average annual fuel costs across all vehicles?\n### Response (TSQL):",
    "sql": "SELECT min(annual_fuel_cost) ,  max(annual_fuel_cost) ,  avg(annual_fuel_cost) FROM vehicles",
    "dsql": "PROJECT MIN(annual_fuel_cost), MAX(annual_fuel_cost), AVG(annual_fuel_cost) FROM AGGREGATE MAX(annual_fuel_cost), MIN(annual_fuel_cost), AVG(annual_fuel_cost) FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show name and model year for vehicles with city fuel economy rate less than or equal to highway fuel economy rate.\n### Response (TSQL):",
    "sql": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
    "dsql": "PROJECT name, model_year FROM SELECT WHERE city_fuel_economy_rate <= highway_fuel_economy_rate FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What are the names and model years for vehicles that have a city fuel economy rate less than or equal to its highway fuel economy rate?\n### Response (TSQL):",
    "sql": "SELECT name ,  model_year FROM vehicles WHERE city_fuel_economy_rate  <=  highway_fuel_economy_rate",
    "dsql": "PROJECT name, model_year FROM SELECT WHERE city_fuel_economy_rate <= highway_fuel_economy_rate FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show the type of powertrain with at least two vehicles, and the average annual fuel cost for vehicles in each such type.\n### Response (TSQL):",
    "sql": "SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2",
    "dsql": "PROJECT type_of_powertrain, AVG(annual_fuel_cost) FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE AVG(annual_fuel_cost), COUNT(*) GROUP BY type_of_powertrain FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What are the types of powertrains for which there are two or more vehicles, and what are their average annual fuel costs?\n### Response (TSQL):",
    "sql": "SELECT type_of_powertrain ,  avg(annual_fuel_cost) FROM vehicles GROUP BY type_of_powertrain HAVING count(*)  >=  2",
    "dsql": "PROJECT type_of_powertrain, AVG(annual_fuel_cost) FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE AVG(annual_fuel_cost), COUNT(*) GROUP BY type_of_powertrain FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show the name, age, membership credit for all customers?\n### Response (TSQL):",
    "sql": "SELECT name ,  age ,  membership_credit FROM customers",
    "dsql": "PROJECT name, age, membership_credit FROM customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What are the names, ages, and membership credits for all customers?\n### Response (TSQL):",
    "sql": "SELECT name ,  age ,  membership_credit FROM customers",
    "dsql": "PROJECT name, age, membership_credit FROM customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show the name and age of the customer with maximum membership credit.\n### Response (TSQL):",
    "sql": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC membership_credit FROM PROJECT name, age FROM customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What is the name and age of the customer with the most membership credit?\n### Response (TSQL):",
    "sql": "SELECT name ,  age FROM customers ORDER BY membership_credit DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC membership_credit FROM PROJECT name, age FROM customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What is the average age for customers with a membership credit above the average?\n### Response (TSQL):",
    "sql": "SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)",
    "dsql": "PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM SELECT WHERE membership_credit > PROJECT AVG(membership_credit) FROM AGGREGATE AVG(membership_credit) FROM customers FROM customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Return the average age for customers who have membership above the average across all customers.\n### Response (TSQL):",
    "sql": "SELECT avg(age) FROM customers WHERE membership_credit  >  (SELECT avg(membership_credit) FROM customers)",
    "dsql": "PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM SELECT WHERE membership_credit > PROJECT AVG(membership_credit) FROM AGGREGATE AVG(membership_credit) FROM customers FROM customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show all information for all discounts.\n### Response (TSQL):",
    "sql": "SELECT * FROM discount",
    "dsql": "PROJECT * FROM discount "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Return all information about discounts.\n### Response (TSQL):",
    "sql": "SELECT * FROM discount",
    "dsql": "PROJECT * FROM discount "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show the name and total hours of renting for each vehicle.\n### Response (TSQL):",
    "sql": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
    "dsql": "PROJECT T2.name, SUM(T1.total_hours) FROM AGGREGATE SUM(T1.total_hours), COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM renting_history WITH AS T2 FROM vehicles ON T1.vehicles_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What are the names and total rental hours for each vehicle?\n### Response (TSQL):",
    "sql": "SELECT T2.name ,  sum(T1.total_hours) FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id",
    "dsql": "PROJECT T2.name, SUM(T1.total_hours) FROM AGGREGATE SUM(T1.total_hours), COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM renting_history WITH AS T2 FROM vehicles ON T1.vehicles_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show the name of vehicles with no renting history.\n### Response (TSQL):",
    "sql": "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)",
    "dsql": "PROJECT name FROM SELECT WHERE id NOT IN PROJECT vehicles_id FROM renting_history FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What are the names of vehicles that have never been rented?\n### Response (TSQL):",
    "sql": "SELECT name FROM vehicles WHERE id NOT IN (SELECT vehicles_id FROM renting_history)",
    "dsql": "PROJECT name FROM SELECT WHERE id NOT IN PROJECT vehicles_id FROM renting_history FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show the name of customer with at least two renting history records.\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2",
    "dsql": "PROJECT T2.name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM renting_history WITH AS T2 FROM customers ON T1.customer_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What are the names of customers who have two or more records of rental history?\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM renting_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.id GROUP BY T2.id HAVING count(*)  >=  2",
    "dsql": "PROJECT T2.name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM renting_history WITH AS T2 FROM customers ON T1.customer_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show the name and model year of the vehicle with most number of renting history records.\n### Response (TSQL):",
    "sql": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name, T2.model_year FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM renting_history WITH AS T2 FROM vehicles ON T1.vehicles_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What is the name and model year of the vehicle which has been rented the most times?\n### Response (TSQL):",
    "sql": "SELECT T2.name ,  T2.model_year FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name, T2.model_year FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM renting_history WITH AS T2 FROM vehicles ON T1.vehicles_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Show the vehicle name with a descending order of total hours of renting.\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC",
    "dsql": "ORDER BY DESC SUM(T1.total_hours) FROM PROJECT T2.name FROM AGGREGATE SUM(T1.total_hours), COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM renting_history WITH AS T2 FROM vehicles ON T1.vehicles_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What are the names of vehicles, sorted descending by total hours of renting?\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T2.id ORDER BY sum(T1.total_hours) DESC",
    "dsql": "ORDER BY DESC SUM(T1.total_hours) FROM PROJECT T2.name FROM AGGREGATE SUM(T1.total_hours), COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM renting_history WITH AS T2 FROM vehicles ON T1.vehicles_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What is the discount name with most number of renting history records?\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM renting_history WITH AS T2 FROM discount ON T1.discount_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Return the name of the discount that corresponds to the most rental history records.\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM renting_history AS T1 JOIN discount AS T2 ON T1.discount_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM renting_history WITH AS T2 FROM discount ON T1.discount_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Find the name and powertrain type of the cars that rented for more than 30 total hours.\n### Response (TSQL):",
    "sql": "SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30",
    "dsql": "PROJECT T2.name, T2.Type_of_powertrain FROM SELECT WHERE SUM(T1.total_hours) > 30 FROM AGGREGATE SUM(T1.total_hours), COUNT(*) GROUP BY T1.vehicles_id FROM JOIN AS T1 FROM renting_history WITH AS T2 FROM vehicles ON T1.vehicles_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What are the names and powertrain types of cars that have more than 30 total rental hours?\n### Response (TSQL):",
    "sql": "SELECT T2.name ,  T2.Type_of_powertrain FROM renting_history AS T1 JOIN vehicles AS T2 ON T1.vehicles_id  =  T2.id GROUP BY T1.vehicles_id HAVING sum(T1.total_hours)  >  30",
    "dsql": "PROJECT T2.name, T2.Type_of_powertrain FROM SELECT WHERE SUM(T1.total_hours) > 30 FROM AGGREGATE SUM(T1.total_hours), COUNT(*) GROUP BY T1.vehicles_id FROM JOIN AS T1 FROM renting_history WITH AS T2 FROM vehicles ON T1.vehicles_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: Find the average city and highway fuel rates for cars with different powertrain types.\n### Response (TSQL):",
    "sql": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain",
    "dsql": "PROJECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate), Type_of_powertrain FROM AGGREGATE AVG(Highway_fuel_economy_rate), AVG(City_fuel_economy_rate), COUNT(*) GROUP BY Type_of_powertrain FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Customers ( id number, name text, age number, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Discount ( id number, name text, membership_credit number, PRIMARY KEY(id)); CREATE TABLE Vehicles ( id number, name text, Model_year number, Type_of_powertrain text, Combined_fuel_economy_rate number, City_fuel_economy_rate number, Highway_fuel_economy_rate number, Cost_per_25_miles number, Annual_fuel_cost number, Notes text, PRIMARY KEY(id)); CREATE TABLE Renting_history ( id number, customer_id number, discount_id number, vehicles_id number, total_hours number, PRIMARY KEY(id), FOREIGN KEY(discount_id) REFERENCES Discount (id), FOREIGN KEY(vehicles_id) REFERENCES Vehicles (id), FOREIGN KEY(customer_id) REFERENCES Customers (id)); \n### Question: What are the average city fuel economy rate, average highway fuel economy rate for different types of powertrains?\n### Response (TSQL):",
    "sql": "SELECT avg(City_fuel_economy_rate) ,  avg(Highway_fuel_economy_rate) , Type_of_powertrain FROM vehicles GROUP BY Type_of_powertrain",
    "dsql": "PROJECT AVG(City_fuel_economy_rate), AVG(Highway_fuel_economy_rate), Type_of_powertrain FROM AGGREGATE AVG(Highway_fuel_economy_rate), AVG(City_fuel_economy_rate), COUNT(*) GROUP BY Type_of_powertrain FROM vehicles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What is the average amount of a student loan?\n### Response (TSQL):",
    "sql": "SELECT avg(amount_of_loan) FROM Student_Loans",
    "dsql": "PROJECT AVG(amount_of_loan) FROM AGGREGATE AVG(amount_of_loan) FROM Student_Loans "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Compute the average amount of student loans.\n### Response (TSQL):",
    "sql": "SELECT avg(amount_of_loan) FROM Student_Loans",
    "dsql": "PROJECT AVG(amount_of_loan) FROM AGGREGATE AVG(amount_of_loan) FROM Student_Loans "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: List the biographical data and student id for the students who take 2 or more classes and the students who have less than 2 detentions.\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2",
    "dsql": "UNION PROJECT T1.bio_data, T1.student_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Students WITH AS T2 FROM Classes ON T1.student_id = T2.student_id WITH PROJECT T1.bio_data, T1.student_id FROM SELECT WHERE COUNT(*) < 2 FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Students WITH AS T2 FROM Detention ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What are the biographical data and student id of the students who either took two or more classes and or have less than two detentions?\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >=  2 UNION SELECT T1.bio_data ,  T1.student_id FROM Students AS T1 JOIN Detention AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  <  2",
    "dsql": "UNION PROJECT T1.bio_data, T1.student_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Students WITH AS T2 FROM Classes ON T1.student_id = T2.student_id WITH PROJECT T1.bio_data, T1.student_id FROM SELECT WHERE COUNT(*) < 2 FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Students WITH AS T2 FROM Detention ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: List the details of the teachers who teach some class whose detail has the substring 'data' but do not teach a class whose detail contains the prefix 'net'\n### Response (TSQL):",
    "sql": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'",
    "dsql": "EXCEPT PROJECT T1.teacher_details FROM SELECT WHERE T2.class_details LIKE '%data%' FROM JOIN AS T1 FROM Teachers WITH AS T2 FROM Classes ON T1.teacher_id = T2.teacher_id WITH PROJECT T1.teacher_details FROM SELECT WHERE T2.class_details LIKE 'net%' FROM JOIN AS T1 FROM Teachers WITH AS T2 FROM Classes ON T1.teacher_id = T2.teacher_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Which teachers teach a class that has the substring 'data' in its detail but do not teach a class that has prefix 'net' in its detail? Give me the teacher details.\n### Response (TSQL):",
    "sql": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE '%data%' EXCEPT SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.class_details LIKE 'net%'",
    "dsql": "EXCEPT PROJECT T1.teacher_details FROM SELECT WHERE T2.class_details LIKE '%data%' FROM JOIN AS T1 FROM Teachers WITH AS T2 FROM Classes ON T1.teacher_id = T2.teacher_id WITH PROJECT T1.teacher_details FROM SELECT WHERE T2.class_details LIKE 'net%' FROM JOIN AS T1 FROM Teachers WITH AS T2 FROM Classes ON T1.teacher_id = T2.teacher_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: List the biographical data of the students who never had a detention or student loan .\n### Response (TSQL):",
    "sql": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)",
    "dsql": "PROJECT bio_data FROM SELECT WHERE student_id NOT IN UNION PROJECT t1.student_id FROM JOIN AS t1 FROM students WITH AS t2 FROM detention ON t1.student_id = t2.student_id WITH PROJECT t1.student_id FROM JOIN AS t1 FROM students WITH AS t2 FROM student_loans ON t1.student_id = t2.student_id FROM students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Which students never had a detention or student loan ? Find their biographical data .\n### Response (TSQL):",
    "sql": "select bio_data from students where student_id not in (select t1.student_id from students as t1 join detention as t2 on t1.student_id  =  t2.student_id union select t1.student_id from students as t1 join student_loans as t2 on t1.student_id  =  t2.student_id)",
    "dsql": "PROJECT bio_data FROM SELECT WHERE student_id NOT IN UNION PROJECT t1.student_id FROM JOIN AS t1 FROM students WITH AS t2 FROM detention ON t1.student_id = t2.student_id WITH PROJECT t1.student_id FROM JOIN AS t1 FROM students WITH AS t2 FROM student_loans ON t1.student_id = t2.student_id FROM students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What are the loan amounts and loan dates of the students who have at least 2 achievements?\n### Response (TSQL):",
    "sql": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )",
    "dsql": "PROJECT amount_of_loan, date_of_loan FROM SELECT WHERE student_id IN PROJECT student_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY student_id FROM Achievements FROM Student_Loans "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: List the amount and date of loan for the students who have two or more achievements.\n### Response (TSQL):",
    "sql": "SELECT amount_of_loan ,  date_of_loan FROM Student_Loans WHERE student_id IN ( SELECT student_id FROM Achievements GROUP BY student_id HAVING count(*)  >=  2 )",
    "dsql": "PROJECT amount_of_loan, date_of_loan FROM SELECT WHERE student_id IN PROJECT student_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY student_id FROM Achievements FROM Student_Loans "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: List the detail and id of the teacher who teaches the most courses.\n### Response (TSQL):",
    "sql": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.teacher_details, T1.teacher_id FROM AGGREGATE COUNT(*) GROUP BY T1.teacher_id FROM JOIN AS T1 FROM Teachers WITH AS T2 FROM Classes ON T1.teacher_id = T2.teacher_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What are the detail and id of the teacher who teaches the largest number of courses?\n### Response (TSQL):",
    "sql": "SELECT T1.teacher_details ,  T1.teacher_id FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.teacher_details, T1.teacher_id FROM AGGREGATE COUNT(*) GROUP BY T1.teacher_id FROM JOIN AS T1 FROM Teachers WITH AS T2 FROM Classes ON T1.teacher_id = T2.teacher_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What are the distinct descriptions of all the detentions which have ever happened?\n### Response (TSQL):",
    "sql": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
    "dsql": "PROJECT DISTINCT T1.detention_type_description FROM JOIN AS T1 FROM Ref_Detention_Type WITH AS T2 FROM Detention ON T1.detention_type_code = T2.detention_type_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Return the distinct descriptions of all the detentions that have happened.\n### Response (TSQL):",
    "sql": "SELECT distinct(T1.detention_type_description) FROM Ref_Detention_Type AS T1 JOIN Detention AS T2 ON T1.detention_type_code  =  T2.detention_type_code",
    "dsql": "PROJECT DISTINCT T1.detention_type_description FROM JOIN AS T1 FROM Ref_Detention_Type WITH AS T2 FROM Detention ON T1.detention_type_code = T2.detention_type_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: List the personal details and the address type descriptions of all the students.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code",
    "dsql": "PROJECT DISTINCT T1.student_details, T3.address_type_description FROM JOIN AS T1 FROM Students WITH JOIN AS T2 FROM Students_Addresses WITH AS T3 FROM Ref_Address_Types ON T2.address_type_code = T3.address_type_code ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What are the personal details and the address type descriptions of each student?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.student_details ,  T3.address_type_description FROM Students AS T1 JOIN Students_Addresses AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Address_Types AS T3 ON T2.address_type_code  =  T3.address_type_code",
    "dsql": "PROJECT DISTINCT T1.student_details, T3.address_type_description FROM JOIN AS T1 FROM Students WITH JOIN AS T2 FROM Students_Addresses WITH AS T3 FROM Ref_Address_Types ON T2.address_type_code = T3.address_type_code ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: List the the address details and the biographical information of the students.\n### Response (TSQL):",
    "sql": "SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
    "dsql": "PROJECT T1.address_details, T3.bio_data FROM JOIN AS T1 FROM Addresses WITH JOIN AS T2 FROM Students_Addresses WITH AS T3 FROM Students ON T2.student_id = T3.student_id ON T1.address_id = T2.address_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What are the address details and biographical information of each student?\n### Response (TSQL):",
    "sql": "SELECT T1.address_details ,  T3.bio_data FROM Addresses AS T1 JOIN Students_Addresses AS T2 ON T1.address_id  =  T2.address_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
    "dsql": "PROJECT T1.address_details, T3.bio_data FROM JOIN AS T1 FROM Addresses WITH JOIN AS T2 FROM Students_Addresses WITH AS T3 FROM Students ON T2.student_id = T3.student_id ON T1.address_id = T2.address_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: List the biographical data and the date of the transcript of all the students.\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id",
    "dsql": "PROJECT T1.bio_data, T2.date_of_transcript FROM JOIN AS T1 FROM Students WITH AS T2 FROM Transcripts ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What are the biographical data and the date of transcript issuance of each student?\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data ,  T2.date_of_transcript FROM Students AS T1 JOIN Transcripts AS T2 ON T1.student_id  =  T2.student_id",
    "dsql": "PROJECT T1.bio_data, T2.date_of_transcript FROM JOIN AS T1 FROM Students WITH AS T2 FROM Transcripts ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: How many students got the most common result in the behavioral monitoring details? Also list the result details.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT COUNT(DISTINCT student_id), behaviour_monitoring_details FROM AGGREGATE COUNT(DISTINCT student_id), COUNT(*) GROUP BY behaviour_monitoring_details FROM Behaviour_Monitoring "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Find the most common result in the behavioral monitoring details. What are the count and the details of this result?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT student_id) ,  behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT COUNT(DISTINCT student_id), behaviour_monitoring_details FROM AGGREGATE COUNT(DISTINCT student_id), COUNT(*) GROUP BY behaviour_monitoring_details FROM Behaviour_Monitoring "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Which students not only got the most common result but also got a result obtained by 3 students in behaviour monitoring? List the student's biographical data and details.\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )",
    "dsql": "INTERSECT PROJECT T1.bio_data, T1.student_details FROM SELECT WHERE T2.behaviour_monitoring_details IN LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT behaviour_monitoring_details FROM AGGREGATE COUNT(*) GROUP BY behaviour_monitoring_details FROM Behaviour_Monitoring FROM JOIN AS T1 FROM Students WITH AS T2 FROM Behaviour_Monitoring ON T1.student_id = T2.student_id WITH PROJECT T1.bio_data, T1.student_details FROM SELECT WHERE T2.behaviour_monitoring_details IN PROJECT behaviour_monitoring_details FROM SELECT WHERE COUNT(*) = 3 FROM AGGREGATE COUNT(*) GROUP BY behaviour_monitoring_details FROM Behaviour_Monitoring FROM JOIN AS T1 FROM Students WITH AS T2 FROM Behaviour_Monitoring ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Find the biographical data and details of students who got not only the most common result but also a result that is obtained by 3 students in behaviour monitoring.\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) INTERSECT SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details HAVING count(*)  =  3 )",
    "dsql": "INTERSECT PROJECT T1.bio_data, T1.student_details FROM SELECT WHERE T2.behaviour_monitoring_details IN LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT behaviour_monitoring_details FROM AGGREGATE COUNT(*) GROUP BY behaviour_monitoring_details FROM Behaviour_Monitoring FROM JOIN AS T1 FROM Students WITH AS T2 FROM Behaviour_Monitoring ON T1.student_id = T2.student_id WITH PROJECT T1.bio_data, T1.student_details FROM SELECT WHERE T2.behaviour_monitoring_details IN PROJECT behaviour_monitoring_details FROM SELECT WHERE COUNT(*) = 3 FROM AGGREGATE COUNT(*) GROUP BY behaviour_monitoring_details FROM Behaviour_Monitoring FROM JOIN AS T1 FROM Students WITH AS T2 FROM Behaviour_Monitoring ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Which students only got the most common result for his or her all behaviour monitoring details? List the students' biographical information.\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 ) EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Behaviour_Monitoring AS T2 ON T1.student_id  =  T2.student_id WHERE T2.behaviour_monitoring_details NOT IN ( SELECT behaviour_monitoring_details FROM Behaviour_Monitoring GROUP BY behaviour_monitoring_details ORDER BY count(*) DESC LIMIT 1 )",
    "dsql": "EXCEPT PROJECT T1.bio_data FROM SELECT WHERE T2.behaviour_monitoring_details IN LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT behaviour_monitoring_details FROM AGGREGATE COUNT(*) GROUP BY behaviour_monitoring_details FROM Behaviour_Monitoring FROM JOIN AS T1 FROM Students WITH AS T2 FROM Behaviour_Monitoring ON T1.student_id = T2.student_id WITH PROJECT T1.bio_data FROM SELECT WHERE T2.behaviour_monitoring_details NOT IN LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT behaviour_monitoring_details FROM AGGREGATE COUNT(*) GROUP BY behaviour_monitoring_details FROM Behaviour_Monitoring FROM JOIN AS T1 FROM Students WITH AS T2 FROM Behaviour_Monitoring ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What is the biographical information of the students who got the most common result for their behaviour monitoring details ?\n### Response (TSQL):",
    "sql": "select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 ) except select t1.bio_data from students as t1 join behaviour_monitoring as t2 on t1.student_id  =  t2.student_id where t2.behaviour_monitoring_details not in ( select behaviour_monitoring_details from behaviour_monitoring group by behaviour_monitoring_details order by count(*) desc limit 1 )",
    "dsql": "EXCEPT PROJECT t1.bio_data FROM SELECT WHERE t2.behaviour_monitoring_details IN LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT behaviour_monitoring_details FROM AGGREGATE COUNT(*) GROUP BY behaviour_monitoring_details FROM behaviour_monitoring FROM JOIN AS t1 FROM students WITH AS t2 FROM behaviour_monitoring ON t1.student_id = t2.student_id WITH PROJECT t1.bio_data FROM SELECT WHERE t2.behaviour_monitoring_details NOT IN LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT behaviour_monitoring_details FROM AGGREGATE COUNT(*) GROUP BY behaviour_monitoring_details FROM behaviour_monitoring FROM JOIN AS t1 FROM students WITH AS t2 FROM behaviour_monitoring ON t1.student_id = t2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Which students have gone through any event? List the students' biographical data and event date.\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id",
    "dsql": "PROJECT T1.bio_data, T2.event_date FROM JOIN AS T1 FROM Students WITH AS T2 FROM Student_Events ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Find the biographical data and event date for students who participated in any events.\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data ,  T2.event_date FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id",
    "dsql": "PROJECT T1.bio_data, T2.event_date FROM JOIN AS T1 FROM Students WITH AS T2 FROM Student_Events ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: How many students have joined in the most common type of event? List the number, the event type and description.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT COUNT(*), T2.event_type_code, T3.event_type_description FROM AGGREGATE COUNT(*) GROUP BY T2.event_type_code FROM JOIN AS T1 FROM Students WITH JOIN AS T2 FROM Student_Events WITH AS T3 FROM Ref_Event_Types ON T2.event_type_code = T3.event_type_code ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What is the type of event the most students joined? Give me the number of students, and the event type code and description.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  T2.event_type_code ,  T3.event_type_description FROM Students AS T1 JOIN Student_Events AS T2 ON T1.student_id  =  T2.student_id JOIN Ref_Event_Types AS T3 ON T2.event_type_code  =  T3.event_type_code GROUP BY T2.event_type_code ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT COUNT(*), T2.event_type_code, T3.event_type_description FROM AGGREGATE COUNT(*) GROUP BY T2.event_type_code FROM JOIN AS T1 FROM Students WITH JOIN AS T2 FROM Student_Events WITH AS T3 FROM Ref_Event_Types ON T2.event_type_code = T3.event_type_code ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: How are all the achievements described? List the achievement detail and the type description.\n### Response (TSQL):",
    "sql": "SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code",
    "dsql": "PROJECT T1.achievement_details, T2.achievement_type_description FROM JOIN AS T1 FROM Achievements WITH AS T2 FROM Ref_Achievement_Type ON T1.achievement_type_code = T2.achievement_type_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What are the achievement detail and the type description of each achievements?\n### Response (TSQL):",
    "sql": "SELECT T1.achievement_details ,  T2.achievement_type_description FROM Achievements AS T1 JOIN Ref_Achievement_Type AS T2 ON T1.achievement_type_code  =  T2.achievement_type_code",
    "dsql": "PROJECT T1.achievement_details, T2.achievement_type_description FROM JOIN AS T1 FROM Achievements WITH AS T2 FROM Ref_Achievement_Type ON T1.achievement_type_code = T2.achievement_type_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: How many teachers have taught a student who has not won any achievements?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )",
    "dsql": "PROJECT COUNT(DISTINCT T1.teacher_id) FROM AGGREGATE COUNT(DISTINCT T1.teacher_id) FROM SELECT WHERE T2.student_id NOT IN PROJECT student_id FROM Achievements FROM JOIN AS T1 FROM Teachers WITH AS T2 FROM Classes ON T1.teacher_id = T2.teacher_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Count the number of teachers who have taught students who have never won an achievement.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T1.teacher_id) FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.student_id NOT IN ( SELECT student_id FROM Achievements )",
    "dsql": "PROJECT COUNT(DISTINCT T1.teacher_id) FROM AGGREGATE COUNT(DISTINCT T1.teacher_id) FROM SELECT WHERE T2.student_id NOT IN PROJECT student_id FROM Achievements FROM JOIN AS T1 FROM Teachers WITH AS T2 FROM Classes ON T1.teacher_id = T2.teacher_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: List the date of the transcripts and the transcript details.\n### Response (TSQL):",
    "sql": "SELECT date_of_transcript ,  transcript_details FROM Transcripts",
    "dsql": "PROJECT date_of_transcript, transcript_details FROM Transcripts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What are the date and detail of each transcript?\n### Response (TSQL):",
    "sql": "SELECT date_of_transcript ,  transcript_details FROM Transcripts",
    "dsql": "PROJECT date_of_transcript, transcript_details FROM Transcripts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: List the achievement type code, achievement details and the date of the achievements.\n### Response (TSQL):",
    "sql": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
    "dsql": "PROJECT achievement_type_code, achievement_details, date_achievement FROM Achievements "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What are the type code, details, and date of each achievement?\n### Response (TSQL):",
    "sql": "SELECT achievement_type_code ,  achievement_details ,  date_achievement FROM Achievements",
    "dsql": "PROJECT achievement_type_code, achievement_details, date_achievement FROM Achievements "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Show the detention start time and end time of the detentions.\n### Response (TSQL):",
    "sql": "SELECT datetime_detention_start ,  datetime_detention_end FROM Detention",
    "dsql": "PROJECT datetime_detention_start, datetime_detention_end FROM Detention "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What are the starting time and ending time of each detention record?\n### Response (TSQL):",
    "sql": "SELECT datetime_detention_start ,  datetime_detention_end FROM Detention",
    "dsql": "PROJECT datetime_detention_start, datetime_detention_end FROM Detention "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Show the biographical information of the students whose details include the substring 'Suite'.\n### Response (TSQL):",
    "sql": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
    "dsql": "PROJECT bio_data FROM SELECT WHERE student_details LIKE '%Suite%' FROM Students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Which students have 'Suite' as a substring in their details? Give me their biographical information.\n### Response (TSQL):",
    "sql": "SELECT bio_data FROM Students WHERE student_details LIKE '%Suite%'",
    "dsql": "PROJECT bio_data FROM SELECT WHERE student_details LIKE '%Suite%' FROM Students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: List the details for all the pairs of teachers and students who are in the same class.\n### Response (TSQL):",
    "sql": "SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
    "dsql": "PROJECT T1.teacher_details, T3.student_details FROM JOIN AS T1 FROM Teachers WITH JOIN AS T2 FROM Classes WITH AS T3 FROM Students ON T2.student_id = T3.student_id ON T1.teacher_id = T2.teacher_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What are the pairs of teachers and students who are in the same class? Give me the pairs of their details.\n### Response (TSQL):",
    "sql": "SELECT T1.teacher_details ,  T3.student_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Students AS T3 ON T2.student_id  =  T3.student_id",
    "dsql": "PROJECT T1.teacher_details, T3.student_details FROM JOIN AS T1 FROM Teachers WITH JOIN AS T2 FROM Classes WITH AS T3 FROM Students ON T2.student_id = T3.student_id ON T1.teacher_id = T2.teacher_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: How many courses do teachers teach at most? Also find the id of the teacher who teaches the most.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT COUNT(*), teacher_id FROM AGGREGATE COUNT(*) GROUP BY teacher_id FROM Classes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Which teacher teaches the most courses? Give me the id of the teacher and the number of courses he or she teaches.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  teacher_id FROM Classes GROUP BY teacher_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT COUNT(*), teacher_id FROM AGGREGATE COUNT(*) GROUP BY teacher_id FROM Classes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: How many courses do students take at most? Also find the id of the student who takes the most courses.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT COUNT(*), student_id FROM AGGREGATE COUNT(*) GROUP BY student_id FROM Classes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Which student is taking the most courses? Give me the id of the student and the number of courses he or she is taking.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  student_id FROM Classes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT COUNT(*), student_id FROM AGGREGATE COUNT(*) GROUP BY student_id FROM Classes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Which students take 2 courses? List student id and details.\n### Response (TSQL):",
    "sql": "SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "dsql": "PROJECT T1.student_id, T1.student_details FROM SELECT WHERE COUNT(*) = 2 FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Students WITH AS T2 FROM Classes ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What are the ids and details of the students who take 2 courses?\n### Response (TSQL):",
    "sql": "SELECT T1.student_id ,  T1.student_details FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2",
    "dsql": "PROJECT T1.student_id, T1.student_details FROM SELECT WHERE COUNT(*) = 2 FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Students WITH AS T2 FROM Classes ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What is the least common detention type? Show the type code and the description.\n### Response (TSQL):",
    "sql": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT T1.detention_type_code, T2.detention_type_description FROM AGGREGATE COUNT(*) GROUP BY T1.detention_type_code FROM JOIN AS T1 FROM Detention WITH AS T2 FROM Ref_Detention_Type ON T1.detention_type_code = T2.detention_type_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Give me the type code and description of the least common detention type.\n### Response (TSQL):",
    "sql": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT T1.detention_type_code, T2.detention_type_description FROM AGGREGATE COUNT(*) GROUP BY T1.detention_type_code FROM JOIN AS T1 FROM Detention WITH AS T2 FROM Ref_Detention_Type ON T1.detention_type_code = T2.detention_type_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Which students have a student loan more than the average amount? List the students' biographical data and the details.\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )",
    "dsql": "PROJECT T1.bio_data, T1.student_details FROM SELECT WHERE T2.amount_of_loan > PROJECT AVG(amount_of_loan) FROM AGGREGATE AVG(amount_of_loan) FROM Student_Loans FROM JOIN AS T1 FROM Students WITH AS T2 FROM Student_Loans ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Find the biographical data and details for students whose student loan is above the average amount.\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data ,  T1.student_details FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id WHERE T2.amount_of_loan  >  ( SELECT avg(amount_of_loan) FROM Student_Loans )",
    "dsql": "PROJECT T1.bio_data, T1.student_details FROM SELECT WHERE T2.amount_of_loan > PROJECT AVG(amount_of_loan) FROM AGGREGATE AVG(amount_of_loan) FROM Student_Loans FROM JOIN AS T1 FROM Students WITH AS T2 FROM Student_Loans ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: When was the earliest date of loan?\n### Response (TSQL):",
    "sql": "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC date_of_loan FROM PROJECT date_of_loan FROM Student_Loans "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Return the earliest date of loan in the record.\n### Response (TSQL):",
    "sql": "SELECT date_of_loan FROM Student_Loans ORDER BY date_of_loan ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC date_of_loan FROM PROJECT date_of_loan FROM Student_Loans "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Which student has the loan with the minimum value? List the student's biographical information.\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC T2.amount_of_loan FROM PROJECT T1.bio_data FROM JOIN AS T1 FROM Students WITH AS T2 FROM Student_Loans ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Find the biographical information of the student with the smallest student loan.\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC T2.amount_of_loan FROM PROJECT T1.bio_data FROM JOIN AS T1 FROM Students WITH AS T2 FROM Student_Loans ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: When was the transcript issued for the student with loan of maximum value?\n### Response (TSQL):",
    "sql": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC T2.amount_of_loan FROM PROJECT T1.date_of_transcript FROM JOIN AS T1 FROM Transcripts WITH AS T2 FROM Student_Loans ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What is the transcript issuance date for the student with the largest amount of loan?\n### Response (TSQL):",
    "sql": "SELECT T1.date_of_transcript FROM Transcripts AS T1 JOIN Student_Loans AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.amount_of_loan DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC T2.amount_of_loan FROM PROJECT T1.date_of_transcript FROM JOIN AS T1 FROM Transcripts WITH AS T2 FROM Student_Loans ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Which teachers have taught the student with the earliest transcript issuance? List the teacher details.\n### Response (TSQL):",
    "sql": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC T3.date_of_transcript FROM PROJECT T1.teacher_details FROM JOIN AS T1 FROM Teachers WITH JOIN AS T2 FROM Classes WITH AS T3 FROM Transcripts ON T2.student_id = T3.student_id ON T1.teacher_id = T2.teacher_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Find the details of the teachers who have taught the student with the earliest transcript issuance.\n### Response (TSQL):",
    "sql": "SELECT T1.teacher_details FROM Teachers AS T1 JOIN Classes AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN Transcripts AS T3 ON T2.student_id  =  T3.student_id ORDER BY T3.date_of_transcript ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC T3.date_of_transcript FROM PROJECT T1.teacher_details FROM JOIN AS T1 FROM Teachers WITH JOIN AS T2 FROM Classes WITH AS T3 FROM Transcripts ON T2.student_id = T3.student_id ON T1.teacher_id = T2.teacher_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: How much total loan does each student have ? List the student ids and the amounts .\n### Response (TSQL):",
    "sql": "select student_id ,  sum(amount_of_loan) from student_loans group by student_id",
    "dsql": "PROJECT student_id, SUM(amount_of_loan) FROM AGGREGATE SUM(amount_of_loan), COUNT(*) GROUP BY student_id FROM student_loans "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: For each student, find the student id and the total amount of loan he or she has.\n### Response (TSQL):",
    "sql": "SELECT student_id ,  sum(amount_of_loan) FROM Student_Loans GROUP BY student_id",
    "dsql": "PROJECT student_id, SUM(amount_of_loan) FROM AGGREGATE SUM(amount_of_loan), COUNT(*) GROUP BY student_id FROM Student_Loans "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: How many courses does each student take? List the student id, the student biographical data and the course count.\n### Response (TSQL):",
    "sql": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
    "dsql": "PROJECT T1.student_id, T1.bio_data, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Students WITH AS T2 FROM Classes ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: For each student, find the student id, student biographical data, and the number of courses he or she takes.\n### Response (TSQL):",
    "sql": "SELECT T1.student_id ,  T1.bio_data ,  count(*) FROM Students AS T1 JOIN Classes AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id",
    "dsql": "PROJECT T1.student_id, T1.bio_data, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.student_id FROM JOIN AS T1 FROM Students WITH AS T2 FROM Classes ON T1.student_id = T2.student_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: How many students have gone through a detention?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT student_id) FROM Detention",
    "dsql": "PROJECT COUNT(DISTINCT student_id) FROM AGGREGATE COUNT(DISTINCT student_id) FROM Detention "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Count the number of students who have a detention record.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT student_id) FROM Detention",
    "dsql": "PROJECT COUNT(DISTINCT student_id) FROM AGGREGATE COUNT(DISTINCT student_id) FROM Detention "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What is the code and description of the most common student address type?\n### Response (TSQL):",
    "sql": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.address_type_code, T2.address_type_description FROM AGGREGATE COUNT(*) GROUP BY T1.address_type_code FROM SELECT WHERE T1.address_type_code = T2.address_type_code FROM AS T1 FROM Students_Addresses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What is the most common student address type? Give me the code and description of the address type.\n### Response (TSQL):",
    "sql": "SELECT T1.address_type_code ,  T2.address_type_description FROM Students_Addresses AS T1 JOIN Ref_Address_Types AS T2 WHERE T1.address_type_code  =  T2.address_type_code GROUP BY T1.address_type_code ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.address_type_code, T2.address_type_description FROM AGGREGATE COUNT(*) GROUP BY T1.address_type_code FROM SELECT WHERE T1.address_type_code = T2.address_type_code FROM AS T1 FROM Students_Addresses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: For those students who have gone through an event, who do not have a student loan? List the students' biographical data\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id",
    "dsql": "EXCEPT PROJECT T1.bio_data FROM SELECT WHERE T1.student_id = T2.student_id FROM AS T1 FROM Students WITH PROJECT T1.bio_data FROM SELECT WHERE T1.student_id = T2.student_id FROM AS T1 FROM Students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Among the students who have an event record, who do not have a student loan? Return the students' biographical data.\n### Response (TSQL):",
    "sql": "SELECT T1.bio_data FROM Students AS T1 JOIN Student_Events AS T2 WHERE T1.student_id  =  T2.student_id EXCEPT SELECT T1.bio_data FROM Students AS T1 JOIN Student_Loans AS T2 WHERE T1.student_id  =  T2.student_id",
    "dsql": "EXCEPT PROJECT T1.bio_data FROM SELECT WHERE T1.student_id = T2.student_id FROM AS T1 FROM Students WITH PROJECT T1.bio_data FROM SELECT WHERE T1.student_id = T2.student_id FROM AS T1 FROM Students "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: List the start time and the end time of the students' addresses for the students who have 2 transcripts.\n### Response (TSQL):",
    "sql": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )",
    "dsql": "PROJECT date_from, date_to FROM SELECT WHERE student_id IN PROJECT student_id FROM SELECT WHERE COUNT(*) = 2 FROM AGGREGATE COUNT(*) GROUP BY student_id FROM Transcripts FROM Students_Addresses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: What are the start time and end time of addresses for the students who receive 2 transcripts?\n### Response (TSQL):",
    "sql": "SELECT date_from ,  date_to FROM Students_Addresses WHERE student_id IN ( SELECT student_id FROM Transcripts GROUP BY student_id HAVING count(*)  =  2 )",
    "dsql": "PROJECT date_from, date_to FROM SELECT WHERE student_id IN PROJECT student_id FROM SELECT WHERE COUNT(*) = 2 FROM AGGREGATE COUNT(*) GROUP BY student_id FROM Transcripts FROM Students_Addresses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: When did all the detentions start?\n### Response (TSQL):",
    "sql": "SELECT datetime_detention_start FROM Detention",
    "dsql": "PROJECT datetime_detention_start FROM Detention "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Students ( student_id number, bio_data text, student_details text, PRIMARY KEY(student_id)); CREATE TABLE Transcripts ( transcript_id number, student_id number, date_of_transcript time, transcript_details text, PRIMARY KEY(transcript_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Behaviour_Monitoring ( behaviour_monitoring_id number, student_id number, behaviour_monitoring_details text, PRIMARY KEY(behaviour_monitoring_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Addresses ( address_id number, address_details text, PRIMARY KEY(address_id)); CREATE TABLE Ref_Event_Types ( event_type_code text, event_type_description text, PRIMARY KEY(event_type_code)); CREATE TABLE Ref_Achievement_Type ( achievement_type_code text, achievement_type_description text, PRIMARY KEY(achievement_type_code)); CREATE TABLE Ref_Address_Types ( address_type_code text, address_type_description text, PRIMARY KEY(address_type_code)); CREATE TABLE Ref_Detention_Type ( detention_type_code text, detention_type_description text, PRIMARY KEY(detention_type_code)); CREATE TABLE Student_Events ( event_id number, event_type_code text, student_id number, event_date time, other_details text, PRIMARY KEY(event_id), FOREIGN KEY(event_type_code) REFERENCES Ref_Event_Types (event_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Teachers ( teacher_id number, teacher_details text, PRIMARY KEY(teacher_id)); CREATE TABLE Student_Loans ( student_loan_id number, student_id number, date_of_loan time, amount_of_loan number, other_details text, PRIMARY KEY(student_loan_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Classes ( class_id number, student_id number, teacher_id number, class_details text, PRIMARY KEY(class_id), FOREIGN KEY(teacher_id) REFERENCES Teachers (teacher_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Students_Addresses ( student_address_id number, address_id number, address_type_code text, student_id number, date_from time, date_to time, PRIMARY KEY(student_address_id), FOREIGN KEY(address_type_code) REFERENCES Ref_Address_Types (address_type_code), FOREIGN KEY(address_id) REFERENCES Addresses (address_id), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Detention ( detention_id number, detention_type_code text, student_id number, datetime_detention_start time, datetime_detention_end time, detention_summary text, other_details text, PRIMARY KEY(detention_id), FOREIGN KEY(detention_type_code) REFERENCES Ref_Detention_Type (detention_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); CREATE TABLE Achievements ( achievement_id number, achievement_type_code text, student_id number, date_achievement time, achievement_details text, other_details text, PRIMARY KEY(achievement_id), FOREIGN KEY(achievement_type_code) REFERENCES Ref_Achievement_Type (achievement_type_code), FOREIGN KEY(student_id) REFERENCES Students (student_id)); \n### Question: Give me the detention start date for all the detention records.\n### Response (TSQL):",
    "sql": "SELECT datetime_detention_start FROM Detention",
    "dsql": "PROJECT datetime_detention_start FROM Detention "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: List all the author names.\n### Response (TSQL):",
    "sql": "SELECT name FROM Author",
    "dsql": "PROJECT name FROM Author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the names of all the authors?\n### Response (TSQL):",
    "sql": "SELECT name FROM Author",
    "dsql": "PROJECT name FROM Author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show all Client names and their addresses.\n### Response (TSQL):",
    "sql": "SELECT name ,  address FROM Client",
    "dsql": "PROJECT name, address FROM Client "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the names and addressed of all clients?\n### Response (TSQL):",
    "sql": "SELECT name ,  address FROM Client",
    "dsql": "PROJECT name, address FROM Client "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: List all Book titles, ISBNs, and sale prices.\n### Response (TSQL):",
    "sql": "SELECT title ,  isbn ,  SalePrice FROM Book",
    "dsql": "PROJECT title, isbn, SalePrice FROM Book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the titles, ISBNs, and sale prices for all books?\n### Response (TSQL):",
    "sql": "SELECT title ,  isbn ,  SalePrice FROM Book",
    "dsql": "PROJECT title, isbn, SalePrice FROM Book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: How many books do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Book",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Count the number of books.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Book",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: How many authors are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Author",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Count the number of authors.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Author",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: How many clients are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Client",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Client "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Return the number of clients.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Client",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Client "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: List names and addresses of all clients in alphabetical order by their names.\n### Response (TSQL):",
    "sql": "SELECT name ,  address FROM Client ORDER BY name",
    "dsql": "ORDER BY name FROM PROJECT name, address FROM Client "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the names and addressed of all clients, ordered alphabetically by name?\n### Response (TSQL):",
    "sql": "SELECT name ,  address FROM Client ORDER BY name",
    "dsql": "ORDER BY name FROM PROJECT name, address FROM Client "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show all book titles and corresponding author names.\n### Response (TSQL):",
    "sql": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn",
    "dsql": "PROJECT T3.title, T1.name FROM JOIN AS T1 FROM Author WITH JOIN AS T2 FROM Author_Book WITH AS T3 FROM Book ON T2.isbn = T3.isbn ON T2.Author = T1.idAuthor "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the names of all books and their corresponding authors?\n### Response (TSQL):",
    "sql": "SELECT T3.title ,  T1.name FROM Author AS T1 JOIN Author_Book AS T2 ON T2.Author  =  T1.idAuthor JOIN Book AS T3 ON T2.isbn  =  T3.isbn",
    "dsql": "PROJECT T3.title, T1.name FROM JOIN AS T1 FROM Author WITH JOIN AS T2 FROM Author_Book WITH AS T3 FROM Book ON T2.isbn = T3.isbn ON T2.Author = T1.idAuthor "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show all order ids and their client names.\n### Response (TSQL):",
    "sql": "SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient",
    "dsql": "PROJECT T1.idOrder, T2.name FROM JOIN AS T1 FROM Orders WITH AS T2 FROM Client ON T1.idClient = T2.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the ids of all orders and the corresponding client names?\n### Response (TSQL):",
    "sql": "SELECT T1.idOrder ,  T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient",
    "dsql": "PROJECT T1.idOrder, T2.name FROM JOIN AS T1 FROM Orders WITH AS T2 FROM Client ON T1.idClient = T2.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show all author names and the numbers of books each has written.\n### Response (TSQL):",
    "sql": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor",
    "dsql": "PROJECT T1.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.idAuthor FROM JOIN AS T1 FROM Author WITH AS T2 FROM Author_Book ON T1.idAuthor = T2.Author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the names of all the authors, and how many books has each written?\n### Response (TSQL):",
    "sql": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_Book AS T2 ON T1.idAuthor  =  T2.Author GROUP BY T1.idAuthor",
    "dsql": "PROJECT T1.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.idAuthor FROM JOIN AS T1 FROM Author WITH AS T2 FROM Author_Book ON T1.idAuthor = T2.Author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show all book isbns and the numbers of orders for each.\n### Response (TSQL):",
    "sql": "SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn",
    "dsql": "PROJECT isbn, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY isbn FROM Books_Order "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are all isbns for each book, and how many times has each been ordered?\n### Response (TSQL):",
    "sql": "SELECT isbn ,  count(*) FROM Books_Order GROUP BY isbn",
    "dsql": "PROJECT isbn, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY isbn FROM Books_Order "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show all book isbns and the total amount ordered for each.\n### Response (TSQL):",
    "sql": "SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn",
    "dsql": "PROJECT isbn, SUM(amount) FROM AGGREGATE SUM(amount), COUNT(*) GROUP BY isbn FROM Books_Order "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the isbns for all books, and what is the total amount ordered for each?\n### Response (TSQL):",
    "sql": "SELECT isbn ,  sum(amount) FROM Books_Order GROUP BY isbn",
    "dsql": "PROJECT isbn, SUM(amount) FROM AGGREGATE SUM(amount), COUNT(*) GROUP BY isbn FROM Books_Order "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show the book title corresponding to the book with the most number of orders.\n### Response (TSQL):",
    "sql": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.title FROM AGGREGATE COUNT(*) GROUP BY T1.isbn FROM JOIN AS T1 FROM Books_Order WITH AS T2 FROM Book ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What is the title of the book that has been ordered the greatest number of times?\n### Response (TSQL):",
    "sql": "SELECT T2.title FROM Books_Order AS T1 JOIN Book AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.title FROM AGGREGATE COUNT(*) GROUP BY T1.isbn FROM JOIN AS T1 FROM Books_Order WITH AS T2 FROM Book ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show the book title and purchase price of the book that has had the greatest amount in orders.\n### Response (TSQL):",
    "sql": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC SUM(amount) FROM PROJECT T2.title, T2.PurchasePrice FROM AGGREGATE SUM(amount), COUNT(*) GROUP BY T1.isbn FROM JOIN AS T1 FROM Books_Order WITH AS T2 FROM BOOk ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What is the title and purchase price of the book that has the highest total order amount?\n### Response (TSQL):",
    "sql": "SELECT T2.title ,  T2.PurchasePrice FROM Books_Order AS T1 JOIN BOOk AS T2 ON T1.isbn  =  T2.isbn GROUP BY T1.isbn ORDER BY sum(amount) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC SUM(amount) FROM PROJECT T2.title, T2.PurchasePrice FROM AGGREGATE SUM(amount), COUNT(*) GROUP BY T1.isbn FROM JOIN AS T1 FROM Books_Order WITH AS T2 FROM BOOk ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show the titles of books that have been ordered.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
    "dsql": "PROJECT DISTINCT T1.title FROM JOIN AS T1 FROM book WITH AS T2 FROM books_order ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the different titles of books that have been ordered in the past?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
    "dsql": "PROJECT DISTINCT T1.title FROM JOIN AS T1 FROM book WITH AS T2 FROM books_order ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show the names of clients who have ordered at least once.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
    "dsql": "PROJECT DISTINCT T1.name FROM JOIN AS T1 FROM Client WITH AS T2 FROM Orders ON T1.idClient = T2.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the names of the different clients who have made an order?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
    "dsql": "PROJECT DISTINCT T1.name FROM JOIN AS T1 FROM Client WITH AS T2 FROM Orders ON T1.idClient = T2.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show all client names and the number of orders each has made.\n### Response (TSQL):",
    "sql": "SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient",
    "dsql": "PROJECT T2.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.idClient FROM JOIN AS T1 FROM Orders WITH AS T2 FROM Client ON T1.idClient = T2.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the names of all the clients, and how many times has each of them ordered?\n### Response (TSQL):",
    "sql": "SELECT T2.name ,  count(*) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient",
    "dsql": "PROJECT T2.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.idClient FROM JOIN AS T1 FROM Orders WITH AS T2 FROM Client ON T1.idClient = T2.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What is the name of the client with the most number of orders?\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name FROM AGGREGATE COUNT(*) GROUP BY T1.idClient FROM JOIN AS T1 FROM Orders WITH AS T2 FROM Client ON T1.idClient = T2.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Give the name of the client who has made the most orders.\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient GROUP BY T1.idClient ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name FROM AGGREGATE COUNT(*) GROUP BY T1.idClient FROM JOIN AS T1 FROM Orders WITH AS T2 FROM Client ON T1.idClient = T2.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show the client names and their total amounts of books ordered.\n### Response (TSQL):",
    "sql": "SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient",
    "dsql": "PROJECT T2.name, SUM(T3.amount) FROM AGGREGATE COUNT(*), SUM(T3.amount) GROUP BY T1.idClient FROM JOIN AS T1 FROM Orders WITH JOIN AS T2 FROM Client WITH AS T1 FROM Orders ON T3.idOrder = T1.idOrder ON T1.idClient = T2.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the names of all the clients, and the total amount of books ordered by each?\n### Response (TSQL):",
    "sql": "SELECT T2.name ,  sum(T3.amount) FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient",
    "dsql": "PROJECT T2.name, SUM(T3.amount) FROM AGGREGATE COUNT(*), SUM(T3.amount) GROUP BY T1.idClient FROM JOIN AS T1 FROM Orders WITH JOIN AS T2 FROM Client WITH AS T1 FROM Orders ON T3.idOrder = T1.idOrder ON T1.idClient = T2.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show the client name who has the most total amount of books ordered.\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC SUM(T3.amount) FROM PROJECT T2.name FROM AGGREGATE COUNT(*), SUM(T3.amount) GROUP BY T1.idClient FROM JOIN AS T1 FROM Orders WITH JOIN AS T2 FROM Client WITH AS T1 FROM Orders ON T3.idOrder = T1.idOrder ON T1.idClient = T2.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What is the name of the client who has ordered the greatest total amount of books?\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM Orders AS T1 JOIN Client AS T2 ON T1.idClient  =  T2.idClient JOIN Books_Order AS T3 ON T3.idOrder  =  T1.idOrder GROUP BY T1.idClient ORDER BY sum(T3.amount) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC SUM(T3.amount) FROM PROJECT T2.name FROM AGGREGATE COUNT(*), SUM(T3.amount) GROUP BY T1.idClient FROM JOIN AS T1 FROM Orders WITH JOIN AS T2 FROM Client WITH AS T1 FROM Orders ON T3.idOrder = T1.idOrder ON T1.idClient = T2.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show all book titles for books that have no orders.\n### Response (TSQL):",
    "sql": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
    "dsql": "EXCEPT PROJECT title FROM book WITH PROJECT T1.title FROM JOIN AS T1 FROM book WITH AS T2 FROM books_order ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the titles of books that have never been ordered?\n### Response (TSQL):",
    "sql": "SELECT title FROM book EXCEPT SELECT T1.title FROM book AS T1 JOIN books_order AS T2 ON T1.isbn  =  T2.isbn",
    "dsql": "EXCEPT PROJECT title FROM book WITH PROJECT T1.title FROM JOIN AS T1 FROM book WITH AS T2 FROM books_order ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show all client names for clients who have not made orders.\n### Response (TSQL):",
    "sql": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
    "dsql": "EXCEPT PROJECT name FROM Client WITH PROJECT T1.name FROM JOIN AS T1 FROM Client WITH AS T2 FROM Orders ON T1.idClient = T2.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the names of clients who have never made an order?\n### Response (TSQL):",
    "sql": "SELECT name FROM Client EXCEPT SELECT T1.name FROM Client AS T1 JOIN Orders AS T2 ON T1.idClient  =  T2.idClient",
    "dsql": "EXCEPT PROJECT name FROM Client WITH PROJECT T1.name FROM JOIN AS T1 FROM Client WITH AS T2 FROM Orders ON T1.idClient = T2.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What is the maximum and the minimum sale price?\n### Response (TSQL):",
    "sql": "SELECT max(saleprice) ,  min(saleprice) FROM Book",
    "dsql": "PROJECT MAX(saleprice), MIN(saleprice) FROM AGGREGATE MAX(saleprice), MIN(saleprice) FROM Book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Give the maximum and minimum sale price of books.\n### Response (TSQL):",
    "sql": "SELECT max(saleprice) ,  min(saleprice) FROM Book",
    "dsql": "PROJECT MAX(saleprice), MIN(saleprice) FROM AGGREGATE MAX(saleprice), MIN(saleprice) FROM Book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What is the average purchase price and the average sale price?\n### Response (TSQL):",
    "sql": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
    "dsql": "PROJECT AVG(purchaseprice), AVG(saleprice) FROM AGGREGATE AVG(saleprice), AVG(purchaseprice) FROM Book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Give the average purchase price and average sale price for books.\n### Response (TSQL):",
    "sql": "SELECT avg(purchaseprice) ,  avg(saleprice) FROM Book",
    "dsql": "PROJECT AVG(purchaseprice), AVG(saleprice) FROM AGGREGATE AVG(saleprice), AVG(purchaseprice) FROM Book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What is the maximum difference between the sale price and purchase price?\n### Response (TSQL):",
    "sql": "SELECT max(saleprice - purchaseprice) FROM Book",
    "dsql": "PROJECT MAX(saleprice - purchaseprice) FROM AGGREGATE MAX(saleprice - purchaseprice) FROM Book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Return the largest difference in sale price and purchase price.\n### Response (TSQL):",
    "sql": "SELECT max(saleprice - purchaseprice) FROM Book",
    "dsql": "PROJECT MAX(saleprice - purchaseprice) FROM AGGREGATE MAX(saleprice - purchaseprice) FROM Book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: List all book titles which have sale prices higher than the average.\n### Response (TSQL):",
    "sql": "SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)",
    "dsql": "PROJECT title FROM SELECT WHERE saleprice > PROJECT AVG(saleprice) FROM AGGREGATE AVG(saleprice) FROM book FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the titles of books with sale prices above the average sale price across all books?\n### Response (TSQL):",
    "sql": "SELECT title FROM book WHERE saleprice  >  (SELECT avg(saleprice) FROM book)",
    "dsql": "PROJECT title FROM SELECT WHERE saleprice > PROJECT AVG(saleprice) FROM AGGREGATE AVG(saleprice) FROM book FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: List all book titles which have the lowest sale price .\n### Response (TSQL):",
    "sql": "select title from book order by saleprice asc limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC saleprice FROM PROJECT title FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the titles of books that have a sale price equal to the lowest sale price across all books ?\n### Response (TSQL):",
    "sql": "select title from book order by saleprice asc limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC saleprice FROM PROJECT title FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: List all book titles which have highest purchase prices .\n### Response (TSQL):",
    "sql": "select title from book order by purchaseprice  desc limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC purchaseprice FROM PROJECT title FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the titles of books with the highest purchase price across all books ?\n### Response (TSQL):",
    "sql": "select title from book order by purchaseprice  desc limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC purchaseprice FROM PROJECT title FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What is the average sale price of books written by George Orwell?\n### Response (TSQL):",
    "sql": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
    "dsql": "PROJECT AVG(saleprice) FROM AGGREGATE AVG(saleprice) FROM SELECT WHERE T3.name = \"George Orwell\" FROM JOIN AS T1 FROM Book WITH JOIN AS T2 FROM Author_book WITH AS T3 FROM Author ON T2.Author = T3.idAuthor ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Give the average sale price of books authored by George Orwell.\n### Response (TSQL):",
    "sql": "SELECT avg(saleprice) FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\"",
    "dsql": "PROJECT AVG(saleprice) FROM AGGREGATE AVG(saleprice) FROM SELECT WHERE T3.name = \"George Orwell\" FROM JOIN AS T1 FROM Book WITH JOIN AS T2 FROM Author_book WITH AS T3 FROM Author ON T2.Author = T3.idAuthor ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are sale prices of books written by Plato?\n### Response (TSQL):",
    "sql": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\"",
    "dsql": "PROJECT saleprice FROM SELECT WHERE T3.name = \"Plato\" FROM JOIN AS T1 FROM Book WITH JOIN AS T2 FROM Author_book WITH AS T3 FROM Author ON T2.Author = T3.idAuthor ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Return the sale prices of books authored by Plato.\n### Response (TSQL):",
    "sql": "SELECT saleprice FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\"",
    "dsql": "PROJECT saleprice FROM SELECT WHERE T3.name = \"Plato\" FROM JOIN AS T1 FROM Book WITH JOIN AS T2 FROM Author_book WITH AS T3 FROM Author ON T2.Author = T3.idAuthor ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What is the title of the book written by George Orwell that has the lowest sale price?\n### Response (TSQL):",
    "sql": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY T1.saleprice FROM PROJECT T1.title FROM SELECT WHERE T3.name = \"George Orwell\" FROM JOIN AS T1 FROM Book WITH JOIN AS T2 FROM Author_book WITH AS T3 FROM Author ON T2.Author = T3.idAuthor ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Give the title of book by George Orwell that has the lowest saleprice.\n### Response (TSQL):",
    "sql": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"George Orwell\" ORDER BY T1.saleprice LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY T1.saleprice FROM PROJECT T1.title FROM SELECT WHERE T3.name = \"George Orwell\" FROM JOIN AS T1 FROM Book WITH JOIN AS T2 FROM Author_book WITH AS T3 FROM Author ON T2.Author = T3.idAuthor ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What is the title of the book written by Plato has price lower than the average sale price of all books?\n### Response (TSQL):",
    "sql": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)",
    "dsql": "PROJECT T1.title FROM SELECT WHERE T3.name = \"Plato\" AND T1.saleprice < PROJECT AVG(saleprice) FROM AGGREGATE AVG(saleprice) FROM Book FROM JOIN AS T1 FROM Book WITH JOIN AS T2 FROM Author_book WITH AS T3 FROM Author ON T2.Author = T3.idAuthor ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Give the titles of books authored by Plato that have a sale price lower than the average sale price across all books.\n### Response (TSQL):",
    "sql": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name  =  \"Plato\" AND T1.saleprice  <  (SELECT avg(saleprice) FROM Book)",
    "dsql": "PROJECT T1.title FROM SELECT WHERE T3.name = \"Plato\" AND T1.saleprice < PROJECT AVG(saleprice) FROM AGGREGATE AVG(saleprice) FROM Book FROM JOIN AS T1 FROM Book WITH JOIN AS T2 FROM Author_book WITH AS T3 FROM Author ON T2.Author = T3.idAuthor ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Who is the author of the book \"Pride and Prejudice\"?\n### Response (TSQL):",
    "sql": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\"",
    "dsql": "PROJECT T3.name FROM SELECT WHERE T1.title = \"Pride and Prejudice\" FROM JOIN AS T1 FROM Book WITH JOIN AS T2 FROM Author_book WITH AS T3 FROM Author ON T2.Author = T3.idAuthor ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Give the name of the author who wrote the book titled Pride and Prejudice.\n### Response (TSQL):",
    "sql": "SELECT T3.name FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T1.title  =  \"Pride and Prejudice\"",
    "dsql": "PROJECT T3.name FROM SELECT WHERE T1.title = \"Pride and Prejudice\" FROM JOIN AS T1 FROM Book WITH JOIN AS T2 FROM Author_book WITH AS T3 FROM Author ON T2.Author = T3.idAuthor ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: List titles of all books published by an author whose name contains the string 'Plato'?\n### Response (TSQL):",
    "sql": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\"",
    "dsql": "PROJECT T1.title FROM SELECT WHERE T3.name LIKE \"%Plato%\" FROM JOIN AS T1 FROM Book WITH JOIN AS T2 FROM Author_book WITH AS T3 FROM Author ON T2.Author = T3.idAuthor ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the titles of all books written by an author with a name that contains Plato?\n### Response (TSQL):",
    "sql": "SELECT T1.title FROM Book AS T1 JOIN Author_book AS T2 ON T1.isbn  =  T2.isbn JOIN Author AS T3 ON T2.Author  =  T3.idAuthor WHERE T3.name LIKE \"%Plato%\"",
    "dsql": "PROJECT T1.title FROM SELECT WHERE T3.name LIKE \"%Plato%\" FROM JOIN AS T1 FROM Book WITH JOIN AS T2 FROM Author_book WITH AS T3 FROM Author ON T2.Author = T3.idAuthor ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: How many orders do we have for \"Pride and Prejudice\"?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.title = \"Pride and Prejudice\" FROM JOIN AS T1 FROM Book WITH AS T2 FROM Books_Order ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Return the number of orders received for Pride and Prejudice.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.title = \"Pride and Prejudice\" FROM JOIN AS T1 FROM Book WITH AS T2 FROM Books_Order ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show ids for orders including both \"Pride and Prejudice\" and \"The Little Prince\".\n### Response (TSQL):",
    "sql": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\"",
    "dsql": "INTERSECT PROJECT idOrder FROM SELECT WHERE T1.title = \"Pride and Prejudice\" FROM JOIN AS T1 FROM Book WITH AS T2 FROM Books_Order ON T1.isbn = T2.isbn WITH PROJECT idOrder FROM SELECT WHERE T1.title = \"The Little Prince\" FROM JOIN AS T1 FROM Book WITH AS T2 FROM Books_Order ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the order ids for orders that include both Pride and Prejudice and The Little Prince?\n### Response (TSQL):",
    "sql": "SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"Pride and Prejudice\" INTERSECT SELECT idOrder FROM Book AS T1 JOIN Books_Order AS T2 ON T1.isbn  =  T2.isbn WHERE T1.title  =  \"The Little Prince\"",
    "dsql": "INTERSECT PROJECT idOrder FROM SELECT WHERE T1.title = \"Pride and Prejudice\" FROM JOIN AS T1 FROM Book WITH AS T2 FROM Books_Order ON T1.isbn = T2.isbn WITH PROJECT idOrder FROM SELECT WHERE T1.title = \"The Little Prince\" FROM JOIN AS T1 FROM Book WITH AS T2 FROM Books_Order ON T1.isbn = T2.isbn "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show all book isbns which were ordered by both client Peter Doe and client James Smith.\n### Response (TSQL):",
    "sql": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\"",
    "dsql": "INTERSECT PROJECT T2.isbn FROM SELECT WHERE T3.name = \"Peter Doe\" FROM JOIN AS T2 FROM Books_Order WITH JOIN AS T1 FROM Orders WITH AS T3 FROM Client ON T1.idClient = T3.idClient ON T1.idOrder = T2.idOrder WITH PROJECT T2.isbn FROM SELECT WHERE T3.name = \"James Smith\" FROM JOIN AS T2 FROM Books_Order WITH JOIN AS T1 FROM Orders WITH AS T3 FROM Client ON T1.idClient = T3.idClient ON T1.idOrder = T2.idOrder "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the isbns of books ordered by both clients named Peter Doe and James Smith?\n### Response (TSQL):",
    "sql": "SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"Peter Doe\" INTERSECT SELECT T2.isbn FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient WHERE T3.name  =  \"James Smith\"",
    "dsql": "INTERSECT PROJECT T2.isbn FROM SELECT WHERE T3.name = \"Peter Doe\" FROM JOIN AS T2 FROM Books_Order WITH JOIN AS T1 FROM Orders WITH AS T3 FROM Client ON T1.idClient = T3.idClient ON T1.idOrder = T2.idOrder WITH PROJECT T2.isbn FROM SELECT WHERE T3.name = \"James Smith\" FROM JOIN AS T2 FROM Books_Order WITH JOIN AS T1 FROM Orders WITH AS T3 FROM Client ON T1.idClient = T3.idClient ON T1.idOrder = T2.idOrder "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Find the title of books which are ordered by client Peter Doe but not client James Smith.\n### Response (TSQL):",
    "sql": "SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"Peter Doe\" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"James Smith\"",
    "dsql": "EXCEPT PROJECT T4.title FROM SELECT WHERE T3.name = \"Peter Doe\" FROM JOIN AS T2 FROM Books_Order WITH JOIN AS T1 FROM Orders WITH JOIN AS T3 FROM Client WITH AS T4 FROM book ON T2.ISBN = T4.isbn ON T1.idClient = T3.idClient ON T1.idOrder = T2.idOrder WITH PROJECT T4.title FROM SELECT WHERE T3.name = \"James Smith\" FROM JOIN AS T2 FROM Books_Order WITH JOIN AS T1 FROM Orders WITH JOIN AS T3 FROM Client WITH AS T4 FROM book ON T2.ISBN = T4.isbn ON T1.idClient = T3.idClient ON T1.idOrder = T2.idOrder "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the titles of books that the client Peter Doe ordered, but the client James Smith did not?\n### Response (TSQL):",
    "sql": "SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"Peter Doe\" EXCEPT SELECT T4.title FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN book AS T4 ON T2.ISBN  =  T4.isbn WHERE T3.name  =  \"James Smith\"",
    "dsql": "EXCEPT PROJECT T4.title FROM SELECT WHERE T3.name = \"Peter Doe\" FROM JOIN AS T2 FROM Books_Order WITH JOIN AS T1 FROM Orders WITH JOIN AS T3 FROM Client WITH AS T4 FROM book ON T2.ISBN = T4.isbn ON T1.idClient = T3.idClient ON T1.idOrder = T2.idOrder WITH PROJECT T4.title FROM SELECT WHERE T3.name = \"James Smith\" FROM JOIN AS T2 FROM Books_Order WITH JOIN AS T1 FROM Orders WITH JOIN AS T3 FROM Client WITH AS T4 FROM book ON T2.ISBN = T4.isbn ON T1.idClient = T3.idClient ON T1.idOrder = T2.idOrder "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: Show all client names who have orders for \"Pride and Prejudice\".\n### Response (TSQL):",
    "sql": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\"",
    "dsql": "PROJECT T3.name FROM SELECT WHERE T4.title = \"Pride and Prejudice\" FROM JOIN AS T3 FROM Client WITH JOIN AS T1 FROM Orders WITH JOIN AS T2 FROM Books_Order WITH AS T4 FROM Book ON T4.isbn = T2.isbn ON T1.idOrder = T2.idOrder ON T1.idClient = T3.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Client ( IdClient text, Name text, Address text, NumCC text, PRIMARY KEY(IdClient)); CREATE TABLE Orders ( IdOrder text, IdClient text, DateOrder time, DateExped time, PRIMARY KEY(IdOrder)); CREATE TABLE Author ( idAuthor number, Name text, PRIMARY KEY(idAuthor)); CREATE TABLE Book ( ISBN text, Title text, Author text, PurchasePrice number, SalePrice number, PRIMARY KEY(ISBN)); CREATE TABLE Author_Book ( ISBN text, Author number, PRIMARY KEY(ISBN), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); CREATE TABLE Books_Order ( ISBN text, IdOrder text, amount number, PRIMARY KEY(ISBN), FOREIGN KEY(IdOrder) REFERENCES Orders (IdOrder), FOREIGN KEY(ISBN) REFERENCES Book (ISBN)); \n### Question: What are the names of clients who have ordered Pride and Prejudice?\n### Response (TSQL):",
    "sql": "SELECT T3.name FROM Orders AS T1 JOIN Books_Order AS T2 ON T1.idOrder  =  T2.idOrder JOIN Client AS T3 ON T1.idClient  =  T3.idClient JOIN Book AS T4 ON T4.isbn  =  T2.isbn WHERE T4.title  =  \"Pride and Prejudice\"",
    "dsql": "PROJECT T3.name FROM SELECT WHERE T4.title = \"Pride and Prejudice\" FROM JOIN AS T3 FROM Client WITH JOIN AS T1 FROM Orders WITH JOIN AS T2 FROM Books_Order WITH AS T4 FROM Book ON T4.isbn = T2.isbn ON T1.idOrder = T2.idOrder ON T1.idClient = T3.idClient "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: How many books are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM book",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: List the titles of books in ascending alphabetical order.\n### Response (TSQL):",
    "sql": "SELECT Title FROM book ORDER BY Title ASC",
    "dsql": "ORDER BY ASC Title FROM PROJECT Title FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: List the titles of books in descending order of pages.\n### Response (TSQL):",
    "sql": "SELECT Title FROM book ORDER BY Pages DESC",
    "dsql": "ORDER BY DESC Pages FROM PROJECT Title FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: What are the types and release dates of books?\n### Response (TSQL):",
    "sql": "SELECT TYPE ,  Release FROM book",
    "dsql": "PROJECT TYPE, Release FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: What are the maximum and minimum number of chapters for each book?\n### Response (TSQL):",
    "sql": "SELECT max(Chapters) ,  min(Chapters) FROM book",
    "dsql": "PROJECT MAX(Chapters), MIN(Chapters) FROM AGGREGATE MIN(Chapters), MAX(Chapters) FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: What are the titles of books that are not \"Poet\"?\n### Response (TSQL):",
    "sql": "SELECT Title FROM book WHERE TYPE != \"Poet\"",
    "dsql": "PROJECT Title FROM SELECT WHERE TYPE <> \"Poet\" FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: What is the average rating in reviews?\n### Response (TSQL):",
    "sql": "SELECT avg(Rating) FROM review",
    "dsql": "PROJECT AVG(Rating) FROM AGGREGATE AVG(Rating) FROM review "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: What are the titles and ratings of books?\n### Response (TSQL):",
    "sql": "SELECT T1.Title ,  T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID",
    "dsql": "PROJECT T1.Title, T2.Rating FROM JOIN AS T1 FROM book WITH AS T2 FROM review ON T1.Book_ID = T2.Book_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: What is the rating of the book with the largest number of chapters?\n### Response (TSQL):",
    "sql": "SELECT T2.Rating FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Chapters DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC T1.Chapters FROM PROJECT T2.Rating FROM JOIN AS T1 FROM book WITH AS T2 FROM review ON T1.Book_ID = T2.Book_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: What is the rank of the book with the smallest number of pages?\n### Response (TSQL):",
    "sql": "SELECT T2.Rank FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T1.Pages ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC T1.Pages FROM PROJECT T2.Rank FROM JOIN AS T1 FROM book WITH AS T2 FROM review ON T1.Book_ID = T2.Book_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: What is the title of the book with the highest rank in the review?\n### Response (TSQL):",
    "sql": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rank LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY T2.Rank FROM PROJECT T1.Title FROM JOIN AS T1 FROM book WITH AS T2 FROM review ON T1.Book_ID = T2.Book_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: What is the average number of readers for books of type \"Novel\"?\n### Response (TSQL):",
    "sql": "SELECT avg(T2.Readers_in_Million) FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID WHERE T1.Type  =  \"Novel\"",
    "dsql": "PROJECT AVG(T2.Readers_in_Million) FROM AGGREGATE AVG(T2.Readers_in_Million) FROM SELECT WHERE T1.Type = \"Novel\" FROM JOIN AS T1 FROM book WITH AS T2 FROM review ON T1.Book_ID = T2.Book_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: For each book type return the type and the number of books of that type.\n### Response (TSQL):",
    "sql": "SELECT TYPE ,  COUNT(*) FROM book GROUP BY TYPE",
    "dsql": "PROJECT TYPE, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY TYPE FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: What is the most common type of books?\n### Response (TSQL):",
    "sql": "SELECT TYPE FROM book GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT TYPE FROM AGGREGATE COUNT(*) GROUP BY TYPE FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: What are the types of books that have at least three books belonging to?\n### Response (TSQL):",
    "sql": "SELECT TYPE FROM book GROUP BY TYPE HAVING COUNT(*)  >=  3",
    "dsql": "PROJECT TYPE FROM SELECT WHERE COUNT(*) >= 3 FROM AGGREGATE COUNT(*) GROUP BY TYPE FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: List the titles of books in ascending order of the ratings in review?\n### Response (TSQL):",
    "sql": "SELECT T1.Title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Rating ASC",
    "dsql": "ORDER BY ASC T2.Rating FROM PROJECT T1.Title FROM JOIN AS T1 FROM book WITH AS T2 FROM review ON T1.Book_ID = T2.Book_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: List the title and audio length for all the books in descending order of the number of readers.\n### Response (TSQL):",
    "sql": "SELECT T1.Title ,  T1.audio FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID ORDER BY T2.Readers_in_Million DESC",
    "dsql": "ORDER BY DESC T2.Readers_in_Million FROM PROJECT T1.Title, T1.audio FROM JOIN AS T1 FROM book WITH AS T2 FROM review ON T1.Book_ID = T2.Book_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: How many books do not have reviews?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM review)",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Book_ID NOT IN PROJECT Book_ID FROM review FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: Show the types of books that have both books with more than 75 chapters and books with less than 50 chapters.\n### Response (TSQL):",
    "sql": "SELECT TYPE FROM book WHERE Chapters  >  75 INTERSECT SELECT TYPE FROM book WHERE Chapters  <  50",
    "dsql": "INTERSECT PROJECT TYPE FROM SELECT WHERE Chapters > 75 FROM book WITH PROJECT TYPE FROM SELECT WHERE Chapters < 50 FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: How many distinct types of book are there?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT TYPE) FROM book",
    "dsql": "PROJECT COUNT(DISTINCT TYPE) FROM AGGREGATE COUNT(DISTINCT TYPE) FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE book ( Book_ID number, Title text, Type text, Pages number, Chapters number, Audio text, Release text, PRIMARY KEY(Book_ID)); CREATE TABLE review ( Review_ID number, Book_ID number, Rating number, Readers_in_Million number, Rank number, PRIMARY KEY(Review_ID), FOREIGN KEY(Book_ID) REFERENCES book (Book_ID)); \n### Question: What are the type and title of the books that are not rated?\n### Response (TSQL):",
    "sql": "SELECT TYPE ,  title FROM book EXCEPT SELECT T1.type ,  T1.title FROM book AS T1 JOIN review AS T2 ON T1.Book_ID  =  T2.Book_ID;",
    "dsql": "EXCEPT PROJECT TYPE, title FROM book WITH PROJECT T1.type, T1.title FROM JOIN AS T1 FROM book WITH AS T2 FROM review ON T1.Book_ID = T2.Book_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: How many customers are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM customer",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Count the number of customers.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM customer",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: List the names of customers in ascending order of level of membership.\n### Response (TSQL):",
    "sql": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
    "dsql": "ORDER BY ASC Level_of_Membership FROM PROJECT Name FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Sort all the customers by the level of membership in ascending order, and return the customer names.\n### Response (TSQL):",
    "sql": "SELECT Name FROM customer ORDER BY Level_of_Membership ASC",
    "dsql": "ORDER BY ASC Level_of_Membership FROM PROJECT Name FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: What are the nationalities and card credits of customers?\n### Response (TSQL):",
    "sql": "SELECT Nationality ,  Card_Credit FROM customer",
    "dsql": "PROJECT Nationality, Card_Credit FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Find the nationality and card credit of each customer.\n### Response (TSQL):",
    "sql": "SELECT Nationality ,  Card_Credit FROM customer",
    "dsql": "PROJECT Nationality, Card_Credit FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Show the names of customers with nationality \"England\" or \"Australia\".\n### Response (TSQL):",
    "sql": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\"",
    "dsql": "PROJECT Name FROM SELECT WHERE Nationality = \"England\" OR Nationality = \"Australia\" FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Which customers have nationality \"England\" or \"Australia\"? Give me their names.\n### Response (TSQL):",
    "sql": "SELECT Name FROM customer WHERE Nationality  =  \"England\" OR Nationality  =  \"Australia\"",
    "dsql": "PROJECT Name FROM SELECT WHERE Nationality = \"England\" OR Nationality = \"Australia\" FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: What is the average card credit of customers with membership level higher than 1?\n### Response (TSQL):",
    "sql": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1",
    "dsql": "PROJECT AVG(Card_Credit) FROM AGGREGATE AVG(Card_Credit) FROM SELECT WHERE Level_of_Membership > 1 FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Find the average card credit customers whose membership level is above 1.\n### Response (TSQL):",
    "sql": "SELECT avg(Card_Credit) FROM customer WHERE Level_of_Membership  >  1",
    "dsql": "PROJECT AVG(Card_Credit) FROM AGGREGATE AVG(Card_Credit) FROM SELECT WHERE Level_of_Membership > 1 FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: What is the card credit of the customer with the highest membership level?\n### Response (TSQL):",
    "sql": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC Level_of_Membership FROM PROJECT Card_Credit FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Find the customer with the highest membership level and return his or her card credit.\n### Response (TSQL):",
    "sql": "SELECT Card_Credit FROM customer ORDER BY Level_of_Membership DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC Level_of_Membership FROM PROJECT Card_Credit FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Show different nationalities of customers, along with the number of customers of each nationality.\n### Response (TSQL):",
    "sql": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality",
    "dsql": "PROJECT Nationality, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Nationality FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: How many customers are associated with each nationality? List the nationality and the number of customers.\n### Response (TSQL):",
    "sql": "SELECT Nationality ,  COUNT(*) FROM customer GROUP BY Nationality",
    "dsql": "PROJECT Nationality, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Nationality FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Show the most common nationality of customers.\n### Response (TSQL):",
    "sql": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Nationality FROM AGGREGATE COUNT(*) GROUP BY Nationality FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Which nationality does the most customers have?\n### Response (TSQL):",
    "sql": "SELECT Nationality FROM customer GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Nationality FROM AGGREGATE COUNT(*) GROUP BY Nationality FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Show the nations that have both customers with card credit smaller than 50 and customers with card credit bigger than 75.\n### Response (TSQL):",
    "sql": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75",
    "dsql": "INTERSECT PROJECT Nationality FROM SELECT WHERE Card_Credit < 50 FROM customer WITH PROJECT Nationality FROM SELECT WHERE Card_Credit > 75 FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Which nations have both customers with card credit above 50 and customers with card credit below 75.\n### Response (TSQL):",
    "sql": "SELECT Nationality FROM customer WHERE Card_Credit  <  50 INTERSECT SELECT Nationality FROM customer WHERE Card_Credit  >  75",
    "dsql": "INTERSECT PROJECT Nationality FROM SELECT WHERE Card_Credit < 50 FROM customer WITH PROJECT Nationality FROM SELECT WHERE Card_Credit > 75 FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Show the names of customers and names of dishes they order.\n### Response (TSQL):",
    "sql": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID",
    "dsql": "PROJECT T1.Name, T2.Dish_Name FROM JOIN AS T1 FROM customer WITH AS T2 FROM customer_order ON T1.Customer_ID = T2.Customer_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: For each order, return the customer name and the dish name.\n### Response (TSQL):",
    "sql": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID",
    "dsql": "PROJECT T1.Name, T2.Dish_Name FROM JOIN AS T1 FROM customer WITH AS T2 FROM customer_order ON T1.Customer_ID = T2.Customer_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Show the names of customers and names of dishes they order, in descending order of the quantity of dish.\n### Response (TSQL):",
    "sql": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC",
    "dsql": "ORDER BY DESC T2.Quantity FROM PROJECT T1.Name, T2.Dish_Name FROM JOIN AS T1 FROM customer WITH AS T2 FROM customer_order ON T1.Customer_ID = T2.Customer_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: For each order, find the customer name and the dish name. Sort the result in descending order of the quantity of dish.\n### Response (TSQL):",
    "sql": "SELECT T1.Name ,  T2.Dish_Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID ORDER BY T2.Quantity DESC",
    "dsql": "ORDER BY DESC T2.Quantity FROM PROJECT T1.Name, T2.Dish_Name FROM JOIN AS T1 FROM customer WITH AS T2 FROM customer_order ON T1.Customer_ID = T2.Customer_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Show each customer name and the total quantities of dishes ordered by that customer.\n### Response (TSQL):",
    "sql": "SELECT T1.Name ,  sum(T2.Quantity) FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name",
    "dsql": "PROJECT T1.Name, SUM(T2.Quantity) FROM AGGREGATE SUM(T2.Quantity), COUNT(*) GROUP BY T1.Name FROM JOIN AS T1 FROM customer WITH AS T2 FROM customer_order ON T1.Customer_ID = T2.Customer_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: What is the total quantities of dishes ordered by each customer ? List the customer name and the total quantity .\n### Response (TSQL):",
    "sql": "select t1.name ,  sum(t2.quantity) from customer as t1 join customer_order as t2 on t1.customer_id  =  t2.customer_id group by t1.name",
    "dsql": "PROJECT t1.name, SUM(t2.quantity) FROM AGGREGATE SUM(t2.quantity), COUNT(*) GROUP BY t1.name FROM JOIN AS t1 FROM customer WITH AS t2 FROM customer_order ON t1.customer_id = t2.customer_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Show the customers with total quantity of order bigger than 1.\n### Response (TSQL):",
    "sql": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1",
    "dsql": "PROJECT T1.Name FROM SELECT WHERE SUM(T2.Quantity) > 1 FROM AGGREGATE SUM(T2.Quantity), COUNT(*) GROUP BY T1.Name FROM JOIN AS T1 FROM customer WITH AS T2 FROM customer_order ON T1.Customer_ID = T2.Customer_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Which customers have total order quantity greater than 1? Give me the customer names.\n### Response (TSQL):",
    "sql": "SELECT T1.Name FROM customer AS T1 JOIN customer_order AS T2 ON T1.Customer_ID  =  T2.Customer_ID GROUP BY T1.Name HAVING sum(T2.Quantity)  >  1",
    "dsql": "PROJECT T1.Name FROM SELECT WHERE SUM(T2.Quantity) > 1 FROM AGGREGATE SUM(T2.Quantity), COUNT(*) GROUP BY T1.Name FROM JOIN AS T1 FROM customer WITH AS T2 FROM customer_order ON T1.Customer_ID = T2.Customer_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Show distinct managers of branches.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT Manager FROM branch",
    "dsql": "PROJECT DISTINCT Manager FROM branch "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Who are the distinct managers of branches?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT Manager FROM branch",
    "dsql": "PROJECT DISTINCT Manager FROM branch "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: List the names of customers that do not have any order.\n### Response (TSQL):",
    "sql": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
    "dsql": "PROJECT name FROM SELECT WHERE Customer_ID NOT IN PROJECT Customer_ID FROM customer_order FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customer ( Customer_ID number, Name text, Nationality text, Card_Credit number, Level_of_Membership number, PRIMARY KEY(Customer_ID)); CREATE TABLE branch ( Branch_ID number, Manager text, Years_opened number, Location_of_office text, PRIMARY KEY(Branch_ID)); CREATE TABLE customer_order ( Customer_ID number, Branch_ID number, Dish_Name text, Quantity number, PRIMARY KEY(Customer_ID), FOREIGN KEY(Branch_ID) REFERENCES branch (Branch_ID), FOREIGN KEY(Customer_ID) REFERENCES customer (Customer_ID)); \n### Question: Which customers do not have any order? Give me the customer names.\n### Response (TSQL):",
    "sql": "SELECT name FROM customer WHERE Customer_ID NOT IN (SELECT Customer_ID FROM customer_order)",
    "dsql": "PROJECT name FROM SELECT WHERE Customer_ID NOT IN PROJECT Customer_ID FROM customer_order FROM customer "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: How many members are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM member",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM member "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: List the names of members in ascending order of age.\n### Response (TSQL):",
    "sql": "SELECT Name FROM member ORDER BY Age ASC",
    "dsql": "ORDER BY ASC Age FROM PROJECT Name FROM member "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What are the names and nationalities of the members?\n### Response (TSQL):",
    "sql": "SELECT Name ,  Nationality FROM member",
    "dsql": "PROJECT Name, Nationality FROM member "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: List the names of members whose nationality is not `` England '' .\n### Response (TSQL):",
    "sql": "select name from member where nationality != \"england\"",
    "dsql": "PROJECT name FROM SELECT WHERE nationality <> \"england\" FROM member "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show the names of members whose age is either 19 or 20.\n### Response (TSQL):",
    "sql": "SELECT Name FROM member WHERE Age  =  19 OR Age  =  20",
    "dsql": "PROJECT Name FROM SELECT WHERE Age = 19 OR Age = 20 FROM member "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What is the name of the oldest member?\n### Response (TSQL):",
    "sql": "SELECT Name FROM member ORDER BY Age DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC Age FROM PROJECT Name FROM member "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show different nationalities along with the number of members of each nationality.\n### Response (TSQL):",
    "sql": "SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality",
    "dsql": "PROJECT Nationality, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Nationality FROM member "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Please show the most common nationality of members.\n### Response (TSQL):",
    "sql": "SELECT Nationality ,  COUNT(*) FROM member GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Nationality, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Nationality FROM member "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show the nations that have at least two members.\n### Response (TSQL):",
    "sql": "SELECT Nationality FROM member GROUP BY Nationality HAVING COUNT(*)  >=  2",
    "dsql": "PROJECT Nationality FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY Nationality FROM member "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show the names of club leaders and the names of clubs they joined.\n### Response (TSQL):",
    "sql": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID",
    "dsql": "PROJECT T3.Name, T2.Club_Name FROM JOIN AS T2 FROM club WITH JOIN AS T1 FROM club_leader WITH AS T3 FROM member ON T1.Member_ID = T3.Member_ID ON T1.Club_ID = T2.Club_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show the names of club leaders of clubs with overall ranking higher than 100.\n### Response (TSQL):",
    "sql": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Overall_Ranking  <  100",
    "dsql": "PROJECT T3.Name, T2.Club_Name FROM SELECT WHERE T2.Overall_Ranking < 100 FROM JOIN AS T2 FROM club WITH JOIN AS T1 FROM club_leader WITH AS T3 FROM member ON T1.Member_ID = T3.Member_ID ON T1.Club_ID = T2.Club_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show the names of club leaders that joined their club before 2018.\n### Response (TSQL):",
    "sql": "SELECT T3.Name ,  T2.Club_Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T1.Year_Join  <  2018",
    "dsql": "PROJECT T3.Name, T2.Club_Name FROM SELECT WHERE T1.Year_Join < 2018 FROM JOIN AS T2 FROM club WITH JOIN AS T1 FROM club_leader WITH AS T3 FROM member ON T1.Member_ID = T3.Member_ID ON T1.Club_ID = T2.Club_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show the name of the leader of the club named \"Houston\".\n### Response (TSQL):",
    "sql": "SELECT T3.Name FROM club_leader AS T1 JOIN club AS T2 ON T1.Club_ID  =  T2.Club_ID JOIN member AS T3 ON T1.Member_ID  =  T3.Member_ID WHERE T2.Club_Name  =  \"Houston\"",
    "dsql": "PROJECT T3.Name FROM SELECT WHERE T2.Club_Name = \"Houston\" FROM JOIN AS T2 FROM club WITH JOIN AS T1 FROM club_leader WITH AS T3 FROM member ON T1.Member_ID = T3.Member_ID ON T1.Club_ID = T2.Club_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: List the names of members that are not club leaders.\n### Response (TSQL):",
    "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM club_leader)",
    "dsql": "PROJECT Name FROM SELECT WHERE Member_ID NOT IN PROJECT Member_ID FROM club_leader FROM member "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Show the nations that have both members older than 22 and members younger than 19.\n### Response (TSQL):",
    "sql": "SELECT Nationality FROM member WHERE Age  >  22 INTERSECT SELECT Nationality FROM member WHERE Age  <  19",
    "dsql": "INTERSECT PROJECT Nationality FROM SELECT WHERE Age > 22 FROM member WITH PROJECT Nationality FROM SELECT WHERE Age < 19 FROM member "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: What is the average age of all the club leaders?\n### Response (TSQL):",
    "sql": "SELECT avg(T2.age) FROM club_leader AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id",
    "dsql": "PROJECT AVG(T2.age) FROM AGGREGATE AVG(T2.age) FROM JOIN AS T1 FROM club_leader WITH AS T2 FROM member ON T1.member_id = T2.member_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE member ( Member_ID number, Name text, Nationality text, Age number, PRIMARY KEY(Member_ID)); CREATE TABLE club ( Club_ID number, Overall_Ranking number, Team_Leader text, Club_Name text, PRIMARY KEY(Club_ID)); CREATE TABLE club_leader ( Club_ID number, Member_ID number, Year_Join text, PRIMARY KEY(Club_ID), FOREIGN KEY(Member_ID) REFERENCES member (Member_ID), FOREIGN KEY(Club_ID) REFERENCES club (Club_ID)); \n### Question: Which club name contains the string 'state'?\n### Response (TSQL):",
    "sql": "SELECT club_name FROM club WHERE club_name LIKE '%state%'",
    "dsql": "PROJECT club_name FROM SELECT WHERE club_name LIKE '%state%' FROM club "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List all collections' subset. List the subsets' names.\n### Response (TSQL):",
    "sql": "SELECT Collection_Subset_Name FROM Collection_Subsets;",
    "dsql": "PROJECT Collection_Subset_Name FROM Collection_Subsets "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the collection susbset names?\n### Response (TSQL):",
    "sql": "SELECT Collection_Subset_Name FROM Collection_Subsets;",
    "dsql": "PROJECT Collection_Subset_Name FROM Collection_Subsets "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is detail of collection subset with name 'Top collection'?\n### Response (TSQL):",
    "sql": "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = \"Top collection\";",
    "dsql": "PROJECT Collecrtion_Subset_Details FROM SELECT WHERE Collection_Subset_Name = \"Top collection\" FROM Collection_Subsets "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What collection details are there on the subset named 'Top collection'?\n### Response (TSQL):",
    "sql": "SELECT Collecrtion_Subset_Details FROM Collection_Subsets WHERE Collection_Subset_Name = \"Top collection\";",
    "dsql": "PROJECT Collecrtion_Subset_Details FROM SELECT WHERE Collection_Subset_Name = \"Top collection\" FROM Collection_Subsets "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List all documents's subset. List the subset's name.\n### Response (TSQL):",
    "sql": "SELECT Document_Subset_Name FROM Document_Subsets;",
    "dsql": "PROJECT Document_Subset_Name FROM Document_Subsets "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the document subset names?\n### Response (TSQL):",
    "sql": "SELECT Document_Subset_Name FROM Document_Subsets;",
    "dsql": "PROJECT Document_Subset_Name FROM Document_Subsets "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the detail of document subset with name 'Best for 2000'?\n### Response (TSQL):",
    "sql": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";",
    "dsql": "PROJECT Document_Subset_Details FROM SELECT WHERE Document_Subset_Name = \"Best for 2000\" FROM Document_Subsets "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the details on the document subsets that are named 'Best for 2000'?\n### Response (TSQL):",
    "sql": "SELECT Document_Subset_Details FROM Document_Subsets WHERE Document_Subset_Name = \"Best for 2000\";",
    "dsql": "PROJECT Document_Subset_Details FROM SELECT WHERE Document_Subset_Name = \"Best for 2000\" FROM Document_Subsets "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List document id of all documents.\n### Response (TSQL):",
    "sql": "SELECT Document_Object_ID FROM Document_Objects;",
    "dsql": "PROJECT Document_Object_ID FROM Document_Objects "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the object id of the document objects?\n### Response (TSQL):",
    "sql": "SELECT Document_Object_ID FROM Document_Objects;",
    "dsql": "PROJECT Document_Object_ID FROM Document_Objects "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the parent document of document owned by Marlin? List the document id.\n### Response (TSQL):",
    "sql": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
    "dsql": "PROJECT Parent_Document_Object_ID FROM SELECT WHERE OWNER = 'Marlin' FROM Document_Objects "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the document object ids of the objects owned by Marlin?\n### Response (TSQL):",
    "sql": "SELECT Parent_Document_Object_ID FROM Document_Objects WHERE OWNER  =  'Marlin'",
    "dsql": "PROJECT Parent_Document_Object_ID FROM SELECT WHERE OWNER = 'Marlin' FROM Document_Objects "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the owner of document with the Description 'Braeden Collection'?\n### Response (TSQL):",
    "sql": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "dsql": "PROJECT OWNER FROM SELECT WHERE Description = 'Braeden Collection' FROM Document_Objects "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the owners of the document objects described as the 'Braeden Collection'?\n### Response (TSQL):",
    "sql": "SELECT OWNER FROM Document_Objects WHERE Description  =  'Braeden Collection'",
    "dsql": "PROJECT OWNER FROM SELECT WHERE Description = 'Braeden Collection' FROM Document_Objects "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the owner of the parent document of document owned by 'Marlin'?\n### Response (TSQL):",
    "sql": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
    "dsql": "PROJECT T2.Owner FROM SELECT WHERE T1.Owner = 'Marlin' FROM JOIN AS T1 FROM Document_Objects WITH AS T2 FROM Document_Objects ON T1.Parent_Document_Object_ID = T2.Document_Object_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: Who is the owner of the parent document of every documents where 'Marlin' is the owner?\n### Response (TSQL):",
    "sql": "SELECT T2.Owner FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID WHERE T1.Owner  =  'Marlin'",
    "dsql": "PROJECT T2.Owner FROM SELECT WHERE T1.Owner = 'Marlin' FROM JOIN AS T1 FROM Document_Objects WITH AS T2 FROM Document_Objects ON T1.Parent_Document_Object_ID = T2.Document_Object_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the different descriptions of all the parent documents?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID",
    "dsql": "PROJECT DISTINCT T2.Description FROM JOIN AS T1 FROM Document_Objects WITH AS T2 FROM Document_Objects ON T1.Parent_Document_Object_ID = T2.Document_Object_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the unique description of every parent document?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T2.Description FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID",
    "dsql": "PROJECT DISTINCT T2.Description FROM JOIN AS T1 FROM Document_Objects WITH AS T2 FROM Document_Objects ON T1.Parent_Document_Object_ID = T2.Document_Object_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: How many documents owned by Marlin?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Document_Objects WHERE OWNER = \"Marlin\";",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE OWNER = \"Marlin\" FROM Document_Objects "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the count of documents owned by Marlin?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Document_Objects WHERE OWNER = \"Marlin\";",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE OWNER = \"Marlin\" FROM Document_Objects "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List all documents ids that are not the parent of other documents.\n### Response (TSQL):",
    "sql": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
    "dsql": "EXCEPT PROJECT Document_Object_ID FROM Document_Objects WITH PROJECT Parent_Document_Object_ID FROM Document_Objects "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the ids of the documents that are not parent documents?\n### Response (TSQL):",
    "sql": "SELECT Document_Object_ID FROM Document_Objects EXCEPT SELECT Parent_Document_Object_ID FROM Document_Objects",
    "dsql": "EXCEPT PROJECT Document_Object_ID FROM Document_Objects WITH PROJECT Parent_Document_Object_ID FROM Document_Objects "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: How many child documents does each parent document has? List the document id and the number.\n### Response (TSQL):",
    "sql": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;",
    "dsql": "PROJECT T2.Document_Object_ID, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.Document_Object_ID FROM JOIN AS T1 FROM Document_Objects WITH AS T2 FROM Document_Objects ON T1.Parent_Document_Object_ID = T2.Document_Object_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the number of child documents for each parent document, and what are the ids of the parent documents?\n### Response (TSQL):",
    "sql": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID;",
    "dsql": "PROJECT T2.Document_Object_ID, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.Document_Object_ID FROM JOIN AS T1 FROM Document_Objects WITH AS T2 FROM Document_Objects ON T1.Parent_Document_Object_ID = T2.Document_Object_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List the name of all collections.\n### Response (TSQL):",
    "sql": "SELECT Collection_Name FROM Collections;",
    "dsql": "PROJECT Collection_Name FROM Collections "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: what are the collection names?\n### Response (TSQL):",
    "sql": "SELECT Collection_Name FROM Collections;",
    "dsql": "PROJECT Collection_Name FROM Collections "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the description of collection named Best?\n### Response (TSQL):",
    "sql": "SELECT Collection_Description FROM Collections WHERE Collection_Name = \"Best\";",
    "dsql": "PROJECT Collection_Description FROM SELECT WHERE Collection_Name = \"Best\" FROM Collections "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the collection descriptions that are named as 'Best'?\n### Response (TSQL):",
    "sql": "SELECT Collection_Description FROM Collections WHERE Collection_Name = \"Best\";",
    "dsql": "PROJECT Collection_Description FROM SELECT WHERE Collection_Name = \"Best\" FROM Collections "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the name of the parent collection of the collection named Nice?\n### Response (TSQL):",
    "sql": "SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Nice\";",
    "dsql": "PROJECT T2.Collection_Name FROM SELECT WHERE T1.Collection_Name = \"Nice\" FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Collections ON T1.Parent_Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the names of all parent collections of the collection named Nice?\n### Response (TSQL):",
    "sql": "SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Nice\";",
    "dsql": "PROJECT T2.Collection_Name FROM SELECT WHERE T1.Collection_Name = \"Nice\" FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Collections ON T1.Parent_Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: Which collection is not the parent of other collection? List the collection's name.\n### Response (TSQL):",
    "sql": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;",
    "dsql": "EXCEPT PROJECT Collection_Name FROM Collections WITH PROJECT T2.Collection_Name FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Collections ON T1.Parent_Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the names of the collections that are not the parent of the other collections?\n### Response (TSQL):",
    "sql": "SELECT Collection_Name FROM Collections EXCEPT SELECT T2.Collection_Name FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID;",
    "dsql": "EXCEPT PROJECT Collection_Name FROM Collections WITH PROJECT T2.Collection_Name FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Collections ON T1.Parent_Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List document that have more than one child. List the document id.\n### Response (TSQL):",
    "sql": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;",
    "dsql": "PROJECT T2.Document_Object_ID FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T2.Document_Object_ID FROM JOIN AS T1 FROM Document_Objects WITH AS T2 FROM Document_Objects ON T1.Parent_Document_Object_ID = T2.Document_Object_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the ids of the documents that have more than one child?\n### Response (TSQL):",
    "sql": "SELECT T2.Document_Object_ID FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID HAVING count(*)  >  1;",
    "dsql": "PROJECT T2.Document_Object_ID FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T2.Document_Object_ID FROM JOIN AS T1 FROM Document_Objects WITH AS T2 FROM Document_Objects ON T1.Parent_Document_Object_ID = T2.Document_Object_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: How many child collection does the collection named Best has?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.Collection_Name = \"Best\" FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Collections ON T1.Parent_Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the number of child collections belonging to the collection named Best?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Collections AS T1 JOIN Collections AS T2 ON T1.Parent_Collection_ID = T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T2.Collection_Name = \"Best\" FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Collections ON T1.Parent_Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List all document which is related to document owned by Ransom . List the document id .\n### Response (TSQL):",
    "sql": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
    "dsql": "PROJECT t1.document_object_id FROM SELECT WHERE t2.owner = 'ransom' FROM JOIN AS t1 FROM document_subset_members WITH AS t2 FROM document_objects ON t1.document_object_id = t2.document_object_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the document object ids of the related to the document owned by Ransom ?\n### Response (TSQL):",
    "sql": "select t1.document_object_id from document_subset_members as t1 join document_objects as t2 on t1.document_object_id  =  t2.document_object_id where t2.owner  =  'ransom'",
    "dsql": "PROJECT t1.document_object_id FROM SELECT WHERE t2.owner = 'ransom' FROM JOIN AS t1 FROM document_subset_members WITH AS t2 FROM document_objects ON t1.document_object_id = t2.document_object_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List collection subset id, name and number of collections in each subset.\n### Response (TSQL):",
    "sql": "SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;",
    "dsql": "PROJECT T2.Collection_Subset_ID, T1.Collection_Subset_Name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.Collection_Subset_ID FROM JOIN AS T1 FROM Collection_Subsets WITH AS T2 FROM Collection_Subset_Members ON T1.Collection_Subset_ID = T2.Collection_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the collection subset ids, names, and number of collections for each subset?\n### Response (TSQL):",
    "sql": "SELECT T2.Collection_Subset_ID ,  T1.Collection_Subset_Name ,  count(*) FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID GROUP BY T2.Collection_Subset_ID;",
    "dsql": "PROJECT T2.Collection_Subset_ID, T1.Collection_Subset_Name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.Collection_Subset_ID FROM JOIN AS T1 FROM Collection_Subsets WITH AS T2 FROM Collection_Subset_Members ON T1.Collection_Subset_ID = T2.Collection_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: Which document has most of child? List the document id and the number of child.\n### Response (TSQL):",
    "sql": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.Document_Object_ID, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.Document_Object_ID FROM JOIN AS T1 FROM Document_Objects WITH AS T2 FROM Document_Objects ON T1.Parent_Document_Object_ID = T2.Document_Object_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: For each document object id, how many children do they have?\n### Response (TSQL):",
    "sql": "SELECT T2.Document_Object_ID ,  count(*) FROM Document_Objects AS T1 JOIN Document_Objects AS T2 ON T1.Parent_Document_Object_ID = T2.Document_Object_ID GROUP BY T2.Document_Object_ID ORDER BY count(*) DESC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.Document_Object_ID, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.Document_Object_ID FROM JOIN AS T1 FROM Document_Objects WITH AS T2 FROM Document_Objects ON T1.Parent_Document_Object_ID = T2.Document_Object_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: Which document has least number of related documents? List the document id and the number of related documents.\n### Response (TSQL):",
    "sql": "SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID ORDER BY count(*) ASC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT Document_Object_ID, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Document_Object_ID FROM Document_Subset_Members "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the document object id with the least number of documents ?\n### Response (TSQL):",
    "sql": "select document_object_id , count(*) from document_subset_members group by document_object_id order by count(*) asc limit 1;",
    "dsql": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT document_object_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY document_object_id FROM document_subset_members "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: Which document has between 2 and 4 number of documents ? List the document id and the number of related documents .\n### Response (TSQL):",
    "sql": "select document_object_id , count(*) from document_subset_members group by document_object_id having count(*) between 2 and 4;",
    "dsql": "PROJECT document_object_id, COUNT(*) FROM SELECT WHERE COUNT(*) BETWEEN 2 AND 4 FROM AGGREGATE COUNT(*) GROUP BY document_object_id FROM document_subset_members "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the ids of the dcouments that have between 2 and 4 related documents and how many related items are there?\n### Response (TSQL):",
    "sql": "SELECT Document_Object_ID , count(*) FROM Document_Subset_Members GROUP BY Document_Object_ID HAVING count(*) BETWEEN 2 AND 4;",
    "dsql": "PROJECT Document_Object_ID, COUNT(*) FROM SELECT WHERE COUNT(*) BETWEEN 2 AND 4 FROM AGGREGATE COUNT(*) GROUP BY Document_Object_ID FROM Document_Subset_Members "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List all owner of documents that is related to documents owned by Braeden.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
    "dsql": "PROJECT DISTINCT OWNER FROM SELECT WHERE T2.Owner = 'Braeden' FROM JOIN AS T1 FROM Document_Subset_Members WITH AS T2 FROM Document_Objects ON T1.Related_Document_Object_ID = T2.Document_Object_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the different owners of documents that are related to ones owned by Braeden?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT OWNER FROM Document_Subset_Members AS T1 JOIN Document_Objects AS T2 ON T1.Related_Document_Object_ID  =  T2.Document_Object_ID WHERE T2.Owner  =  'Braeden';",
    "dsql": "PROJECT DISTINCT OWNER FROM SELECT WHERE T2.Owner = 'Braeden' FROM JOIN AS T1 FROM Document_Subset_Members WITH AS T2 FROM Document_Objects ON T1.Related_Document_Object_ID = T2.Document_Object_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: Which unique subset does document owned by Braeden belong to? List the subset name.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
    "dsql": "PROJECT DISTINCT T1.Document_Subset_Name FROM SELECT WHERE T3.owner = 'Braeden' FROM JOIN AS T1 FROM Document_Subsets WITH JOIN AS T2 FROM Document_Subset_Members WITH AS T3 FROM Document_Objects ON T2.Document_Object_ID = T3.Document_Object_ID ON T1.Document_Subset_ID = T2.Document_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the different subset names of all documents owned by Braeden?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.Document_Subset_Name FROM Document_Subsets AS T1 JOIN Document_Subset_Members AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Document_Objects AS T3 ON T2.Document_Object_ID  =  T3.Document_Object_ID WHERE T3.owner  =  'Braeden'",
    "dsql": "PROJECT DISTINCT T1.Document_Subset_Name FROM SELECT WHERE T3.owner = 'Braeden' FROM JOIN AS T1 FROM Document_Subsets WITH JOIN AS T2 FROM Document_Subset_Members WITH AS T3 FROM Document_Objects ON T2.Document_Object_ID = T3.Document_Object_ID ON T1.Document_Subset_ID = T2.Document_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List subset id, name and number of different documents in each subset.\n### Response (TSQL):",
    "sql": "SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;",
    "dsql": "PROJECT T1.Document_Subset_ID, T2.Document_Subset_Name, COUNT(DISTINCT T1.Document_Object_ID) FROM AGGREGATE COUNT(*), COUNT(DISTINCT T1.Document_Object_ID) GROUP BY T1.Document_Subset_ID FROM JOIN AS T1 FROM Document_Subset_Members WITH AS T2 FROM Document_Subsets ON T1.Document_Subset_ID = T2.Document_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the subset id, name, and number of different documents for each subset?\n### Response (TSQL):",
    "sql": "SELECT T1.Document_Subset_ID ,  T2.Document_Subset_Name , count(DISTINCT T1.Document_Object_ID) FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID GROUP BY T1.Document_Subset_ID;",
    "dsql": "PROJECT T1.Document_Subset_ID, T2.Document_Subset_Name, COUNT(DISTINCT T1.Document_Object_ID) FROM AGGREGATE COUNT(*), COUNT(DISTINCT T1.Document_Object_ID) GROUP BY T1.Document_Subset_ID FROM JOIN AS T1 FROM Document_Subset_Members WITH AS T2 FROM Document_Subsets ON T1.Document_Subset_ID = T2.Document_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: Which document subset has most of number of distinct documents ? List subset id , name and number of documents .\n### Response (TSQL):",
    "sql": "select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t1.document_subset_id, t2.document_subset_name, COUNT(DISTINCT t1.document_object_id) FROM AGGREGATE COUNT(DISTINCT t1.document_object_id), COUNT(*) GROUP BY t1.document_subset_id FROM JOIN AS t1 FROM document_subset_members WITH AS t2 FROM document_subsets ON t1.document_subset_id = t2.document_subset_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: For the document subset with the most number of different documents , what are the ids and names of the subset , as well as the number of documents ?\n### Response (TSQL):",
    "sql": "select t1.document_subset_id ,  t2.document_subset_name , count(distinct t1.document_object_id) from document_subset_members as t1 join document_subsets as t2 on t1.document_subset_id =  t2.document_subset_id group by t1.document_subset_id order by count(*) desc limit 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t1.document_subset_id, t2.document_subset_name, COUNT(DISTINCT t1.document_object_id) FROM AGGREGATE COUNT(DISTINCT t1.document_object_id), COUNT(*) GROUP BY t1.document_subset_id FROM JOIN AS t1 FROM document_subset_members WITH AS t2 FROM document_subsets ON t1.document_subset_id = t2.document_subset_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: For document subset named 'Best for 2000', List all document id that in this subset.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = \"Best for 2000\";",
    "dsql": "PROJECT DISTINCT T1.Document_Object_ID FROM SELECT WHERE T2.Document_Subset_Name = \"Best for 2000\" FROM JOIN AS T1 FROM Document_Subset_Members WITH AS T2 FROM Document_Subsets ON T1.Document_Subset_ID = T2.Document_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: For the document subset named 'Best for 2000', what are the document ids in that subset?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID WHERE T2.Document_Subset_Name = \"Best for 2000\";",
    "dsql": "PROJECT DISTINCT T1.Document_Object_ID FROM SELECT WHERE T2.Document_Subset_Name = \"Best for 2000\" FROM JOIN AS T1 FROM Document_Subset_Members WITH AS T2 FROM Document_Subsets ON T1.Document_Subset_ID = T2.Document_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List all document subsets of documents that related to each document id. List the name of document subset and the document id.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T3.Document_Subset_Name ,  T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subset_Members  AS T2 ON T1.Related_Document_Object_ID = T2.Document_Object_ID JOIN Document_Subsets AS T3 ON T2.Document_Subset_ID =  T3.Document_Subset_ID",
    "dsql": "PROJECT DISTINCT T3.Document_Subset_Name, T1.Document_Object_ID FROM JOIN AS T1 FROM Document_Subset_Members WITH JOIN AS T2 FROM Document_Subset_Members WITH AS T3 FROM Document_Subsets ON T2.Document_Subset_ID = T3.Document_Subset_ID ON T1.Related_Document_Object_ID = T2.Document_Object_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the different subsets of documents related to each document id , list the name of the document subset and id of the actual document ?\n### Response (TSQL):",
    "sql": "select distinct t3.document_subset_name ,  t1.document_object_id from document_subset_members as t1 join document_subset_members  as t2 on t1.related_document_object_id = t2.document_object_id join document_subsets as t3 on t2.document_subset_id =  t3.document_subset_id",
    "dsql": "PROJECT DISTINCT t3.document_subset_name, t1.document_object_id FROM JOIN AS t1 FROM document_subset_members WITH JOIN AS t2 FROM document_subset_members WITH AS t3 FROM document_subsets ON t2.document_subset_id = t3.document_subset_id ON t1.related_document_object_id = t2.document_object_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List the Collection Name that document owned by 'Ransom ' belong to .\n### Response (TSQL):",
    "sql": "select t1.collection_name from collections as t1 join documents_in_collections as t2 on t1.collection_id = t2.collection_id join document_objects as t3 on t2.document_object_id  =  t3.document_object_id where t3.owner  =  'ransom'",
    "dsql": "PROJECT t1.collection_name FROM SELECT WHERE t3.owner = 'ransom' FROM JOIN AS t1 FROM collections WITH JOIN AS t2 FROM documents_in_collections WITH AS t3 FROM document_objects ON t2.document_object_id = t3.document_object_id ON t1.collection_id = t2.collection_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the collection name of a document owned by 'Ransom'?\n### Response (TSQL):",
    "sql": "SELECT T1.Collection_Name FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID JOIN Document_Objects AS T3 ON T2.Document_object_id  =  T3.Document_object_id WHERE T3.owner  =  'Ransom'",
    "dsql": "PROJECT T1.Collection_Name FROM SELECT WHERE T3.owner = 'Ransom' FROM JOIN AS T1 FROM Collections WITH JOIN AS T2 FROM Documents_in_Collections WITH AS T3 FROM Document_Objects ON T2.Document_object_id = T3.Document_object_id ON T1.Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: How many collections does each document belong to? List the count and the document id.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID",
    "dsql": "PROJECT COUNT(*), T2.Document_Object_ID FROM AGGREGATE COUNT(*) GROUP BY T2.Document_Object_ID FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Documents_in_Collections ON T1.Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: For each document object id, how many collections does it belong to?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID GROUP BY T2.Document_Object_ID",
    "dsql": "PROJECT COUNT(*), T2.Document_Object_ID FROM AGGREGATE COUNT(*) GROUP BY T2.Document_Object_ID FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Documents_in_Collections ON T1.Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: How many documents does collection named 'Best' has?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.Collection_Name = \"Best\" FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Documents_in_Collections ON T1.Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the number of documents in the collection named 'Best'?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.Collection_Name = \"Best\" FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Documents_in_Collections ON T1.Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List the document id of all documents in collection named Best.\n### Response (TSQL):",
    "sql": "SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
    "dsql": "PROJECT T2.Document_Object_ID FROM SELECT WHERE T1.Collection_Name = \"Best\" FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Documents_in_Collections ON T1.Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What is the number of document object ids in the collection named Best?\n### Response (TSQL):",
    "sql": "SELECT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\";",
    "dsql": "PROJECT T2.Document_Object_ID FROM SELECT WHERE T1.Collection_Name = \"Best\" FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Documents_in_Collections ON T1.Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: Which collection have most number of documents? List collection name, id and number of documents.\n### Response (TSQL):",
    "sql": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.Collection_Name, T1.Collection_ID, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.Collection_ID FROM SELECT WHERE T1.Collection_Name = \"Best\" FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Documents_in_Collections ON T1.Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: For ever collection named 'Best', what is the name and id of the one with the most documents, and how many documents does it have?\n### Response (TSQL):",
    "sql": "SELECT T1.Collection_Name ,  T1.Collection_ID ,  count(*) FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" GROUP BY T1.Collection_ID ORDER BY count(*) DESC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.Collection_Name, T1.Collection_ID, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.Collection_ID FROM SELECT WHERE T1.Collection_Name = \"Best\" FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Documents_in_Collections ON T1.Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List id of documents that in document subset Best for 2000 and collection named Best.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";",
    "dsql": "PROJECT DISTINCT T1.Document_Object_ID FROM SELECT WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\" FROM JOIN AS T2 FROM Document_Subsets WITH JOIN AS T1 FROM Document_Subset_Members WITH JOIN AS T3 FROM Documents_in_Collections WITH AS T4 FROM Collections ON T3.Collection_ID = T4.Collection_ID ON T1.Document_Object_ID = T3.Document_Object_ID ON T1.Document_Subset_ID = T2.Document_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the different document object ids in the subset named 'Best for 2000' and in the collection named 'Best'?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\";",
    "dsql": "PROJECT DISTINCT T1.Document_Object_ID FROM SELECT WHERE T2.Document_Subset_Name = \"Best for 2000\" AND T4.Collection_Name = \"Best\" FROM JOIN AS T2 FROM Document_Subsets WITH JOIN AS T1 FROM Document_Subset_Members WITH JOIN AS T3 FROM Documents_in_Collections WITH AS T4 FROM Collections ON T3.Collection_ID = T4.Collection_ID ON T1.Document_Object_ID = T3.Document_Object_ID ON T1.Document_Subset_ID = T2.Document_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List id of documents that in collection named Best but not in document subset Best for 2000.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = \"Best for 2000\"",
    "dsql": "EXCEPT PROJECT DISTINCT T2.Document_Object_ID FROM SELECT WHERE T1.Collection_Name = \"Best\" FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Documents_in_Collections ON T1.Collection_ID = T2.Collection_ID WITH PROJECT DISTINCT T3.Document_Object_ID FROM SELECT WHERE T4.Document_Subset_Name = \"Best for 2000\" FROM JOIN AS T3 FROM Document_Subset_Members WITH AS T4 FROM Document_Subsets ON T3.Document_Subset_ID = T4.Document_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the different document object ids that are in the collection named Best but not in the subset named 'Best for 2000'?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T2.Document_Object_ID FROM Collections AS T1 JOIN Documents_in_Collections AS T2 ON T1.Collection_ID = T2.Collection_ID WHERE T1.Collection_Name = \"Best\" EXCEPT SELECT DISTINCT T3.Document_Object_ID FROM Document_Subset_Members AS T3 JOIN Document_Subsets AS T4 ON T3.Document_Subset_ID =  T4.Document_Subset_ID WHERE T4.Document_Subset_Name = \"Best for 2000\"",
    "dsql": "EXCEPT PROJECT DISTINCT T2.Document_Object_ID FROM SELECT WHERE T1.Collection_Name = \"Best\" FROM JOIN AS T1 FROM Collections WITH AS T2 FROM Documents_in_Collections ON T1.Collection_ID = T2.Collection_ID WITH PROJECT DISTINCT T3.Document_Object_ID FROM SELECT WHERE T4.Document_Subset_Name = \"Best for 2000\" FROM JOIN AS T3 FROM Document_Subset_Members WITH AS T4 FROM Document_Subsets ON T3.Document_Subset_ID = T4.Document_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List id of documents that in document subset Best for 2000 or in collection named Best.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";",
    "dsql": "PROJECT DISTINCT T1.Document_Object_ID FROM SELECT WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\" FROM JOIN AS T2 FROM Document_Subsets WITH JOIN AS T1 FROM Document_Subset_Members WITH JOIN AS T3 FROM Documents_in_Collections WITH AS T4 FROM Collections ON T3.Collection_ID = T4.Collection_ID ON T1.Document_Object_ID = T3.Document_Object_ID ON T1.Document_Subset_ID = T2.Document_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the different document ids that are in the subset named 'Best for 2000' or in the collection named 'Best'?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.Document_Object_ID FROM Document_Subset_Members AS T1 JOIN Document_Subsets AS T2 ON T1.Document_Subset_ID =  T2.Document_Subset_ID JOIN Documents_in_Collections AS T3 ON T1.Document_Object_ID  =  T3.Document_Object_ID JOIN Collections AS T4 ON T3.Collection_ID  =  T4.Collection_ID WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\";",
    "dsql": "PROJECT DISTINCT T1.Document_Object_ID FROM SELECT WHERE T2.Document_Subset_Name = \"Best for 2000\" OR T4.Collection_Name = \"Best\" FROM JOIN AS T2 FROM Document_Subsets WITH JOIN AS T1 FROM Document_Subset_Members WITH JOIN AS T3 FROM Documents_in_Collections WITH AS T4 FROM Collections ON T3.Collection_ID = T4.Collection_ID ON T1.Document_Object_ID = T3.Document_Object_ID ON T1.Document_Subset_ID = T2.Document_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: List all name of collections that are related to collection named Best.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = \"Best\";",
    "dsql": "PROJECT DISTINCT T4.Collection_Name FROM SELECT WHERE T3.Collection_Name = \"Best\" FROM JOIN AS T2 FROM Collection_Subset_Members WITH JOIN AS T1 FROM Collection_Subset_Members WITH JOIN AS T3 FROM Collections WITH AS T4 FROM Collections ON T2.Collection_ID = T4.Collection_ID ON T1.Collection_ID = T3.Collection_ID ON T1.Related_Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the names of the collections that are related to the collection named Best?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T4.Collection_Name FROM Collection_Subset_Members AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Related_Collection_ID = T2.Collection_ID JOIN Collections AS T3 ON T1.Collection_ID = T3.Collection_ID JOIN Collections AS T4 ON T2.Collection_ID = T4.Collection_ID WHERE T3.Collection_Name = \"Best\";",
    "dsql": "PROJECT DISTINCT T4.Collection_Name FROM SELECT WHERE T3.Collection_Name = \"Best\" FROM JOIN AS T2 FROM Collection_Subset_Members WITH JOIN AS T1 FROM Collection_Subset_Members WITH JOIN AS T3 FROM Collections WITH AS T4 FROM Collections ON T2.Collection_ID = T4.Collection_ID ON T1.Collection_ID = T3.Collection_ID ON T1.Related_Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: How many collections that are related to collection named Best?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
    "dsql": "PROJECT COUNT(DISTINCT T1.Related_Collection_ID) FROM AGGREGATE COUNT(DISTINCT T1.Related_Collection_ID) FROM SELECT WHERE T2.Collection_Name = \"Best\" FROM JOIN AS T1 FROM Collection_Subset_Members WITH AS T2 FROM Collections ON T1.Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: How many different collections are related to the one named 'Best'?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T1.Related_Collection_ID) FROM Collection_Subset_Members AS T1 JOIN Collections AS T2 ON T1.Collection_ID  =  T2.Collection_ID WHERE T2.Collection_Name = \"Best\";",
    "dsql": "PROJECT COUNT(DISTINCT T1.Related_Collection_ID) FROM AGGREGATE COUNT(DISTINCT T1.Related_Collection_ID) FROM SELECT WHERE T2.Collection_Name = \"Best\" FROM JOIN AS T1 FROM Collection_Subset_Members WITH AS T2 FROM Collections ON T1.Collection_ID = T2.Collection_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: Which collection subset does collection name Best in? List collection subset name.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = \"Best\";",
    "dsql": "PROJECT DISTINCT T1.Collection_Subset_Name FROM SELECT WHERE T3.Collection_Name = \"Best\" FROM JOIN AS T1 FROM Collection_Subsets WITH JOIN AS T2 FROM Collection_Subset_Members WITH AS T3 FROM Collections ON T2.Collection_ID = T3.Collection_ID ON T1.Collection_Subset_ID = T2.Collection_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Document_Subsets ( Document_Subset_ID number, Document_Subset_Name text, Document_Subset_Details text, PRIMARY KEY(Document_Subset_ID)); CREATE TABLE Collection_Subsets ( Collection_Subset_ID number, Collection_Subset_Name text, Collecrtion_Subset_Details text, PRIMARY KEY(Collection_Subset_ID)); CREATE TABLE Document_Objects ( Document_Object_ID number, Parent_Document_Object_ID number, Owner text, Description text, Other_Details text, PRIMARY KEY(Document_Object_ID)); CREATE TABLE Collections ( Collection_ID number, Parent_Collection_ID number, Collection_Name text, Collection_Description text, PRIMARY KEY(Collection_ID)); CREATE TABLE Documents_in_Collections ( Document_Object_ID number, Collection_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Document_Subset_Members ( Document_Object_ID number, Related_Document_Object_ID number, Document_Subset_ID number, PRIMARY KEY(Document_Object_ID), FOREIGN KEY(Document_Subset_ID) REFERENCES Document_Subsets (Document_Subset_ID), FOREIGN KEY(Related_Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID), FOREIGN KEY(Document_Object_ID) REFERENCES Document_Objects (Document_Object_ID)); CREATE TABLE Collection_Subset_Members ( Collection_ID number, Related_Collection_ID number, Collection_Subset_ID number, PRIMARY KEY(Collection_ID), FOREIGN KEY(Collection_Subset_ID) REFERENCES Collection_Subsets (Collection_Subset_ID), FOREIGN KEY(Related_Collection_ID) REFERENCES Collections (Collection_ID), FOREIGN KEY(Collection_ID) REFERENCES Collections (Collection_ID)); \n### Question: What are the collection subsets that the collection named 'Best' in?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.Collection_Subset_Name FROM Collection_Subsets AS T1 JOIN Collection_Subset_Members AS T2 ON T1.Collection_Subset_ID =  T2.Collection_Subset_ID JOIN Collections AS T3 ON T2.Collection_ID =  T3.Collection_ID WHERE T3.Collection_Name = \"Best\";",
    "dsql": "PROJECT DISTINCT T1.Collection_Subset_Name FROM SELECT WHERE T3.Collection_Name = \"Best\" FROM JOIN AS T1 FROM Collection_Subsets WITH JOIN AS T2 FROM Collection_Subset_Members WITH AS T3 FROM Collections ON T2.Collection_ID = T3.Collection_ID ON T1.Collection_Subset_ID = T2.Collection_Subset_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: How many songs contain \"Love\" in their names?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM songs WHERE name LIKE \"%Love%\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE name LIKE \"%Love%\" FROM songs "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: List the name of the songs in ascending, lexicographical order.\n### Response (TSQL):",
    "sql": "SELECT name FROM songs ORDER BY name",
    "dsql": "ORDER BY name FROM PROJECT name FROM songs "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: List the names and languages of the songs .\n### Response (TSQL):",
    "sql": "select name , language from songs",
    "dsql": "PROJECT name, language FROM songs "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: What are the maximum and minimum voice sound quality score of the performances?\n### Response (TSQL):",
    "sql": "SELECT max(voice_sound_quality) ,  min(voice_sound_quality) FROM performance_score",
    "dsql": "PROJECT MAX(voice_sound_quality), MIN(voice_sound_quality) FROM AGGREGATE MAX(voice_sound_quality), MIN(voice_sound_quality) FROM performance_score "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: What are the voice sound quality score, rhythm tempo score and stage presence score performed by the participant named 'Freeway'?\n### Response (TSQL):",
    "sql": "SELECT T1.voice_sound_quality ,  T1.rhythm_tempo ,  T1.stage_presence FROM performance_score AS T1 JOIN participants AS T2 ON T1.participant_id  =  T2.id WHERE T2.name  =  'Freeway'",
    "dsql": "PROJECT T1.voice_sound_quality, T1.rhythm_tempo, T1.stage_presence FROM SELECT WHERE T2.name = 'Freeway' FROM JOIN AS T1 FROM performance_score WITH AS T2 FROM participants ON T1.participant_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: What are the id, language and original artist of the songs whose name is not 'Love'?\n### Response (TSQL):",
    "sql": "SELECT id ,  LANGUAGE ,  original_artist FROM songs WHERE name != 'Love'",
    "dsql": "PROJECT id, LANGUAGE, original_artist FROM SELECT WHERE name <> 'Love' FROM songs "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: What are the names and original artists of the song whose English translation is 'All the streets of love'?\n### Response (TSQL):",
    "sql": "SELECT name ,  original_artist FROM songs WHERE english_translation  =  'All the streets of love'",
    "dsql": "PROJECT name, original_artist FROM SELECT WHERE english_translation = 'All the streets of love' FROM songs "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: What are the distinct stage presence scores for all the songs that are in language 'English' ?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T2.stage_presence FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id WHERE T1.language  =  'English'",
    "dsql": "PROJECT DISTINCT T2.stage_presence FROM SELECT WHERE T1.language = 'English' FROM JOIN AS T1 FROM songs WITH AS T2 FROM performance_score ON T1.id = T2.songs_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: What are the ids and names of the participants who have performed at least two songs?\n### Response (TSQL):",
    "sql": "SELECT T1.id ,  T1.Name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
    "dsql": "PROJECT T1.id, T1.Name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.id FROM JOIN AS T2 FROM performance_score WITH AS T1 FROM participants ON T2.participant_id = T1.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: What are the ids, names and popularity of the participants, order by the number of songs they perform?\n### Response (TSQL):",
    "sql": "SELECT T1.id ,  T1.Name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id GROUP BY T1.id ORDER BY count(*)",
    "dsql": "ORDER BY COUNT(*) FROM PROJECT T1.id, T1.Name, T1.popularity FROM AGGREGATE COUNT(*) GROUP BY T1.id FROM JOIN AS T2 FROM performance_score WITH AS T1 FROM participants ON T2.participant_id = T1.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: What are the id and name of the participants who received score 5 for their sound quality or rhythm tempo?\n### Response (TSQL):",
    "sql": "SELECT T1.id ,  T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id WHERE T2.voice_sound_quality  =  5 OR T2.rhythm_tempo  =  5",
    "dsql": "PROJECT T1.id, T1.name FROM SELECT WHERE T2.voice_sound_quality = 5 OR T2.rhythm_tempo = 5 FROM JOIN AS T2 FROM performance_score WITH AS T1 FROM participants ON T2.participant_id = T1.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: What are the voice sound quality scores received for the song named ' The Balkan Girls ' in English language ?\n### Response (TSQL):",
    "sql": "SELECT T1.voice_sound_quality FROM performance_score AS T1 JOIN songs AS T2 ON T1.songs_id  =  T2.id WHERE T2.name  =  ' The Balkan Girls ' AND T2.language  =  'English'",
    "dsql": "PROJECT T1.voice_sound_quality FROM SELECT WHERE T2.name = ' The Balkan Girls ' AND T2.language = 'English' FROM JOIN AS T1 FROM performance_score WITH AS T2 FROM songs ON T1.songs_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: What are the id and name of the song sung by the most participants?\n### Response (TSQL):",
    "sql": "SELECT T1.id ,  T1.name FROM songs AS T1 JOIN performance_score AS T2 ON T1.id  =  T2.songs_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.id, T1.name FROM AGGREGATE COUNT(*) GROUP BY T1.id FROM JOIN AS T1 FROM songs WITH AS T2 FROM performance_score ON T1.id = T2.songs_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: How many performances have a stage presence score less than 7 or higher than 9?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM performance_score WHERE stage_presence  <  7 OR stage_presence  >  9",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE stage_presence < 7 OR stage_presence > 9 FROM performance_score "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: How many songs listed are not performed?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM songs WHERE id NOT IN ( SELECT songs_id FROM performance_score );",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE id NOT IN PROJECT songs_id FROM performance_score FROM songs "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: What are the average rhythm scores for the songs in each different language?\n### Response (TSQL):",
    "sql": "SELECT avg(T2.rhythm_tempo) ,  T1.language FROM songs AS T1 JOIN performance_score AS T2 ON T2.songs_id  =  T1.id GROUP BY T1.language",
    "dsql": "PROJECT AVG(T2.rhythm_tempo), T1.language FROM AGGREGATE COUNT(*), AVG(T2.rhythm_tempo) GROUP BY T1.language FROM JOIN AS T2 FROM performance_score WITH AS T1 FROM songs ON T2.songs_id = T1.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: What are the distinct names of the participants who have sung a song in 'English'?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.name FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'",
    "dsql": "PROJECT DISTINCT T1.name FROM SELECT WHERE T3.language = 'English' FROM JOIN AS T2 FROM performance_score WITH JOIN AS T1 FROM participants WITH AS T2 FROM performance_score ON T3.id = T2.songs_id ON T2.participant_id = T1.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: What are the name and popularity of participants who have sung a song both in 'Croatian' language and in 'English' language?\n### Response (TSQL):",
    "sql": "SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'Croatian' INTERSECT SELECT T1.name ,  T1.popularity FROM participants AS T1 JOIN performance_score AS T2 ON T2.participant_id  =  T1.id JOIN songs AS T3 ON T3.id  =  T2.songs_id WHERE T3.language  =  'English'",
    "dsql": "INTERSECT PROJECT T1.name, T1.popularity FROM SELECT WHERE T3.language = 'Croatian' FROM JOIN AS T2 FROM performance_score WITH JOIN AS T1 FROM participants WITH AS T2 FROM performance_score ON T3.id = T2.songs_id ON T2.participant_id = T1.id WITH PROJECT T1.name, T1.popularity FROM SELECT WHERE T3.language = 'English' FROM JOIN AS T2 FROM performance_score WITH JOIN AS T1 FROM participants WITH AS T2 FROM performance_score ON T3.id = T2.songs_id ON T2.participant_id = T1.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: Which song names have the substring \"Is\"?\n### Response (TSQL):",
    "sql": "SELECT name FROM songs WHERE name LIKE \"%Is%\"",
    "dsql": "PROJECT name FROM SELECT WHERE name LIKE \"%Is%\" FROM songs "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE participants ( id number, name text, popularity number, PRIMARY KEY(id)); CREATE TABLE songs ( id number, language text, original_artist text, name text, english_translation text, PRIMARY KEY(id)); CREATE TABLE performance_score ( participant_id number, songs_id number, voice_sound_quality number, rhythm_tempo number, stage_presence number, PRIMARY KEY(participant_id), FOREIGN KEY(songs_id) REFERENCES songs (id), FOREIGN KEY(participant_id) REFERENCES participants (id)); \n### Question: Find the original artists who sing songs with rhythm tempo above 5 , and list results in descending order of voice sound quality .\n### Response (TSQL):",
    "sql": "select t2.original_artist from performance_score as t1 join songs as t2 on t2.id  =  t1.songs_id where t1.rhythm_tempo  >  5 order by t1.voice_sound_quality desc",
    "dsql": "ORDER BY DESC t1.voice_sound_quality FROM PROJECT t2.original_artist FROM SELECT WHERE t1.rhythm_tempo > 5 FROM JOIN AS t2 FROM songs WITH AS t1 FROM performance_score ON t2.id = t1.songs_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: How many cities do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM City",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Count the number of cities.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM City",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: List all different states .\n### Response (TSQL):",
    "sql": "select distinct state from city",
    "dsql": "PROJECT DISTINCT state FROM city "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What are all the distinct states?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT state FROM City",
    "dsql": "PROJECT DISTINCT state FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: How many countries do we have?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT country) FROM City",
    "dsql": "PROJECT COUNT(DISTINCT country) FROM AGGREGATE COUNT(DISTINCT country) FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Count the number of coutries.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT country) FROM City",
    "dsql": "PROJECT COUNT(DISTINCT country) FROM AGGREGATE COUNT(DISTINCT country) FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show names, codes, states, countries for all cities.\n### Response (TSQL):",
    "sql": "SELECT city_name ,  city_code ,  state ,  country FROM City",
    "dsql": "PROJECT city_name, city_code, state, country FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What are the names, codes, states, and countries for all cities?\n### Response (TSQL):",
    "sql": "SELECT city_name ,  city_code ,  state ,  country FROM City",
    "dsql": "PROJECT city_name, city_code, state, country FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What is the latitude and longitude for Baltimore?\n### Response (TSQL):",
    "sql": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\"",
    "dsql": "PROJECT latitude, longitude FROM SELECT WHERE city_name = \"Baltimore\" FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What latitude and longitude correspond to Baltimore?\n### Response (TSQL):",
    "sql": "SELECT latitude ,  longitude FROM City WHERE city_name  =  \"Baltimore\"",
    "dsql": "PROJECT latitude, longitude FROM SELECT WHERE city_name = \"Baltimore\" FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show names for all cities in state PA.\n### Response (TSQL):",
    "sql": "SELECT city_name FROM City WHERE state  =  \"PA\"",
    "dsql": "PROJECT city_name FROM SELECT WHERE state = \"PA\" FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What are the names of all cities in PA?\n### Response (TSQL):",
    "sql": "SELECT city_name FROM City WHERE state  =  \"PA\"",
    "dsql": "PROJECT city_name FROM SELECT WHERE state = \"PA\" FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: How many cities are in Canada?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM City WHERE country  =  \"CANADA\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE country = \"CANADA\" FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Count the number of cities in Canada.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM City WHERE country  =  \"CANADA\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE country = \"CANADA\" FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show names for all USA city ordered by latitude.\n### Response (TSQL):",
    "sql": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
    "dsql": "ORDER BY latitude FROM PROJECT city_name FROM SELECT WHERE country = \"USA\" FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What are all the city names for cities in the USA, ordered by latitude?\n### Response (TSQL):",
    "sql": "SELECT city_name FROM City WHERE country  =  \"USA\" ORDER BY latitude",
    "dsql": "ORDER BY latitude FROM PROJECT city_name FROM SELECT WHERE country = \"USA\" FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show all states and number of cities in each state.\n### Response (TSQL):",
    "sql": "SELECT state ,  count(*) FROM City GROUP BY state",
    "dsql": "PROJECT state, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY state FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: How many cities are in each state?\n### Response (TSQL):",
    "sql": "SELECT state ,  count(*) FROM City GROUP BY state",
    "dsql": "PROJECT state, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY state FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show all countries and number of cities in each .\n### Response (TSQL):",
    "sql": "select country ,  count(*) from city group by country",
    "dsql": "PROJECT country, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY country FROM city "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: How many cities are there in each country?\n### Response (TSQL):",
    "sql": "SELECT country ,  count(*) FROM City GROUP BY country",
    "dsql": "PROJECT country, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY country FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: List all states with at least two cities.\n### Response (TSQL):",
    "sql": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2",
    "dsql": "PROJECT state FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY state FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Which states have at least two cities?\n### Response (TSQL):",
    "sql": "SELECT state FROM City GROUP BY state HAVING count(*)  >=  2",
    "dsql": "PROJECT state FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY state FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Which state has most number of cities?\n### Response (TSQL):",
    "sql": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT state FROM AGGREGATE COUNT(*) GROUP BY state FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Give the state that has the most cities.\n### Response (TSQL):",
    "sql": "SELECT state FROM City GROUP BY state ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT state FROM AGGREGATE COUNT(*) GROUP BY state FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Which country has fewest number of cities?\n### Response (TSQL):",
    "sql": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT country FROM AGGREGATE COUNT(*) GROUP BY country FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Give the country with the fewest number of cities.\n### Response (TSQL):",
    "sql": "SELECT country FROM City GROUP BY country ORDER BY count(*) ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT country FROM AGGREGATE COUNT(*) GROUP BY country FROM City "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show the first name and the last name for students living in state MD.\n### Response (TSQL):",
    "sql": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\"",
    "dsql": "PROJECT T2.Fname, T2.Lname FROM SELECT WHERE T1.state = \"MD\" FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What are the full names of students living in MD?\n### Response (TSQL):",
    "sql": "SELECT T2.Fname ,  T2.Lname FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"MD\"",
    "dsql": "PROJECT T2.Fname, T2.Lname FROM SELECT WHERE T1.state = \"MD\" FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: How many students live in China?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.country = \"CHINA\" FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Count the number of students living in China.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.country  =  \"CHINA\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.country = \"CHINA\" FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Return the first name and major of students are living in Baltimore?\n### Response (TSQL):",
    "sql": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\"",
    "dsql": "PROJECT T2.Fname, T2.Major FROM SELECT WHERE T1.city_name = \"Baltimore\" FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What are the first names and majors of students living in Baltimore?\n### Response (TSQL):",
    "sql": "SELECT T2.Fname ,  T2.Major FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.city_name  =  \"Baltimore\"",
    "dsql": "PROJECT T2.Fname, T2.Major FROM SELECT WHERE T1.city_name = \"Baltimore\" FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show the number of students living in each country.\n### Response (TSQL):",
    "sql": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
    "dsql": "PROJECT T1.country, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.country FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: How many students live in each country?\n### Response (TSQL):",
    "sql": "SELECT T1.country ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country",
    "dsql": "PROJECT T1.country, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.country FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Find the number of students living in each city.\n### Response (TSQL):",
    "sql": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code",
    "dsql": "PROJECT T1.city_name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.city_code FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: How many students live in each city?\n### Response (TSQL):",
    "sql": "SELECT T1.city_name ,  count(*) FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code",
    "dsql": "PROJECT T1.city_name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.city_code FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Which state has most number of students?\n### Response (TSQL):",
    "sql": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.state FROM AGGREGATE COUNT(*) GROUP BY T1.state FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Give the state that has the most students.\n### Response (TSQL):",
    "sql": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.state FROM AGGREGATE COUNT(*) GROUP BY T1.state FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Which country has least number of students?\n### Response (TSQL):",
    "sql": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT T1.country FROM AGGREGATE COUNT(*) GROUP BY T1.country FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Give the country with the fewest students.\n### Response (TSQL):",
    "sql": "SELECT T1.country FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.country ORDER BY count(*) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT T1.country FROM AGGREGATE COUNT(*) GROUP BY T1.country FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show names for all cities where at least three students live.\n### Response (TSQL):",
    "sql": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
    "dsql": "PROJECT T1.city_name FROM SELECT WHERE COUNT(*) >= 3 FROM AGGREGATE COUNT(*) GROUP BY T1.city_code FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What are the names of cities with at least three students?\n### Response (TSQL):",
    "sql": "SELECT T1.city_name FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.city_code HAVING count(*)  >=  3",
    "dsql": "PROJECT T1.city_name FROM SELECT WHERE COUNT(*) >= 3 FROM AGGREGATE COUNT(*) GROUP BY T1.city_code FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show all states where more than 5 students live.\n### Response (TSQL):",
    "sql": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5",
    "dsql": "PROJECT T1.state FROM SELECT WHERE COUNT(*) > 5 FROM AGGREGATE COUNT(*) GROUP BY T1.state FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What are the states with more than 5 students?\n### Response (TSQL):",
    "sql": "SELECT T1.state FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code GROUP BY T1.state HAVING count(*)  >  5",
    "dsql": "PROJECT T1.state FROM SELECT WHERE COUNT(*) > 5 FROM AGGREGATE COUNT(*) GROUP BY T1.state FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show ids for all students who don't live in USA.\n### Response (TSQL):",
    "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\"",
    "dsql": "EXCEPT PROJECT StuID FROM Student WITH PROJECT StuID FROM SELECT WHERE country = \"USA\" FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What the the student ids for students not living in the USA?\n### Response (TSQL):",
    "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE country  =  \"USA\"",
    "dsql": "EXCEPT PROJECT StuID FROM Student WITH PROJECT StuID FROM SELECT WHERE country = \"USA\" FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show ids for all female (sex is F) students living in state PA.\n### Response (TSQL):",
    "sql": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
    "dsql": "PROJECT StuID FROM SELECT WHERE T1.state = \"PA\" AND T2.sex = 'F' FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What are the student ids for female students in the state of PA?\n### Response (TSQL):",
    "sql": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T1.state  =  \"PA\"  AND T2.sex  =  'F'",
    "dsql": "PROJECT StuID FROM SELECT WHERE T1.state = \"PA\" AND T2.sex = 'F' FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show ids for all male students living outside of USA.\n### Response (TSQL):",
    "sql": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
    "dsql": "PROJECT StuID FROM SELECT WHERE T2.sex = 'M' AND T1.country <> \"USA\" FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What are the ids for male students not in the USA?\n### Response (TSQL):",
    "sql": "SELECT StuID FROM City AS T1 JOIN Student AS T2 ON T1.city_code  =  T2.city_code WHERE T2.sex  =  'M' AND T1.country != \"USA\"",
    "dsql": "PROJECT StuID FROM SELECT WHERE T2.sex = 'M' AND T1.country <> \"USA\" FROM JOIN AS T1 FROM City WITH AS T2 FROM Student ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What is the distance between BAL and CHI?\n### Response (TSQL):",
    "sql": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\"",
    "dsql": "PROJECT distance FROM SELECT WHERE city1_code = \"BAL\" AND city2_code = \"CHI\" FROM Direct_distance "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Give the distance between BAL and CHI?\n### Response (TSQL):",
    "sql": "SELECT distance FROM Direct_distance WHERE city1_code  =  \"BAL\" AND city2_code  =  \"CHI\"",
    "dsql": "PROJECT distance FROM SELECT WHERE city1_code = \"BAL\" AND city2_code = \"CHI\" FROM Direct_distance "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show me the distance between Boston and Newark.\n### Response (TSQL):",
    "sql": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\"",
    "dsql": "PROJECT distance FROM SELECT WHERE T2.city_name = \"Boston\" AND T3.city_name = \"Newark\" FROM JOIN AS T2 FROM City WITH JOIN AS T1 FROM Direct_distance WITH AS T3 FROM City ON T1.city2_code = T3.city_code ON T1.city1_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What is the distance between Boston and Newark?\n### Response (TSQL):",
    "sql": "SELECT distance FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" AND T3.city_name  =  \"Newark\"",
    "dsql": "PROJECT distance FROM SELECT WHERE T2.city_name = \"Boston\" AND T3.city_name = \"Newark\" FROM JOIN AS T2 FROM City WITH JOIN AS T1 FROM Direct_distance WITH AS T3 FROM City ON T1.city2_code = T3.city_code ON T1.city1_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What is the average, minimum, maximum distance between two cities?\n### Response (TSQL):",
    "sql": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance",
    "dsql": "PROJECT AVG(distance), MIN(distance), MAX(distance) FROM AGGREGATE AVG(distance), MAX(distance), MIN(distance) FROM Direct_distance "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Give the average, minimum, and maximum distances between two cities.\n### Response (TSQL):",
    "sql": "SELECT avg(distance) ,  min(distance) ,  max(distance) FROM Direct_distance",
    "dsql": "PROJECT AVG(distance), MIN(distance), MAX(distance) FROM AGGREGATE AVG(distance), MAX(distance), MIN(distance) FROM Direct_distance "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show me the city code of two cities with maximum distance.\n### Response (TSQL):",
    "sql": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC distance FROM PROJECT city1_code, city2_code FROM Direct_distance "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What are the city codes of the cities with the maximum distance?\n### Response (TSQL):",
    "sql": "SELECT city1_code ,  city2_code FROM Direct_distance ORDER BY distance DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC distance FROM PROJECT city1_code, city2_code FROM Direct_distance "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show me the city code of two cities with a distance greater than the average.\n### Response (TSQL):",
    "sql": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)",
    "dsql": "PROJECT city1_code, city2_code FROM SELECT WHERE distance > PROJECT AVG(distance) FROM AGGREGATE AVG(distance) FROM Direct_distance FROM Direct_distance "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What are the city codes of cities with distance greater than average?\n### Response (TSQL):",
    "sql": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  >  (SELECT avg(distance) FROM Direct_distance)",
    "dsql": "PROJECT city1_code, city2_code FROM SELECT WHERE distance > PROJECT AVG(distance) FROM AGGREGATE AVG(distance) FROM Direct_distance FROM Direct_distance "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show me the city code of two cities with a distance less than 1000.\n### Response (TSQL):",
    "sql": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
    "dsql": "PROJECT city1_code, city2_code FROM SELECT WHERE distance < 1000 FROM Direct_distance "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What are the city codes corresponding to cities with distances less than 1000?\n### Response (TSQL):",
    "sql": "SELECT city1_code ,  city2_code FROM Direct_distance WHERE distance  <  1000",
    "dsql": "PROJECT city1_code, city2_code FROM SELECT WHERE distance < 1000 FROM Direct_distance "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What is the total distance between city BAL and all other cities.\n### Response (TSQL):",
    "sql": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\"",
    "dsql": "PROJECT SUM(distance) FROM AGGREGATE SUM(distance) FROM SELECT WHERE city1_code = \"BAL\" FROM Direct_distance "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What is the sum of distances between BAL and other cities?\n### Response (TSQL):",
    "sql": "SELECT sum(distance) FROM Direct_distance WHERE city1_code  =  \"BAL\"",
    "dsql": "PROJECT SUM(distance) FROM AGGREGATE SUM(distance) FROM SELECT WHERE city1_code = \"BAL\" FROM Direct_distance "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What is the average distance between Boston and all other cities.\n### Response (TSQL):",
    "sql": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\"",
    "dsql": "PROJECT AVG(distance) FROM AGGREGATE AVG(distance) FROM SELECT WHERE T2.city_name = \"Boston\" FROM JOIN AS T1 FROM Direct_distance WITH AS T2 FROM City ON T1.city1_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Give the average distance between Boston and other cities.\n### Response (TSQL):",
    "sql": "SELECT avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code WHERE T2.city_name  =  \"Boston\"",
    "dsql": "PROJECT AVG(distance) FROM AGGREGATE AVG(distance) FROM SELECT WHERE T2.city_name = \"Boston\" FROM JOIN AS T1 FROM Direct_distance WITH AS T2 FROM City ON T1.city1_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What is the name of the city closest to Chicago?\n### Response (TSQL):",
    "sql": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY distance FROM PROJECT T3.city_name FROM SELECT WHERE T2.city_name = \"Chicago\" FROM JOIN AS T2 FROM City WITH JOIN AS T1 FROM Direct_distance WITH AS T3 FROM City ON T1.city2_code = T3.city_code ON T1.city1_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Give the name of the nearest city to Chicago.\n### Response (TSQL):",
    "sql": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Chicago\" ORDER BY distance LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY distance FROM PROJECT T3.city_name FROM SELECT WHERE T2.city_name = \"Chicago\" FROM JOIN AS T2 FROM City WITH JOIN AS T1 FROM Direct_distance WITH AS T3 FROM City ON T1.city2_code = T3.city_code ON T1.city1_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What is the name of the city furthest to Boston?\n### Response (TSQL):",
    "sql": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC distance FROM PROJECT T3.city_name FROM SELECT WHERE T2.city_name = \"Boston\" FROM JOIN AS T2 FROM City WITH JOIN AS T1 FROM Direct_distance WITH AS T3 FROM City ON T1.city2_code = T3.city_code ON T1.city1_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Give the city name of the city with greatest distance from Boston.\n### Response (TSQL):",
    "sql": "SELECT T3.city_name FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code JOIN City AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.city_name  =  \"Boston\" ORDER BY distance DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC distance FROM PROJECT T3.city_name FROM SELECT WHERE T2.city_name = \"Boston\" FROM JOIN AS T2 FROM City WITH JOIN AS T1 FROM Direct_distance WITH AS T3 FROM City ON T1.city2_code = T3.city_code ON T1.city1_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show all city codes and the total distance to all other cities.\n### Response (TSQL):",
    "sql": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code",
    "dsql": "PROJECT city1_code, SUM(distance) FROM AGGREGATE COUNT(*), SUM(distance) GROUP BY city1_code FROM Direct_distance "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: For each city, what is the the city code and sum of distances from each?\n### Response (TSQL):",
    "sql": "SELECT city1_code ,  sum(distance) FROM Direct_distance GROUP BY city1_code",
    "dsql": "PROJECT city1_code, SUM(distance) FROM AGGREGATE COUNT(*), SUM(distance) GROUP BY city1_code FROM Direct_distance "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Show all city names and the average distance to all other cities.\n### Response (TSQL):",
    "sql": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code",
    "dsql": "PROJECT T2.city_name, AVG(distance) FROM AGGREGATE AVG(distance), COUNT(*) GROUP BY T1.city1_code FROM JOIN AS T1 FROM Direct_distance WITH AS T2 FROM City ON T1.city1_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What are the city name and average distances from each city?\n### Response (TSQL):",
    "sql": "SELECT T2.city_name ,  avg(distance) FROM Direct_distance AS T1 JOIN City AS T2 ON T1.city1_code  =  T2.city_code GROUP BY T1.city1_code",
    "dsql": "PROJECT T2.city_name, AVG(distance) FROM AGGREGATE AVG(distance), COUNT(*) GROUP BY T1.city1_code FROM JOIN AS T1 FROM Direct_distance WITH AS T2 FROM City ON T1.city1_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: How far do Linda (first name) Smith (last name) and Tracy (first name) Kim (last name) live?\n### Response (TSQL):",
    "sql": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\"",
    "dsql": "PROJECT distance FROM SELECT WHERE T2.Fname = \"Linda\" AND T2.Lname = \"Smith\" AND T3.Fname = \"Tracy\" AND T3.Lname = \"Kim\" FROM JOIN AS T2 FROM Student WITH JOIN AS T1 FROM Direct_distance WITH AS T3 FROM Student ON T1.city2_code = T3.city_code ON T1.city1_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What is the distance between the cities where Linda Smith and Tracy Kim live?\n### Response (TSQL):",
    "sql": "SELECT distance FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" AND T3.Fname  =  \"Tracy\" AND T3.Lname  =  \"Kim\"",
    "dsql": "PROJECT distance FROM SELECT WHERE T2.Fname = \"Linda\" AND T2.Lname = \"Smith\" AND T3.Fname = \"Tracy\" AND T3.Lname = \"Kim\" FROM JOIN AS T2 FROM Student WITH JOIN AS T1 FROM Direct_distance WITH AS T3 FROM Student ON T1.city2_code = T3.city_code ON T1.city1_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What is the first name and last name of the student living furthest to Linda Smith?\n### Response (TSQL):",
    "sql": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC distance FROM PROJECT T3.Fname, T3.Lname FROM SELECT WHERE T2.Fname = \"Linda\" AND T2.Lname = \"Smith\" FROM JOIN AS T2 FROM Student WITH JOIN AS T1 FROM Direct_distance WITH AS T3 FROM Student ON T1.city2_code = T3.city_code ON T1.city1_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: What is the full name of the student who lives furthest from Linda Smith?\n### Response (TSQL):",
    "sql": "SELECT T3.Fname ,  T3.Lname FROM Direct_distance AS T1 JOIN Student AS T2 ON T1.city1_code  =  T2.city_code JOIN Student AS T3 ON T1.city2_code  =  T3.city_code WHERE T2.Fname  =  \"Linda\" AND T2.Lname  =  \"Smith\" ORDER BY distance DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC distance FROM PROJECT T3.Fname, T3.Lname FROM SELECT WHERE T2.Fname = \"Linda\" AND T2.Lname = \"Smith\" FROM JOIN AS T2 FROM Student WITH JOIN AS T1 FROM Direct_distance WITH AS T3 FROM Student ON T1.city2_code = T3.city_code ON T1.city1_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Which state does the student whose first name is Linda live in?\n### Response (TSQL):",
    "sql": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\"",
    "dsql": "PROJECT state FROM SELECT WHERE T1.Fname = \"Linda\" FROM JOIN AS T1 FROM Student WITH AS T2 FROM City ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Student ( StuID number, LName text, Fname text, Age number, Sex text, Major number, Advisor number, city_code text, PRIMARY KEY(StuID), FOREIGN KEY(city_code) REFERENCES City (city_code)); CREATE TABLE Direct_distance ( city1_code text, city2_code text, distance number, FOREIGN KEY(city2_code) REFERENCES City (city_code), FOREIGN KEY(city1_code) REFERENCES City (city_code)); CREATE TABLE City ( city_code text, city_name text, state text, country text, latitude number, longitude number, PRIMARY KEY(city_code)); \n### Question: Give the state that the student with first name Linda lives in.\n### Response (TSQL):",
    "sql": "SELECT state FROM Student AS T1 JOIN City AS T2 ON T1.city_code  =  T2.city_code WHERE T1.Fname  =  \"Linda\"",
    "dsql": "PROJECT state FROM SELECT WHERE T1.Fname = \"Linda\" FROM JOIN AS T1 FROM Student WITH AS T2 FROM City ON T1.city_code = T2.city_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Return all details of sailors who are older than 30.\n### Response (TSQL):",
    "sql": "SELECT * FROM Sailors WHERE age  >  30",
    "dsql": "PROJECT * FROM SELECT WHERE age > 30 FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What can you tell me about sailors who are older than age 30?\n### Response (TSQL):",
    "sql": "SELECT * FROM Sailors WHERE age  >  30",
    "dsql": "PROJECT * FROM SELECT WHERE age > 30 FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Return name and age for sailors who are younger than 30.\n### Response (TSQL):",
    "sql": "SELECT name ,  age FROM Sailors WHERE age  <  30",
    "dsql": "PROJECT name, age FROM SELECT WHERE age < 30 FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the name and age of every sailor who is younger than age 30?\n### Response (TSQL):",
    "sql": "SELECT name ,  age FROM Sailors WHERE age  <  30",
    "dsql": "PROJECT name, age FROM SELECT WHERE age < 30 FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find boats reserved by Sailor with id 1.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
    "dsql": "PROJECT DISTINCT bid FROM SELECT WHERE sid = 1 FROM Reserves "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the different boat ids reserved by the sailor whose id is 1?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT bid FROM Reserves WHERE sid = 1",
    "dsql": "PROJECT DISTINCT bid FROM SELECT WHERE sid = 1 FROM Reserves "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Who reserved boat 102?\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102",
    "dsql": "PROJECT T1.name FROM SELECT WHERE T2.bid = 102 FROM JOIN AS T1 FROM Sailors WITH AS T2 FROM Reserves ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the name of the sailor who reserved boat 102?\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE T2.bid  =  102",
    "dsql": "PROJECT T1.name FROM SELECT WHERE T2.bid = 102 FROM JOIN AS T1 FROM Sailors WITH AS T2 FROM Reserves ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Return the unique boat ids (bid) of all reserved boats.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT bid FROM Reserves",
    "dsql": "PROJECT DISTINCT bid FROM Reserves "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the ids of all boats that are reserved by someone?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT bid FROM Reserves",
    "dsql": "PROJECT DISTINCT bid FROM Reserves "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the name of sailors whose names contain letter e?\n### Response (TSQL):",
    "sql": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
    "dsql": "PROJECT name FROM SELECT WHERE name LIKE '%e%' FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the name of every sailor whose name contains the letter e?\n### Response (TSQL):",
    "sql": "SELECT name FROM Sailors WHERE name LIKE '%e%'",
    "dsql": "PROJECT name FROM SELECT WHERE name LIKE '%e%' FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: return the unique ids of sailors who are older than any sailors.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);",
    "dsql": "PROJECT DISTINCT sid FROM SELECT WHERE age > PROJECT MIN(age) FROM AGGREGATE MIN(age) FROM Sailors FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the different id of every sailor who is not the youngest?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT sid FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors);",
    "dsql": "PROJECT DISTINCT sid FROM SELECT WHERE age > PROJECT MIN(age) FROM AGGREGATE MIN(age) FROM Sailors FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Return the unique names of sailors who are older than any sailors whose rating is larger than 7.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);",
    "dsql": "PROJECT DISTINCT name FROM SELECT WHERE age > PROJECT MIN(age) FROM AGGREGATE MIN(age) FROM SELECT WHERE rating > 7 FROM Sailors FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the different names of sailors who are older than some other sailor with a rating larger than 7?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT name FROM Sailors WHERE age  >  (SELECT min(age) FROM Sailors WHERE rating  >  7);",
    "dsql": "PROJECT DISTINCT name FROM SELECT WHERE age > PROJECT MIN(age) FROM AGGREGATE MIN(age) FROM SELECT WHERE rating > 7 FROM Sailors FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the name and id of the sailors who reserved at least one boat?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
    "dsql": "PROJECT DISTINCT T1.name, T1.sid FROM JOIN AS T1 FROM Sailors WITH AS T2 FROM Reserves ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the name and id of every sailor who reserved one or more boats?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
    "dsql": "PROJECT DISTINCT T1.name, T1.sid FROM JOIN AS T1 FROM Sailors WITH AS T2 FROM Reserves ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the id and name of the sailors who reserved more than one boat.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid GROUP BY T2.sid HAVING COUNT(*)  >  1",
    "dsql": "PROJECT DISTINCT T1.name, T1.sid FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T2.sid FROM JOIN AS T1 FROM Sailors WITH AS T2 FROM Reserves ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the different names of sailors who reserved two or more boats ?\n### Response (TSQL):",
    "sql": "select distinct t1.name ,  t1.sid from sailors as t1 join reserves as t2 on t1.sid  =  t2.sid group by t2.sid having count(*)  >=  2",
    "dsql": "PROJECT DISTINCT t1.name, t1.sid FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY t2.sid FROM JOIN AS t1 FROM sailors WITH AS t2 FROM reserves ON t1.sid = t2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the id of Sailors (sid) that reserved red or blue boat.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
    "dsql": "PROJECT DISTINCT T2.sid FROM SELECT WHERE T1.color = 'red' OR T1.color = \"blue\" FROM JOIN AS T1 FROM Boats WITH AS T2 FROM Reserves ON T1.bid = T2.bid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the sids for sailors who reserved red or blue boats?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
    "dsql": "PROJECT DISTINCT T2.sid FROM SELECT WHERE T1.color = 'red' OR T1.color = \"blue\" FROM JOIN AS T1 FROM Boats WITH AS T2 FROM Reserves ON T1.bid = T2.bid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the name and id of Sailors (sid) that reserved red or blue boat.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
    "dsql": "PROJECT DISTINCT T2.sid, T3.name FROM SELECT WHERE T1.color = 'red' OR T1.color = \"blue\" FROM JOIN AS T1 FROM Boats WITH JOIN AS T2 FROM Reserves WITH AS T3 FROM Sailors ON T2.sid = T3.sid ON T1.bid = T2.bid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the names and ids of sailors who reserved red or blue boats?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' OR T1.color  =  \"blue\"",
    "dsql": "PROJECT DISTINCT T2.sid, T3.name FROM SELECT WHERE T1.color = 'red' OR T1.color = \"blue\" FROM JOIN AS T1 FROM Boats WITH JOIN AS T2 FROM Reserves WITH AS T3 FROM Sailors ON T2.sid = T3.sid ON T1.bid = T2.bid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the id of Sailors (sid) that reserved red and blue boat.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
    "dsql": "INTERSECT PROJECT DISTINCT T2.sid FROM SELECT WHERE T1.color = 'red' FROM JOIN AS T1 FROM Boats WITH AS T2 FROM Reserves ON T1.bid = T2.bid WITH PROJECT DISTINCT T2.sid FROM SELECT WHERE T1.color = \"blue\" FROM JOIN AS T1 FROM Boats WITH AS T2 FROM Reserves ON T1.bid = T2.bid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the ids of sailors who reserved red and blue boats?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid WHERE T1.color  =  \"blue\"",
    "dsql": "INTERSECT PROJECT DISTINCT T2.sid FROM SELECT WHERE T1.color = 'red' FROM JOIN AS T1 FROM Boats WITH AS T2 FROM Reserves ON T1.bid = T2.bid WITH PROJECT DISTINCT T2.sid FROM SELECT WHERE T1.color = \"blue\" FROM JOIN AS T1 FROM Boats WITH AS T2 FROM Reserves ON T1.bid = T2.bid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the name and id of Sailors (sid) that reserved red and blue boat.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
    "dsql": "INTERSECT PROJECT DISTINCT T2.sid, T3.name FROM SELECT WHERE T1.color = 'red' FROM JOIN AS T1 FROM Boats WITH JOIN AS T2 FROM Reserves WITH AS T3 FROM Sailors ON T2.sid = T3.sid ON T1.bid = T2.bid WITH PROJECT DISTINCT T2.sid, T3.name FROM SELECT WHERE T1.color = \"blue\" FROM JOIN AS T1 FROM Boats WITH JOIN AS T2 FROM Reserves WITH AS T3 FROM Sailors ON T2.sid = T3.sid ON T1.bid = T2.bid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the names and ids of sailors who reserved red and blue boats?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  'red' INTERSECT SELECT DISTINCT T2.sid ,  T3.name FROM Boats AS T1 JOIN Reserves AS T2 ON  T1.bid  =  T2.bid JOIN Sailors AS T3 ON T2.sid  =  T3.sid WHERE T1.color  =  \"blue\"",
    "dsql": "INTERSECT PROJECT DISTINCT T2.sid, T3.name FROM SELECT WHERE T1.color = 'red' FROM JOIN AS T1 FROM Boats WITH JOIN AS T2 FROM Reserves WITH AS T3 FROM Sailors ON T2.sid = T3.sid ON T1.bid = T2.bid WITH PROJECT DISTINCT T2.sid, T3.name FROM SELECT WHERE T1.color = \"blue\" FROM JOIN AS T1 FROM Boats WITH JOIN AS T2 FROM Reserves WITH AS T3 FROM Sailors ON T2.sid = T3.sid ON T1.bid = T2.bid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the ids of sailors that haven\u2019t reserved a boat?\n### Response (TSQL):",
    "sql": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
    "dsql": "EXCEPT PROJECT sid FROM Sailors WITH PROJECT sid FROM Reserves "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the ids of sailors who have not reserved a boat?\n### Response (TSQL):",
    "sql": "SELECT sid FROM Sailors EXCEPT SELECT sid FROM Reserves",
    "dsql": "EXCEPT PROJECT sid FROM Sailors WITH PROJECT sid FROM Reserves "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: what is the name and id of sailors who do not have a reservation of a boat?\n### Response (TSQL):",
    "sql": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
    "dsql": "EXCEPT PROJECT sid, name FROM Sailors WITH PROJECT T1.sid, T1.name FROM JOIN AS T1 FROM Sailors WITH AS T2 FROM Reserves ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the names and ids of all sailors who do not have boat reservations?\n### Response (TSQL):",
    "sql": "SELECT sid ,  name FROM Sailors EXCEPT SELECT T1.sid ,  T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
    "dsql": "EXCEPT PROJECT sid, name FROM Sailors WITH PROJECT T1.sid, T1.name FROM JOIN AS T1 FROM Sailors WITH AS T2 FROM Reserves ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find id for the sailors who do not have a reservation of a boat?\n### Response (TSQL):",
    "sql": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
    "dsql": "EXCEPT PROJECT sid FROM Sailors WITH PROJECT T1.sid FROM JOIN AS T1 FROM Sailors WITH AS T2 FROM Reserves ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is id about sailors who do not have boat reservations?\n### Response (TSQL):",
    "sql": "SELECT sid FROM Sailors EXCEPT SELECT T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid",
    "dsql": "EXCEPT PROJECT sid FROM Sailors WITH PROJECT T1.sid FROM JOIN AS T1 FROM Sailors WITH AS T2 FROM Reserves ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the name of the sailors who reserved boat with id 103?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103",
    "dsql": "PROJECT DISTINCT T1.name FROM SELECT WHERE T2.bid = 103 FROM JOIN AS T1 FROM Sailors WITH AS T2 FROM Reserves ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the name of the sailors who reserved boat with id 103.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T2.bid  =  103",
    "dsql": "PROJECT DISTINCT T1.name FROM SELECT WHERE T2.bid = 103 FROM JOIN AS T1 FROM Sailors WITH AS T2 FROM Reserves ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the name of all sailors whose rating is higher than any sailor named Luis?\n### Response (TSQL):",
    "sql": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
    "dsql": "PROJECT name FROM SELECT WHERE rating > PROJECT MIN(rating) FROM AGGREGATE MIN(rating) FROM SELECT WHERE name = 'Luis' FROM Sailors FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the sailors' names, the ones whose rating is higher than any sailor named Luis?\n### Response (TSQL):",
    "sql": "SELECT name FROM Sailors WHERE rating  >  (SELECT min(rating) FROM Sailors WHERE name  =  'Luis')",
    "dsql": "PROJECT name FROM SELECT WHERE rating > PROJECT MIN(rating) FROM AGGREGATE MIN(rating) FROM SELECT WHERE name = 'Luis' FROM Sailors FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the name of all sailors whose rating is higher than all sailors named Luis?\n### Response (TSQL):",
    "sql": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
    "dsql": "PROJECT name FROM SELECT WHERE rating > PROJECT MAX(rating) FROM AGGREGATE MAX(rating) FROM SELECT WHERE name = 'Luis' FROM Sailors FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the names of all sailors with a higher rating than every sailor named Luis?\n### Response (TSQL):",
    "sql": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(rating) FROM Sailors WHERE name  =  'Luis')",
    "dsql": "PROJECT name FROM SELECT WHERE rating > PROJECT MAX(rating) FROM AGGREGATE MAX(rating) FROM SELECT WHERE name = 'Luis' FROM Sailors FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: what is the name and id of every sailor who has a rating greater than 2 and reserved a boat.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2",
    "dsql": "PROJECT DISTINCT T1.name, T1.sid FROM SELECT WHERE T1.rating > 2 FROM JOIN AS T1 FROM Sailors WITH AS T2 FROM Reserves ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the names and ids of all sailors who have a rating of at least 3 and reserved a boat?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.name ,  T1.sid FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid WHERE  T1.rating  >  2",
    "dsql": "PROJECT DISTINCT T1.name, T1.sid FROM SELECT WHERE T1.rating > 2 FROM JOIN AS T1 FROM Sailors WITH AS T2 FROM Reserves ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the name and age of the oldest sailor.\n### Response (TSQL):",
    "sql": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )",
    "dsql": "PROJECT name, age FROM SELECT WHERE age = PROJECT MAX(age) FROM AGGREGATE MAX(age) FROM Sailors FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the name and age of the sailor with maximum age?\n### Response (TSQL):",
    "sql": "SELECT name ,  age FROM Sailors WHERE age  =  ( SELECT max(age) FROM Sailors )",
    "dsql": "PROJECT name, age FROM SELECT WHERE age = PROJECT MAX(age) FROM AGGREGATE MAX(age) FROM Sailors FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: how many sailors in total?\n### Response (TSQL):",
    "sql": "SELECT COUNT(*) FROM Sailors",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: How many sailors exist?\n### Response (TSQL):",
    "sql": "SELECT COUNT(*) FROM Sailors",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the average age of sailors whose rating is 7?\n### Response (TSQL):",
    "sql": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
    "dsql": "PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM SELECT WHERE rating = 7 FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is average age of all sailors who have a rating of 7?\n### Response (TSQL):",
    "sql": "SELECT AVG(age) FROM Sailors WHERE rating  =  7",
    "dsql": "PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM SELECT WHERE rating = 7 FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: How many sailors whose name starts with letter D exist ?\n### Response (TSQL):",
    "sql": "select count(*) from sailors where name like 'd%'",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE name LIKE 'd%' FROM sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the count of the sailors whose name starts with letter D ?\n### Response (TSQL):",
    "sql": "select count(*) from sailors where name like 'd%'",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE name LIKE 'd%' FROM sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the average rating and max age of all sailors?\n### Response (TSQL):",
    "sql": "SELECT AVG(rating) ,  MAX(age) FROM Sailors",
    "dsql": "PROJECT AVG(rating), MAX(age) FROM AGGREGATE MAX(age), AVG(rating) FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the average rating and largest age for the sailors\n### Response (TSQL):",
    "sql": "SELECT AVG(rating) ,  MAX(age) FROM Sailors",
    "dsql": "PROJECT AVG(rating), MAX(age) FROM AGGREGATE MAX(age), AVG(rating) FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the number of reservations for each boat.\n### Response (TSQL):",
    "sql": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid",
    "dsql": "PROJECT bid, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY bid FROM Reserves "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: How many reservations exist for each boat?\n### Response (TSQL):",
    "sql": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid",
    "dsql": "PROJECT bid, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY bid FROM Reserves "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the number of reservations for each boat with id greater than 50.\n### Response (TSQL):",
    "sql": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50",
    "dsql": "PROJECT bid, COUNT(*) FROM SELECT WHERE bid > 50 FROM AGGREGATE COUNT(*) GROUP BY bid FROM Reserves "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: How many reservations exist for each boat with an id greater than 50?\n### Response (TSQL):",
    "sql": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING bid  >  50",
    "dsql": "PROJECT bid, COUNT(*) FROM SELECT WHERE bid > 50 FROM AGGREGATE COUNT(*) GROUP BY bid FROM Reserves "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the number of reservations for each boat with more than 1 reservation.\n### Response (TSQL):",
    "sql": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1",
    "dsql": "PROJECT bid, COUNT(*) FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY bid FROM Reserves "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: How many reservations exist for each boat that has more than 1 reservation already?\n### Response (TSQL):",
    "sql": "SELECT bid ,  count(*) FROM Reserves GROUP BY bid HAVING count(*)  >  1",
    "dsql": "PROJECT bid, COUNT(*) FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY bid FROM Reserves "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the number of reservations by sailors with id greater than 1 for each boat.\n### Response (TSQL):",
    "sql": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
    "dsql": "PROJECT bid, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY bid FROM SELECT WHERE sid > 1 FROM Reserves "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: How many reservations for each boat did the sailors with an id greater than 1 make?\n### Response (TSQL):",
    "sql": "SELECT bid ,  count(*) FROM Reserves WHERE sid  >  1 GROUP BY bid",
    "dsql": "PROJECT bid, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY bid FROM SELECT WHERE sid > 1 FROM Reserves "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the rating and average age for sailors who have reserved red boat grouped by rating?\n### Response (TSQL):",
    "sql": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
    "dsql": "PROJECT T1.rating, AVG(T1.age) FROM AGGREGATE AVG(T1.age), COUNT(*) GROUP BY T1.rating FROM SELECT WHERE T3.color = 'red' FROM JOIN AS T1 FROM Sailors WITH JOIN AS T2 FROM Reserves WITH AS T3 FROM Boats ON T3.bid = T2.bid ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the rating and average age for sailors who reserved red boats for each rating?\n### Response (TSQL):",
    "sql": "SELECT T1.rating ,  avg(T1.age) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red' GROUP BY T1.rating",
    "dsql": "PROJECT T1.rating, AVG(T1.age) FROM AGGREGATE AVG(T1.age), COUNT(*) GROUP BY T1.rating FROM SELECT WHERE T3.color = 'red' FROM JOIN AS T1 FROM Sailors WITH JOIN AS T2 FROM Reserves WITH AS T3 FROM Boats ON T3.bid = T2.bid ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the name, rating and age of all sailors ordered by rating and age.\n### Response (TSQL):",
    "sql": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age",
    "dsql": "ORDER BY rating, age FROM PROJECT name, rating, age FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the name, rating, and age for every sailor? And order them by rating and age.\n### Response (TSQL):",
    "sql": "SELECT name ,  rating ,  age FROM Sailors ORDER BY rating ,  age",
    "dsql": "ORDER BY rating, age FROM PROJECT name, rating, age FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the total number of boats.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Boats",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Boats "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: How many boats are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Boats",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Boats "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: How many boats are red?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Boats WHERE color  =  'red'",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE color = 'red' FROM Boats "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: How many red boats exist?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Boats WHERE color  =  'red'",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE color = 'red' FROM Boats "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the names of boats booked by sailors whose age is between 20 and 30.\n### Response (TSQL):",
    "sql": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30",
    "dsql": "PROJECT T3.name FROM SELECT WHERE T1.age BETWEEN 20 AND 30 FROM JOIN AS T1 FROM Sailors WITH JOIN AS T2 FROM Reserves WITH AS T3 FROM Boats ON T3.bid = T2.bid ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the names of the boats booked by people between age 20 and 30?\n### Response (TSQL):",
    "sql": "SELECT T3.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T1.age BETWEEN 20 AND 30",
    "dsql": "PROJECT T3.name FROM SELECT WHERE T1.age BETWEEN 20 AND 30 FROM JOIN AS T1 FROM Sailors WITH JOIN AS T2 FROM Reserves WITH AS T3 FROM Boats ON T3.bid = T2.bid ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the names of sailors whose rating is larger than the rating of all sailors who booked a red boat.\n### Response (TSQL):",
    "sql": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
    "dsql": "PROJECT name FROM SELECT WHERE rating > PROJECT MAX(T1.rating) FROM AGGREGATE MAX(T1.rating) FROM SELECT WHERE T3.color = 'red' FROM JOIN AS T1 FROM Sailors WITH JOIN AS T2 FROM Reserves WITH AS T3 FROM Boats ON T3.bid = T2.bid ON T1.sid = T2.sid FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the names of the sailors whose rating is larger than the rating of all sailors who booked a red boat?\n### Response (TSQL):",
    "sql": "SELECT name FROM Sailors WHERE rating  >  (SELECT max(T1.rating) FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.color  =  'red')",
    "dsql": "PROJECT name FROM SELECT WHERE rating > PROJECT MAX(T1.rating) FROM AGGREGATE MAX(T1.rating) FROM SELECT WHERE T3.color = 'red' FROM JOIN AS T1 FROM Sailors WITH JOIN AS T2 FROM Reserves WITH AS T3 FROM Boats ON T3.bid = T2.bid ON T1.sid = T2.sid FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is highest rating between sailors?\n### Response (TSQL):",
    "sql": "SELECT max(rating) FROM Sailors",
    "dsql": "PROJECT MAX(rating) FROM AGGREGATE MAX(rating) FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What is the maximum rating for sailors?\n### Response (TSQL):",
    "sql": "SELECT max(rating) FROM Sailors",
    "dsql": "PROJECT MAX(rating) FROM AGGREGATE MAX(rating) FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: Find the names of sailors who reserved boat with the name Melon.\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
    "dsql": "PROJECT T1.name FROM SELECT WHERE T3.name = 'Melon' FROM JOIN AS T1 FROM Sailors WITH JOIN AS T2 FROM Reserves WITH AS T3 FROM Boats ON T3.bid = T2.bid ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the names of sailors who reserved a boat with the name Melon?\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM Sailors AS T1 JOIN Reserves AS T2 ON T1.sid  =  T2.sid JOIN Boats AS T3 ON T3.bid  =  T2.bid WHERE T3.name  =  'Melon'",
    "dsql": "PROJECT T1.name FROM SELECT WHERE T3.name = 'Melon' FROM JOIN AS T1 FROM Sailors WITH JOIN AS T2 FROM Reserves WITH AS T3 FROM Boats ON T3.bid = T2.bid ON T1.sid = T2.sid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: List the names and ages of all sailors sorted by rating in descending order.\n### Response (TSQL):",
    "sql": "SELECT name ,  age FROM Sailors ORDER BY rating DESC",
    "dsql": "ORDER BY DESC rating FROM PROJECT name, age FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Sailors ( sid number, name text, rating number, age number, PRIMARY KEY(sid)); CREATE TABLE Boats ( bid number, name text, color text, PRIMARY KEY(bid)); CREATE TABLE Reserves ( sid number, bid number, day text, FOREIGN KEY(bid) REFERENCES Boats (bid), FOREIGN KEY(sid) REFERENCES Sailors (sid)); \n### Question: What are the names and ages of all sailors sorted by decreasing rating?\n### Response (TSQL):",
    "sql": "SELECT name ,  age FROM Sailors ORDER BY rating DESC",
    "dsql": "ORDER BY DESC rating FROM PROJECT name, age FROM Sailors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find the model of the most expensive headphone.\n### Response (TSQL):",
    "sql": "SELECT model FROM headphone ORDER BY price DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC price FROM PROJECT model FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Which headphone model has the highest price?\n### Response (TSQL):",
    "sql": "SELECT model FROM headphone ORDER BY price DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC price FROM PROJECT model FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: List all different headphone models in the alphabetical order.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT model FROM headphone ORDER BY model",
    "dsql": "ORDER BY model FROM PROJECT DISTINCT model FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Return the list of distinct headphone models ordered alphabetically.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT model FROM headphone ORDER BY model",
    "dsql": "ORDER BY model FROM PROJECT DISTINCT model FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Which headphone class is the most common one?\n### Response (TSQL):",
    "sql": "SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT CLASS FROM AGGREGATE COUNT(*) GROUP BY CLASS FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Which headphone class contains the most headphones?\n### Response (TSQL):",
    "sql": "SELECT CLASS FROM headphone GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT CLASS FROM AGGREGATE COUNT(*) GROUP BY CLASS FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Which headphone class does have more than two headphones?\n### Response (TSQL):",
    "sql": "SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2",
    "dsql": "PROJECT CLASS FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY CLASS FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find the headphone class that does not contain more than two headphones.\n### Response (TSQL):",
    "sql": "SELECT CLASS FROM headphone GROUP BY CLASS HAVING count(*)  >  2",
    "dsql": "PROJECT CLASS FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY CLASS FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find the number of headphones with a price higher than 200 for each class.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS",
    "dsql": "PROJECT COUNT(*), CLASS FROM AGGREGATE COUNT(*) GROUP BY CLASS FROM SELECT WHERE price > 200 FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: How many headphones cost more than 200 for each headphone class?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  CLASS FROM headphone WHERE price  >  200 GROUP BY CLASS",
    "dsql": "PROJECT COUNT(*), CLASS FROM AGGREGATE COUNT(*) GROUP BY CLASS FROM SELECT WHERE price > 200 FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: how many different earpads are there?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT earpads) FROM headphone",
    "dsql": "PROJECT COUNT(DISTINCT earpads) FROM AGGREGATE COUNT(DISTINCT earpads) FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Count the number of different earpads.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT earpads) FROM headphone",
    "dsql": "PROJECT COUNT(DISTINCT earpads) FROM AGGREGATE COUNT(DISTINCT earpads) FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find the top 2 earpads that are mostly used.\n### Response (TSQL):",
    "sql": "SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2",
    "dsql": "LIMIT 2 FROM ORDER BY DESC COUNT(*) FROM PROJECT earpads FROM AGGREGATE COUNT(*) GROUP BY earpads FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: What are the top 2 earpads in terms of the number of headphones using them?\n### Response (TSQL):",
    "sql": "SELECT earpads FROM headphone GROUP BY earpads ORDER BY count(*) DESC LIMIT 2",
    "dsql": "LIMIT 2 FROM ORDER BY DESC COUNT(*) FROM PROJECT earpads FROM AGGREGATE COUNT(*) GROUP BY earpads FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: What are the model, class, and construction of the cheapest headphone?\n### Response (TSQL):",
    "sql": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY price FROM PROJECT model, CLASS, construction FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find the model, class, and construction of the headphone with the lowest price.\n### Response (TSQL):",
    "sql": "SELECT model ,  CLASS ,  construction FROM headphone ORDER BY price LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY price FROM PROJECT model, CLASS, construction FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find the average price for each headphone construction.\n### Response (TSQL):",
    "sql": "SELECT construction ,  avg(price) FROM headphone GROUP BY construction",
    "dsql": "PROJECT construction, AVG(price) FROM AGGREGATE AVG(price), COUNT(*) GROUP BY construction FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: How much does headphones cost on average for each headphone construction?\n### Response (TSQL):",
    "sql": "SELECT construction ,  avg(price) FROM headphone GROUP BY construction",
    "dsql": "PROJECT construction, AVG(price) FROM AGGREGATE AVG(price), COUNT(*) GROUP BY construction FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Which headphone classes have both headphones with \"Bowls\" and headphones with \"Comfort Pads\" earpads?\n### Response (TSQL):",
    "sql": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'",
    "dsql": "INTERSECT PROJECT CLASS FROM SELECT WHERE earpads = 'Bowls' FROM headphone WITH PROJECT CLASS FROM SELECT WHERE earpads = 'Comfort Pads' FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find the headphone classes that contain both headphones using \"Bowls\" earpads and headphones using \"Comfort Pads\" earpads.\n### Response (TSQL):",
    "sql": "SELECT CLASS FROM headphone WHERE earpads  =  'Bowls' INTERSECT SELECT CLASS FROM headphone WHERE earpads  =  'Comfort Pads'",
    "dsql": "INTERSECT PROJECT CLASS FROM SELECT WHERE earpads = 'Bowls' FROM headphone WITH PROJECT CLASS FROM SELECT WHERE earpads = 'Comfort Pads' FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Which earpads never use plastic construction?\n### Response (TSQL):",
    "sql": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'",
    "dsql": "EXCEPT PROJECT earpads FROM headphone WITH PROJECT earpads FROM SELECT WHERE construction = 'Plastic' FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find all earpads that do not use plastic construction.\n### Response (TSQL):",
    "sql": "SELECT earpads FROM headphone EXCEPT SELECT earpads FROM headphone WHERE construction  =  'Plastic'",
    "dsql": "EXCEPT PROJECT earpads FROM headphone WITH PROJECT earpads FROM SELECT WHERE construction = 'Plastic' FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find the headphone models whose price is below the average price.\n### Response (TSQL):",
    "sql": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
    "dsql": "PROJECT model FROM SELECT WHERE price < PROJECT AVG(price) FROM AGGREGATE AVG(price) FROM headphone FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: What are the headphone models that cost less than the average price?\n### Response (TSQL):",
    "sql": "SELECT model FROM headphone WHERE price  <  (SELECT avg(price) FROM headphone)",
    "dsql": "PROJECT model FROM SELECT WHERE price < PROJECT AVG(price) FROM AGGREGATE AVG(price) FROM headphone FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Sort all store names by store open date.\n### Response (TSQL):",
    "sql": "SELECT name FROM store ORDER BY date_opened",
    "dsql": "ORDER BY date_opened FROM PROJECT name FROM store "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Give me a list of store names, sorted by store open date.\n### Response (TSQL):",
    "sql": "SELECT name FROM store ORDER BY date_opened",
    "dsql": "ORDER BY date_opened FROM PROJECT name FROM store "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: List name and parking info for the stores in the Tarzana neighborhood.\n### Response (TSQL):",
    "sql": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
    "dsql": "PROJECT name, parking FROM SELECT WHERE neighborhood = 'Tarzana' FROM store "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Which stores are located in the \"Tarzana\" neighborhood? Return their names and parking information.\n### Response (TSQL):",
    "sql": "SELECT name ,  parking FROM store WHERE neighborhood  =  'Tarzana'",
    "dsql": "PROJECT name, parking FROM SELECT WHERE neighborhood = 'Tarzana' FROM store "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: How many different neighborhoods are there for all stores?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT neighborhood) FROM store",
    "dsql": "PROJECT COUNT(DISTINCT neighborhood) FROM AGGREGATE COUNT(DISTINCT neighborhood) FROM store "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Count the number of distinct neighborhoods stores are located.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT neighborhood) FROM store",
    "dsql": "PROJECT COUNT(DISTINCT neighborhood) FROM AGGREGATE COUNT(DISTINCT neighborhood) FROM store "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: find the number of stores in each neighborhood.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood",
    "dsql": "PROJECT COUNT(*), neighborhood FROM AGGREGATE COUNT(*) GROUP BY neighborhood FROM store "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: How many stores are there in each neighborhood?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  neighborhood FROM store GROUP BY neighborhood",
    "dsql": "PROJECT COUNT(*), neighborhood FROM AGGREGATE COUNT(*) GROUP BY neighborhood FROM store "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find the name of the store which has the most headphones in stock. List the number of headphones as well.\n### Response (TSQL):",
    "sql": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC SUM(t2.quantity) FROM PROJECT t1.name, SUM(t2.quantity) FROM AGGREGATE SUM(t2.quantity), COUNT(*) GROUP BY t2.store_id FROM JOIN AS t1 FROM store WITH AS t2 FROM stock ON t1.store_id = t2.store_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Which store has the headphones in stock? Give me the store name and the total quantity.\n### Response (TSQL):",
    "sql": "SELECT t1.name ,  sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id GROUP BY t2.store_id ORDER BY sum(t2.quantity) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC SUM(t2.quantity) FROM PROJECT t1.name, SUM(t2.quantity) FROM AGGREGATE SUM(t2.quantity), COUNT(*) GROUP BY t2.store_id FROM JOIN AS t1 FROM store WITH AS t2 FROM stock ON t1.store_id = t2.store_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find the name of stores which have no headphone in stock.\n### Response (TSQL):",
    "sql": "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)",
    "dsql": "PROJECT name FROM SELECT WHERE store_id NOT IN PROJECT store_id FROM stock FROM store "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Which stores do not have any headphones in stock? Give me the store names.\n### Response (TSQL):",
    "sql": "SELECT name FROM store WHERE store_id NOT IN (SELECT store_id FROM stock)",
    "dsql": "PROJECT name FROM SELECT WHERE store_id NOT IN PROJECT store_id FROM stock FROM store "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Which headphone models do not have any stock in any store?\n### Response (TSQL):",
    "sql": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
    "dsql": "PROJECT model FROM SELECT WHERE headphone_id NOT IN PROJECT headphone_id FROM stock FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find the headphone models that are not in stock in any store.\n### Response (TSQL):",
    "sql": "SELECT model FROM headphone WHERE headphone_id NOT IN (SELECT headphone_id FROM stock)",
    "dsql": "PROJECT model FROM SELECT WHERE headphone_id NOT IN PROJECT headphone_id FROM stock FROM headphone "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Which headphone model has the largest quantity of stock across all the stores?\n### Response (TSQL):",
    "sql": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC SUM(t2.quantity) FROM PROJECT t1.model FROM AGGREGATE SUM(t2.quantity), COUNT(*) GROUP BY t1.model FROM JOIN AS t1 FROM headphone WITH AS t2 FROM stock ON t1.headphone_id = t2.headphone_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find the headphone model whose total quantity in stock is the largest.\n### Response (TSQL):",
    "sql": "SELECT t1.model FROM headphone AS t1 JOIN stock AS t2 ON t1.headphone_id  =  t2.headphone_id GROUP BY t1.model ORDER BY sum(t2.quantity) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC SUM(t2.quantity) FROM PROJECT t1.model FROM AGGREGATE SUM(t2.quantity), COUNT(*) GROUP BY t1.model FROM JOIN AS t1 FROM headphone WITH AS t2 FROM stock ON t1.headphone_id = t2.headphone_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: How many headphones are stored in the Woodman store?\n### Response (TSQL):",
    "sql": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'",
    "dsql": "PROJECT SUM(t2.quantity) FROM AGGREGATE SUM(t2.quantity) FROM SELECT WHERE t1.name = 'Woodman' FROM JOIN AS t1 FROM store WITH AS t2 FROM stock ON t1.store_id = t2.store_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find the total quantity of headphones stored in the Woodman store.\n### Response (TSQL):",
    "sql": "SELECT sum(t2.quantity) FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id WHERE t1.name  =  'Woodman'",
    "dsql": "PROJECT SUM(t2.quantity) FROM AGGREGATE SUM(t2.quantity) FROM SELECT WHERE t1.name = 'Woodman' FROM JOIN AS t1 FROM store WITH AS t2 FROM stock ON t1.store_id = t2.store_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Which neighborhood does not have any headphone in stock?\n### Response (TSQL):",
    "sql": "SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id",
    "dsql": "EXCEPT PROJECT Neighborhood FROM store WITH PROJECT t1.Neighborhood FROM JOIN AS t1 FROM store WITH AS t2 FROM stock ON t1.store_id = t2.store_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE headphone ( Headphone_ID number, Model text, Class text, Driver-matched_dB number, Construction text, Earpads text, Price number, PRIMARY KEY(Headphone_ID)); CREATE TABLE store ( Store_ID number, Name text, Neighborhood text, Parking text, Date_Opened text, PRIMARY KEY(Store_ID)); CREATE TABLE stock ( Store_ID number, Headphone_ID number, Quantity number, PRIMARY KEY(Store_ID), FOREIGN KEY(Headphone_ID) REFERENCES headphone (Headphone_ID), FOREIGN KEY(Store_ID) REFERENCES store (Store_ID)); \n### Question: Find the neighborhood where no headphones are in stock.\n### Response (TSQL):",
    "sql": "SELECT Neighborhood FROM store EXCEPT SELECT t1.Neighborhood FROM store AS t1 JOIN stock AS t2 ON t1.store_id  =  t2.store_id",
    "dsql": "EXCEPT PROJECT Neighborhood FROM store WITH PROJECT t1.Neighborhood FROM JOIN AS t1 FROM store WITH AS t2 FROM stock ON t1.store_id = t2.store_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many authors do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Author",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Count the number of authors.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Author",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many papers do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Paper",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Count the number of papers.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Paper",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many affiliations do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Affiliation",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Affiliation "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Count the number of affiliations.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Affiliation",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Affiliation "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many papers do we have in NAACL 2000?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE venue = \"NAACL\" AND YEAR = 2000 FROM Paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Count the number of papers in NAACL 2000.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Paper WHERE venue  =  \"NAACL\" AND YEAR  =  2000",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE venue = \"NAACL\" AND YEAR = 2000 FROM Paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many papers are published in year 2009 by Columbia University?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009",
    "dsql": "PROJECT COUNT(DISTINCT T1.paper_id) FROM AGGREGATE COUNT(DISTINCT T1.paper_id) FROM SELECT WHERE T3.name LIKE \"Columbia University\" AND T1.year = 2009 FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Affiliation ON T2.affiliation_id = T3.affiliation_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Count the number of papers published by Columbia University in 2009.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\" AND T1.year  =  2009",
    "dsql": "PROJECT COUNT(DISTINCT T1.paper_id) FROM AGGREGATE COUNT(DISTINCT T1.paper_id) FROM SELECT WHERE T3.name LIKE \"Columbia University\" AND T1.year = 2009 FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Affiliation ON T2.affiliation_id = T3.affiliation_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: List names and addresses for all affiliations.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT name ,  address FROM Affiliation",
    "dsql": "PROJECT DISTINCT name, address FROM Affiliation "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the names and addresses for all affiliations?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT name ,  address FROM Affiliation",
    "dsql": "PROJECT DISTINCT name, address FROM Affiliation "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: List all venues and years for papers ordered by year.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR",
    "dsql": "ORDER BY YEAR FROM PROJECT DISTINCT venue, YEAR FROM paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the distinct venues for papers, ordered by year?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT venue ,  YEAR FROM paper ORDER BY YEAR",
    "dsql": "ORDER BY YEAR FROM PROJECT DISTINCT venue, YEAR FROM paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find the titles and paper IDs for papers written by Harvard University.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\"",
    "dsql": "PROJECT DISTINCT T1.title, T1.paper_id FROM SELECT WHERE T3.name = \"Harvard University\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Affiliation ON T2.affiliation_id = T3.affiliation_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the titles and paper ids for papers written in affiliation with Harvard University?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name  =  \"Harvard University\"",
    "dsql": "PROJECT DISTINCT T1.title, T1.paper_id FROM SELECT WHERE T3.name = \"Harvard University\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Affiliation ON T2.affiliation_id = T3.affiliation_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find all papers with titles and paper IDs written by Mckeown.\n### Response (TSQL):",
    "sql": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\"",
    "dsql": "PROJECT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"%Mckeown%\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T3.author_id = T2.author_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the titles and paper ids for papers written by Mckeown?\n### Response (TSQL):",
    "sql": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T3.name LIKE \"%Mckeown%\"",
    "dsql": "PROJECT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"%Mckeown%\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T3.author_id = T2.author_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find all papers with titles and paper IDs collaborated by Stanford University and Columbia University.\n### Response (TSQL):",
    "sql": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\"",
    "dsql": "INTERSECT PROJECT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"Stanford University\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Affiliation ON T2.affiliation_id = T3.affiliation_id ON T1.paper_id = T2.paper_id WITH PROJECT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"Columbia University\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Affiliation ON T2.affiliation_id = T3.affiliation_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the titles and paper ids for papers which were affiliated with both Stanford and Columbia University?\n### Response (TSQL):",
    "sql": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Stanford University\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T3.name LIKE \"Columbia University\"",
    "dsql": "INTERSECT PROJECT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"Stanford University\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Affiliation ON T2.affiliation_id = T3.affiliation_id ON T1.paper_id = T2.paper_id WITH PROJECT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"Columbia University\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Affiliation ON T2.affiliation_id = T3.affiliation_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find all papers with titles and paper IDs co-authored by Mckeown, Kathleen and Rambow, Owen.\n### Response (TSQL):",
    "sql": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
    "dsql": "INTERSECT PROJECT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"%Mckeown , Kathleen%\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T2.author_id = T3.author_id ON T1.paper_id = T2.paper_id WITH PROJECT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"%Rambow , Owen%\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T2.author_id = T3.author_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the titles and paper ids co-authored by Mckeown, Kathleen and Rambow, Owen?\n### Response (TSQL):",
    "sql": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown ,  Kathleen%\" INTERSECT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow ,  Owen%\"",
    "dsql": "INTERSECT PROJECT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"%Mckeown , Kathleen%\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T2.author_id = T3.author_id ON T1.paper_id = T2.paper_id WITH PROJECT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"%Rambow , Owen%\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T2.author_id = T3.author_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find the titles and paper IDs for papers which have Mckeown but not Rambow in author list.\n### Response (TSQL):",
    "sql": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\"",
    "dsql": "EXCEPT PROJECT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"%Mckeown%\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T2.author_id = T3.author_id ON T1.paper_id = T2.paper_id WITH PROJECT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"%Rambow%\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T2.author_id = T3.author_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the titles and paper ids which have Mckeown as an author, but not Rambow?\n### Response (TSQL):",
    "sql": "SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Mckeown%\" EXCEPT SELECT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE T3.name LIKE \"%Rambow%\"",
    "dsql": "EXCEPT PROJECT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"%Mckeown%\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T2.author_id = T3.author_id ON T1.paper_id = T2.paper_id WITH PROJECT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"%Rambow%\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T2.author_id = T3.author_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find the titles and paper IDs for papers which have Mckeown, Kathleen or Rambow, Owen in author list.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\"",
    "dsql": "PROJECT DISTINCT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"%Mckeown , Kathleen%\" OR T3.name LIKE \"%Rambow , Owen%\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T2.author_id = T3.author_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the titles and paper ids for papers that have Mckeown, Kathleen or Rambow, Owen in their author list?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.title ,  T1.paper_id FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id WHERE  T3.name LIKE \"%Mckeown ,  Kathleen%\" OR T3.name LIKE \"%Rambow ,  Owen%\"",
    "dsql": "PROJECT DISTINCT T1.title, T1.paper_id FROM SELECT WHERE T3.name LIKE \"%Mckeown , Kathleen%\" OR T3.name LIKE \"%Rambow , Owen%\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T2.author_id = T3.author_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: List the names of all authors and their number of papers in descending order by number of papers.\n### Response (TSQL):",
    "sql": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC",
    "dsql": "ORDER BY DESC COUNT(*) FROM PROJECT T1.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.author_id FROM JOIN AS T1 FROM Author WITH AS T2 FROM Author_list ON T1.author_id = T2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many papers did each author publish, ordered by number of papers?\n### Response (TSQL):",
    "sql": "SELECT T1.name ,  count(*) FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id ORDER BY count(*) DESC",
    "dsql": "ORDER BY DESC COUNT(*) FROM PROJECT T1.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.author_id FROM JOIN AS T1 FROM Author WITH AS T2 FROM Author_list ON T1.author_id = T2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: List all affiliations with ascending ordered number of papers.\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
    "dsql": "ORDER BY DESC COUNT(*) FROM PROJECT T1.name FROM AGGREGATE COUNT(*) GROUP BY T1.affiliation_id FROM JOIN AS T1 FROM Affiliation WITH AS T2 FROM Author_list ON T1.affiliation_id = T2.affiliation_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the names of all affiliations, ordered by number of papers?\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id ORDER BY count(*) DESC",
    "dsql": "ORDER BY DESC COUNT(*) FROM PROJECT T1.name FROM AGGREGATE COUNT(*) GROUP BY T1.affiliation_id FROM JOIN AS T1 FROM Affiliation WITH AS T2 FROM Author_list ON T1.affiliation_id = T2.affiliation_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: List names of all authors who have more than 50 papers.\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50",
    "dsql": "PROJECT T1.name FROM SELECT WHERE COUNT(*) > 50 FROM AGGREGATE COUNT(*) GROUP BY T1.author_id FROM JOIN AS T1 FROM Author WITH AS T2 FROM Author_list ON T1.author_id = T2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the names of all authors who have more than 50 papers?\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  >  50",
    "dsql": "PROJECT T1.name FROM SELECT WHERE COUNT(*) > 50 FROM AGGREGATE COUNT(*) GROUP BY T1.author_id FROM JOIN AS T1 FROM Author WITH AS T2 FROM Author_list ON T1.author_id = T2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: List names of all authors who have only 1 paper.\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
    "dsql": "PROJECT T1.name FROM SELECT WHERE COUNT(*) = 1 FROM AGGREGATE COUNT(*) GROUP BY T1.author_id FROM JOIN AS T1 FROM Author WITH AS T2 FROM Author_list ON T1.author_id = T2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the names of authors who have exactly 1 paper?\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM Author AS T1 JOIN Author_list AS T2 ON T1.author_id  =  T2.author_id GROUP BY T1.author_id HAVING count(*)  =  1",
    "dsql": "PROJECT T1.name FROM SELECT WHERE COUNT(*) = 1 FROM AGGREGATE COUNT(*) GROUP BY T1.author_id FROM JOIN AS T1 FROM Author WITH AS T2 FROM Author_list ON T1.author_id = T2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What is the venue and year with the most number of publications?\n### Response (TSQL):",
    "sql": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT venue, YEAR FROM AGGREGATE COUNT(*) GROUP BY venue, YEAR FROM paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What was the venue and year with the most publications?\n### Response (TSQL):",
    "sql": "SELECT venue ,  YEAR FROM paper GROUP BY venue ,  YEAR ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT venue, YEAR FROM AGGREGATE COUNT(*) GROUP BY venue, YEAR FROM paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What is the venue with the least number of publications?\n### Response (TSQL):",
    "sql": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT venue FROM AGGREGATE COUNT(*) GROUP BY venue FROM paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Which venue has the fewest publications?\n### Response (TSQL):",
    "sql": "SELECT venue FROM paper GROUP BY venue ORDER BY count(*) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT venue FROM AGGREGATE COUNT(*) GROUP BY venue FROM paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many papers cite paper with id A00-1002?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE cited_paper_id = \"A00-1002\" FROM Citation "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Count the number of papers which cited a paper with id A00-1002.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Citation WHERE cited_paper_id  =  \"A00-1002\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE cited_paper_id = \"A00-1002\" FROM Citation "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many reference papers does paper with id D12-1027 have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE paper_id = \"D12-1027\" FROM Citation "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Count the number of references the paper with id D12-1027 has.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Citation WHERE paper_id  =  \"D12-1027\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE paper_id = \"D12-1027\" FROM Citation "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What is the id and the number of citations of the most cited paper?\n### Response (TSQL):",
    "sql": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT paper_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY cited_paper_id FROM Citation "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Give the id and the number of citations of the most cited paper.\n### Response (TSQL):",
    "sql": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT paper_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY cited_paper_id FROM Citation "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Give the title of the paper which cites most number of papers?\n### Response (TSQL):",
    "sql": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.title FROM AGGREGATE COUNT(*) GROUP BY T1.paper_id FROM JOIN AS T2 FROM Paper WITH AS T1 FROM Citation ON T2.paper_id = T1.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What is the title of the paper which cites the most other papers?\n### Response (TSQL):",
    "sql": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T2.paper_id  =  T1.paper_id GROUP BY T1.paper_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.title FROM AGGREGATE COUNT(*) GROUP BY T1.paper_id FROM JOIN AS T2 FROM Paper WITH AS T1 FROM Citation ON T2.paper_id = T1.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: List top 10 most cited papers and their numbers of citations.\n### Response (TSQL):",
    "sql": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10",
    "dsql": "LIMIT 10 FROM ORDER BY DESC COUNT(*) FROM PROJECT paper_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY cited_paper_id FROM Citation "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the 10 most cited papers, and how many citations did each have?\n### Response (TSQL):",
    "sql": "SELECT paper_id ,  count(*) FROM Citation GROUP BY cited_paper_id ORDER BY count(*) DESC LIMIT 10",
    "dsql": "LIMIT 10 FROM ORDER BY DESC COUNT(*) FROM PROJECT paper_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY cited_paper_id FROM Citation "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many citations does Mckeown , Kathleen have ?\n### Response (TSQL):",
    "sql": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE t3.name = \"mckeown , kathleen\" FROM JOIN AS t1 FROM citation WITH JOIN AS t2 FROM author_list WITH AS t3 FROM author ON t2.author_id = t3.author_id ON t1.cited_paper_id = t2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Count the number of citations Mckeown , Kathleen has .\n### Response (TSQL):",
    "sql": "select count(*) from citation as t1 join author_list as t2 on t1.cited_paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE t3.name = \"mckeown , kathleen\" FROM JOIN AS t1 FROM citation WITH JOIN AS t2 FROM author_list WITH AS t3 FROM author ON t2.author_id = t3.author_id ON t1.cited_paper_id = t2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many papers does Mckeown , Kathleen cite ?\n### Response (TSQL):",
    "sql": "select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE t3.name = \"mckeown , kathleen\" FROM JOIN AS t1 FROM citation WITH JOIN AS t2 FROM author_list WITH AS t3 FROM author ON t2.author_id = t3.author_id ON t1.paper_id = t2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Count the number of papers Mckeown , Kathleen has cited .\n### Response (TSQL):",
    "sql": "select count(*) from citation as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE t3.name = \"mckeown , kathleen\" FROM JOIN AS t1 FROM citation WITH JOIN AS t2 FROM author_list WITH AS t3 FROM author ON t2.author_id = t3.author_id ON t1.paper_id = t2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find the name and number of citations of the author who has most citations among all authors?\n### Response (TSQL):",
    "sql": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T3.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.author_id FROM JOIN AS T1 FROM Citation WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T2.author_id = T3.author_id ON T1.cited_paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What is the name and number of citations of the author with the greatest number of citations among authors?\n### Response (TSQL):",
    "sql": "SELECT T3.name ,  count(*) FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id JOIN Author AS T3 ON T2.author_id  =  T3.author_id GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T3.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.author_id FROM JOIN AS T1 FROM Citation WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T2.author_id = T3.author_id ON T1.cited_paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the venues and years where Mckeown , Kathleen had papers ?\n### Response (TSQL):",
    "sql": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "dsql": "PROJECT DISTINCT t1.venue, t1.year FROM SELECT WHERE t3.name = \"mckeown , kathleen\" FROM JOIN AS t1 FROM paper WITH JOIN AS t2 FROM author_list WITH AS t3 FROM author ON t2.author_id = t3.author_id ON t1.paper_id = t2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Which venues and years did Mckeown , Kathleen have papers ?\n### Response (TSQL):",
    "sql": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join author as t3 on t2.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "dsql": "PROJECT DISTINCT t1.venue, t1.year FROM SELECT WHERE t3.name = \"mckeown , kathleen\" FROM JOIN AS t1 FROM paper WITH JOIN AS t2 FROM author_list WITH AS t3 FROM author ON t2.author_id = t3.author_id ON t1.paper_id = t2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the venues and years where Columbia University had papers ?\n### Response (TSQL):",
    "sql": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\"",
    "dsql": "PROJECT DISTINCT t1.venue, t1.year FROM SELECT WHERE t3.name = \"columbia university\" FROM JOIN AS t1 FROM paper WITH JOIN AS t2 FROM author_list WITH AS t3 FROM affiliation ON t2.affiliation_id = t3.affiliation_id ON t1.paper_id = t2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Which venues and years did Columbia University have papers ?\n### Response (TSQL):",
    "sql": "select distinct t1.venue ,  t1.year from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t3.name = \"columbia university\"",
    "dsql": "PROJECT DISTINCT t1.venue, t1.year FROM SELECT WHERE t3.name = \"columbia university\" FROM JOIN AS t1 FROM paper WITH JOIN AS t2 FROM author_list WITH AS t3 FROM affiliation ON t2.affiliation_id = t3.affiliation_id ON t1.paper_id = t2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Which author had the most papers in the year 2009?\n### Response (TSQL):",
    "sql": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T3.name FROM AGGREGATE COUNT(*) GROUP BY T2.author_id FROM SELECT WHERE T1.year = 2009 FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T3.author_id = T2.author_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What is the name of the author with the most papers in 2009?\n### Response (TSQL):",
    "sql": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Author AS T3 ON T3.author_id  =  T2.author_id WHERE T1.year  =  2009 GROUP BY T2.author_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T3.name FROM AGGREGATE COUNT(*) GROUP BY T2.author_id FROM SELECT WHERE T1.year = 2009 FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Author ON T3.author_id = T2.author_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the names of the top 3 affiliations that have the most papers in year 2009?\n### Response (TSQL):",
    "sql": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC COUNT(*) FROM PROJECT T3.name FROM AGGREGATE COUNT(*) GROUP BY T2.affiliation_id FROM SELECT WHERE T1.year = 2009 FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Affiliation ON T2.affiliation_id = T3.affiliation_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Which 3 affiliations had the most papers in 2009?\n### Response (TSQL):",
    "sql": "SELECT T3.name FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  =  2009 GROUP BY T2.affiliation_id ORDER BY count(*) DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC COUNT(*) FROM PROJECT T3.name FROM AGGREGATE COUNT(*) GROUP BY T2.affiliation_id FROM SELECT WHERE T1.year = 2009 FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Affiliation ON T2.affiliation_id = T3.affiliation_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many papers does Columbia University have in or before 2009 ?\n### Response (TSQL):",
    "sql": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
    "dsql": "PROJECT COUNT(DISTINCT t1.paper_id) FROM AGGREGATE COUNT(DISTINCT t1.paper_id) FROM SELECT WHERE t1.year <= 2009 AND t3.name = \"columbia university\" FROM JOIN AS t1 FROM paper WITH JOIN AS t2 FROM author_list WITH AS t3 FROM affiliation ON t2.affiliation_id = t3.affiliation_id ON t1.paper_id = t2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Count the number of papers Columbia University had during or prior to 2009 .\n### Response (TSQL):",
    "sql": "select count(distinct t1.paper_id) from paper as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id join affiliation as t3 on t2.affiliation_id  =  t3.affiliation_id where t1.year  <=  2009 and t3.name = \"columbia university\"",
    "dsql": "PROJECT COUNT(DISTINCT t1.paper_id) FROM AGGREGATE COUNT(DISTINCT t1.paper_id) FROM SELECT WHERE t1.year <= 2009 AND t3.name = \"columbia university\" FROM JOIN AS t1 FROM paper WITH JOIN AS t2 FROM author_list WITH AS t3 FROM affiliation ON t2.affiliation_id = t3.affiliation_id ON t1.paper_id = t2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many papers does Stanford University have between 2000 and 2009?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\"",
    "dsql": "PROJECT COUNT(DISTINCT T1.paper_id) FROM AGGREGATE COUNT(DISTINCT T1.paper_id) FROM SELECT WHERE T1.year >= 2000 AND T1.year <= 2009 AND T3.name LIKE \"Stanford University\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Affiliation ON T2.affiliation_id = T3.affiliation_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Count the number of papers Stanford University had between 2000 and 2009.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T1.paper_id) FROM Paper AS T1 JOIN Author_list AS T2 ON T1.paper_id  =  T2.paper_id JOIN Affiliation AS T3 ON T2.affiliation_id  =  T3.affiliation_id WHERE T1.year  >=  2000 AND T1.year  <=  2009 AND T3.name LIKE \"Stanford University\"",
    "dsql": "PROJECT COUNT(DISTINCT T1.paper_id) FROM AGGREGATE COUNT(DISTINCT T1.paper_id) FROM SELECT WHERE T1.year >= 2000 AND T1.year <= 2009 AND T3.name LIKE \"Stanford University\" FROM JOIN AS T1 FROM Paper WITH JOIN AS T2 FROM Author_list WITH AS T3 FROM Affiliation ON T2.affiliation_id = T3.affiliation_id ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What is the title of the paper that has most number of authors?\n### Response (TSQL):",
    "sql": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.title FROM AGGREGATE COUNT(*) GROUP BY T2.paper_id FROM JOIN AS T1 FROM Author_list WITH AS T2 FROM Paper ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Give the title of the paper with the most authors.\n### Response (TSQL):",
    "sql": "SELECT T2.title FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id GROUP BY T2.paper_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.title FROM AGGREGATE COUNT(*) GROUP BY T2.paper_id FROM JOIN AS T1 FROM Author_list WITH AS T2 FROM Paper ON T1.paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many collaborators has Mckeown , Kathleen had ?\n### Response (TSQL):",
    "sql": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "dsql": "PROJECT COUNT(DISTINCT t2.author_id) FROM AGGREGATE COUNT(DISTINCT t2.author_id) FROM SELECT WHERE t3.name = \"mckeown , kathleen\" FROM JOIN AS t1 FROM author_list WITH AS t2 FROM author_list ON t1.paper_id = t2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Count the number of collaborators that Mckeown , Kathleen has had .\n### Response (TSQL):",
    "sql": "select count (distinct t2.author_id) from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id where t3.name = \"mckeown ,  kathleen\"",
    "dsql": "PROJECT COUNT(DISTINCT t2.author_id) FROM AGGREGATE COUNT(DISTINCT t2.author_id) FROM SELECT WHERE t3.name = \"mckeown , kathleen\" FROM JOIN AS t1 FROM author_list WITH AS t2 FROM author_list ON t1.paper_id = t2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Who has the most papers co-authored with Mckeown , Kathleen ?\n### Response (TSQL):",
    "sql": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t4.name FROM AGGREGATE COUNT(*) GROUP BY t2.author_id FROM SELECT WHERE t3.name = \"mckeown , kathleen\" FROM JOIN AS t1 FROM author_list WITH AS t2 FROM author_list ON t1.paper_id = t2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What is the name of the author who has co-authored the most papers with Mckeown , Kathleen ?\n### Response (TSQL):",
    "sql": "select t4.name from author_list as t1 join author_list as t2 on t1.paper_id  =  t2.paper_id and t1.author_id != t2.author_id join author as t3 on t1.author_id  =  t3.author_id join author as t4 on t2.author_id  =  t4.author_id where t3.name = \"mckeown ,  kathleen\" group by t2.author_id order by count(*) desc limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t4.name FROM AGGREGATE COUNT(*) GROUP BY t2.author_id FROM SELECT WHERE t3.name = \"mckeown , kathleen\" FROM JOIN AS t1 FROM author_list WITH AS t2 FROM author_list ON t1.paper_id = t2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find the id of the papers whose title has the key word 'translation'.\n### Response (TSQL):",
    "sql": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
    "dsql": "PROJECT paper_id FROM SELECT WHERE title LIKE \"%translation%\" FROM Paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the ids for papers with titles containing 'translation'?\n### Response (TSQL):",
    "sql": "SELECT paper_id FROM Paper WHERE title LIKE \"%translation%\"",
    "dsql": "PROJECT paper_id FROM SELECT WHERE title LIKE \"%translation%\" FROM Paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find the id and title of the papers that are never cited by others.\n### Response (TSQL):",
    "sql": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
    "dsql": "PROJECT paper_id, title FROM SELECT WHERE paper_id NOT IN PROJECT cited_paper_id FROM Citation FROM Paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the ids and titles for papers that have never been cited?\n### Response (TSQL):",
    "sql": "SELECT paper_id ,  title FROM Paper WHERE paper_id NOT IN (SELECT cited_paper_id FROM Citation)",
    "dsql": "PROJECT paper_id, title FROM SELECT WHERE paper_id NOT IN PROJECT cited_paper_id FROM Citation FROM Paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find the name of the affiliation whose address contains 'China' and publishes the greatest number of papers.\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.name FROM AGGREGATE COUNT(*) GROUP BY T1.affiliation_id FROM SELECT WHERE T1.address LIKE \"%China%\" FROM JOIN AS T1 FROM Affiliation WITH AS T2 FROM Author_list ON T1.affiliation_id = T2.affiliation_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What is the name of the affiliation which publishes the greatest number of papers among those whose address contains 'China'.\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id WHERE T1.address LIKE \"%China%\" GROUP BY T1.affiliation_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.name FROM AGGREGATE COUNT(*) GROUP BY T1.affiliation_id FROM SELECT WHERE T1.address LIKE \"%China%\" FROM JOIN AS T1 FROM Affiliation WITH AS T2 FROM Author_list ON T1.affiliation_id = T2.affiliation_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find the number of papers published in different conferences each year.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR",
    "dsql": "PROJECT COUNT(*), venue, YEAR FROM AGGREGATE COUNT(*) GROUP BY venue, YEAR FROM Paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many papers are published in each venue in each year?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  venue ,  YEAR FROM Paper GROUP BY venue ,  YEAR",
    "dsql": "PROJECT COUNT(*), venue, YEAR FROM AGGREGATE COUNT(*) GROUP BY venue, YEAR FROM Paper "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find the total number of papers for each affiliation.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id",
    "dsql": "PROJECT COUNT(DISTINCT T2.paper_id), T1.name FROM AGGREGATE COUNT(DISTINCT T2.paper_id), COUNT(*) GROUP BY T1.affiliation_id FROM JOIN AS T1 FROM Affiliation WITH AS T2 FROM Author_list ON T1.affiliation_id = T2.affiliation_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many papers has each affiliation published?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T2.paper_id) ,  T1.name FROM Affiliation AS T1 JOIN Author_list AS T2 ON T1.affiliation_id  =  T2.affiliation_id GROUP BY T1.affiliation_id",
    "dsql": "PROJECT COUNT(DISTINCT T2.paper_id), T1.name FROM AGGREGATE COUNT(DISTINCT T2.paper_id), COUNT(*) GROUP BY T1.affiliation_id FROM JOIN AS T1 FROM Affiliation WITH AS T2 FROM Author_list ON T1.affiliation_id = T2.affiliation_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find the titles of papers that have more than 50 citations.\n### Response (TSQL):",
    "sql": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50",
    "dsql": "PROJECT T2.title FROM SELECT WHERE COUNT(*) > 50 FROM AGGREGATE COUNT(*) GROUP BY T1.cited_paper_id FROM JOIN AS T1 FROM Citation WITH AS T2 FROM Paper ON T1.cited_paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the titles for papers with more than 50 citations?\n### Response (TSQL):",
    "sql": "SELECT T2.title FROM Citation AS T1 JOIN Paper AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(*)  >  50",
    "dsql": "PROJECT T2.title FROM SELECT WHERE COUNT(*) > 50 FROM AGGREGATE COUNT(*) GROUP BY T1.cited_paper_id FROM JOIN AS T1 FROM Citation WITH AS T2 FROM Paper ON T1.cited_paper_id = T2.paper_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find the number of authors who did not publish any paper that is cited more than 50 times.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Author_id NOT IN PROJECT T2.author_id FROM SELECT WHERE COUNT(DISTINCT T1.paper_id) > 50 FROM AGGREGATE COUNT(DISTINCT T1.paper_id), COUNT(*) GROUP BY T1.cited_paper_id FROM JOIN AS T1 FROM Citation WITH AS T2 FROM Author_list ON T1.cited_paper_id = T2.paper_id FROM Author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: How many authors have not published a paper with more than 50 citations?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Author WHERE Author_id NOT IN ( SELECT T2.author_id FROM Citation AS T1 JOIN Author_list AS T2 ON T1.cited_paper_id  =  T2.paper_id GROUP BY T1.cited_paper_id HAVING count(DISTINCT T1.paper_id)  >  50)",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Author_id NOT IN PROJECT T2.author_id FROM SELECT WHERE COUNT(DISTINCT T1.paper_id) > 50 FROM AGGREGATE COUNT(DISTINCT T1.paper_id), COUNT(*) GROUP BY T1.cited_paper_id FROM JOIN AS T1 FROM Citation WITH AS T2 FROM Author_list ON T1.cited_paper_id = T2.paper_id FROM Author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find the names of authors who published some paper on NAACL and ACL in the year 2009.\n### Response (TSQL):",
    "sql": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)",
    "dsql": "PROJECT name FROM SELECT WHERE author_id IN INTERSECT PROJECT T1.author_id FROM SELECT WHERE T2.venue = \"ACL\" AND T2.year = 2009 FROM JOIN AS T1 FROM Author_list WITH AS T2 FROM Paper ON T1.paper_id = T2.paper_id WITH PROJECT T1.author_id FROM SELECT WHERE T2.venue = \"NAACL\" AND T2.year = 2009 FROM JOIN AS T1 FROM Author_list WITH AS T2 FROM Paper ON T1.paper_id = T2.paper_id FROM Author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the names of authors who published in both NAACL and ACL in 2009?\n### Response (TSQL):",
    "sql": "SELECT name FROM Author WHERE author_id IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\" AND T2.year  =  2009 INTERSECT SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"NAACL\" AND T2.year  =  2009)",
    "dsql": "PROJECT name FROM SELECT WHERE author_id IN INTERSECT PROJECT T1.author_id FROM SELECT WHERE T2.venue = \"ACL\" AND T2.year = 2009 FROM JOIN AS T1 FROM Author_list WITH AS T2 FROM Paper ON T1.paper_id = T2.paper_id WITH PROJECT T1.author_id FROM SELECT WHERE T2.venue = \"NAACL\" AND T2.year = 2009 FROM JOIN AS T1 FROM Author_list WITH AS T2 FROM Paper ON T1.paper_id = T2.paper_id FROM Author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: Find the name of authors who have never published a paper in ACL.\n### Response (TSQL):",
    "sql": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")",
    "dsql": "PROJECT name FROM SELECT WHERE author_id NOT IN PROJECT T1.author_id FROM SELECT WHERE T2.venue = \"ACL\" FROM JOIN AS T1 FROM Author_list WITH AS T2 FROM Paper ON T1.paper_id = T2.paper_id FROM Author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Affiliation ( affiliation_id number, name text, address text, PRIMARY KEY(affiliation_id)); CREATE TABLE Author ( author_id number, name text, email text, PRIMARY KEY(author_id)); CREATE TABLE Author_list ( paper_id text, author_id number, affiliation_id number, PRIMARY KEY(paper_id), FOREIGN KEY(affiliation_id) REFERENCES Affiliation (affiliation_id), FOREIGN KEY(author_id) REFERENCES Author (author_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Citation ( paper_id text, cited_paper_id text, PRIMARY KEY(paper_id), FOREIGN KEY(cited_paper_id) REFERENCES Paper (paper_id), FOREIGN KEY(paper_id) REFERENCES Paper (paper_id)); CREATE TABLE Paper ( paper_id text, title text, venue text, year number, PRIMARY KEY(paper_id)); \n### Question: What are the names of authors who have not published a paper in ACL?\n### Response (TSQL):",
    "sql": "SELECT name FROM Author WHERE author_id NOT IN (SELECT T1.author_id FROM Author_list AS T1 JOIN Paper AS T2 ON T1.paper_id  =  T2.paper_id WHERE T2.venue  =  \"ACL\")",
    "dsql": "PROJECT name FROM SELECT WHERE author_id NOT IN PROJECT T1.author_id FROM SELECT WHERE T2.venue = \"ACL\" FROM JOIN AS T1 FROM Author_list WITH AS T2 FROM Paper ON T1.paper_id = T2.paper_id FROM Author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: How many conferences are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM conference",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM conference "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What is the total number of conferences?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM conference",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM conference "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: List all distinct conference names.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT conference_name FROM conference",
    "dsql": "PROJECT DISTINCT conference_name FROM conference "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What are the different conference names?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT conference_name FROM conference",
    "dsql": "PROJECT DISTINCT conference_name FROM conference "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: List all conference name, year, and location.\n### Response (TSQL):",
    "sql": "SELECT conference_name ,  YEAR ,  LOCATION FROM conference",
    "dsql": "PROJECT conference_name, YEAR, LOCATION FROM conference "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What are the names, years, and locations of all conferences?\n### Response (TSQL):",
    "sql": "SELECT conference_name ,  YEAR ,  LOCATION FROM conference",
    "dsql": "PROJECT conference_name, YEAR, LOCATION FROM conference "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Show all conference names and the number of times each conference has.\n### Response (TSQL):",
    "sql": "SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name",
    "dsql": "PROJECT conference_name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY conference_name FROM conference "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: For each conference name, how many times has it occurred?\n### Response (TSQL):",
    "sql": "SELECT conference_name ,  count(*) FROM conference GROUP BY conference_name",
    "dsql": "PROJECT conference_name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY conference_name FROM conference "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: show all years and the number of conferences in each year.\n### Response (TSQL):",
    "sql": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
    "dsql": "PROJECT YEAR, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY YEAR FROM conference "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: How many conferences occur every year?\n### Response (TSQL):",
    "sql": "SELECT YEAR ,  count(*) FROM conference GROUP BY YEAR",
    "dsql": "PROJECT YEAR, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY YEAR FROM conference "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: which year has least number of conferences?\n### Response (TSQL):",
    "sql": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT YEAR FROM AGGREGATE COUNT(*) GROUP BY YEAR FROM conference "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What year had the fewest conferences?\n### Response (TSQL):",
    "sql": "SELECT YEAR FROM conference GROUP BY YEAR ORDER BY count(*) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT YEAR FROM AGGREGATE COUNT(*) GROUP BY YEAR FROM conference "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Show all locations where at least two conferences are located.\n### Response (TSQL):",
    "sql": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2",
    "dsql": "PROJECT LOCATION FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY LOCATION FROM conference "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What are all locations that have hosted at least two conferences?\n### Response (TSQL):",
    "sql": "SELECT LOCATION FROM conference GROUP BY LOCATION HAVING count(*)  >=  2",
    "dsql": "PROJECT LOCATION FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY LOCATION FROM conference "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Show the institution name, location and founded year of all institutions.\n### Response (TSQL):",
    "sql": "SELECT institution_name ,  LOCATION ,  founded FROM institution",
    "dsql": "PROJECT institution_name, LOCATION, founded FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What are the names, locations, and founding years for all institutions?\n### Response (TSQL):",
    "sql": "SELECT institution_name ,  LOCATION ,  founded FROM institution",
    "dsql": "PROJECT institution_name, LOCATION, founded FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: How many institution are founded between 1850 and 1900?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE founded BETWEEN 1850 AND 1900 FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: How many institutions were founded between 1850 and 1900?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM institution WHERE founded BETWEEN 1850 AND 1900",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE founded BETWEEN 1850 AND 1900 FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Show the institution name and location of institution that is most recently founded.\n### Response (TSQL):",
    "sql": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC founded FROM PROJECT institution_name, LOCATION FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What are the names and locations of the most recently-founded institution?\n### Response (TSQL):",
    "sql": "SELECT institution_name ,  LOCATION FROM institution ORDER BY founded DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC founded FROM PROJECT institution_name, LOCATION FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Show the institution name and the number of staff for each institution founded after 1800.\n### Response (TSQL):",
    "sql": "SELECT T1.institution_name ,  count(*) FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1800 GROUP BY T2.institution_id",
    "dsql": "PROJECT T1.institution_name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.institution_id FROM SELECT WHERE T1.founded > 1800 FROM JOIN AS T1 FROM institution WITH AS T2 FROM staff ON T1.institution_id = T2.institution_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: For each institution id , how many staff members does each institution have that was founded after 1800 ? return their names .\n### Response (TSQL):",
    "sql": "select t1.institution_name ,  count(*) from institution as t1 join staff as t2 on t1.institution_id  =  t2.institution_id where t1.founded  >  1800 group by t2.institution_id",
    "dsql": "PROJECT t1.institution_name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY t2.institution_id FROM SELECT WHERE t1.founded > 1800 FROM JOIN AS t1 FROM institution WITH AS t2 FROM staff ON t1.institution_id = t2.institution_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Show institution name which there is no staff in our record.\n### Response (TSQL):",
    "sql": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)",
    "dsql": "PROJECT institution_name FROM SELECT WHERE institution_id NOT IN PROJECT institution_id FROM staff FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What is the name of the institution with no staff in the records?\n### Response (TSQL):",
    "sql": "SELECT institution_name FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM staff)",
    "dsql": "PROJECT institution_name FROM SELECT WHERE institution_id NOT IN PROJECT institution_id FROM staff FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Show all staff name who are above the average age.\n### Response (TSQL):",
    "sql": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
    "dsql": "PROJECT name FROM SELECT WHERE age > PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM staff FROM staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What are the names of all staff members who are older than average?\n### Response (TSQL):",
    "sql": "SELECT name FROM staff WHERE age  >  (SELECT avg(age) FROM staff)",
    "dsql": "PROJECT name FROM SELECT WHERE age > PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM staff FROM staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What is the maximum and minimum age of all staff from the United States?\n### Response (TSQL):",
    "sql": "SELECT max(age) ,  min(age) FROM staff",
    "dsql": "PROJECT MAX(age), MIN(age) FROM AGGREGATE MAX(age), MIN(age) FROM staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What are the maximum and minimum ages for all staff?\n### Response (TSQL):",
    "sql": "SELECT max(age) ,  min(age) FROM staff",
    "dsql": "PROJECT MAX(age), MIN(age) FROM AGGREGATE MAX(age), MIN(age) FROM staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Show all conference names which the staff from Canada attends.\n### Response (TSQL):",
    "sql": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\"",
    "dsql": "PROJECT T1.conference_name FROM SELECT WHERE T3.nationality = \"Canada\" FROM JOIN AS T1 FROM conference WITH JOIN AS T2 FROM conference_participation WITH AS T3 FROM staff ON T2.staff_id = T3.staff_id ON T1.conference_id = T2.conference_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What are the names of all the conferences that has staff from Canada attending?\n### Response (TSQL):",
    "sql": "SELECT T1.conference_name FROM conference AS T1 JOIN conference_participation AS T2 ON T1.conference_id = T2.conference_id JOIN staff AS T3 ON T2.staff_id  =  T3.staff_id WHERE T3.nationality  =  \"Canada\"",
    "dsql": "PROJECT T1.conference_name FROM SELECT WHERE T3.nationality = \"Canada\" FROM JOIN AS T1 FROM conference WITH JOIN AS T2 FROM conference_participation WITH AS T3 FROM staff ON T2.staff_id = T3.staff_id ON T1.conference_id = T2.conference_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Show all staff names who have been both speaker and sponsor in some conference.\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
    "dsql": "INTERSECT PROJECT T1.name FROM SELECT WHERE T2.role = 'Speaker' FROM JOIN AS T1 FROM staff WITH AS T2 FROM conference_participation ON T1.staff_id = T2.staff_id WITH PROJECT T1.name FROM SELECT WHERE T2.role = 'Sponsor' FROM JOIN AS T1 FROM staff WITH AS T2 FROM conference_participation ON T1.staff_id = T2.staff_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What are the names of the staff members who have been both a speaker and a sponsor at some conference?\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Speaker' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.role  =  'Sponsor'",
    "dsql": "INTERSECT PROJECT T1.name FROM SELECT WHERE T2.role = 'Speaker' FROM JOIN AS T1 FROM staff WITH AS T2 FROM conference_participation ON T1.staff_id = T2.staff_id WITH PROJECT T1.name FROM SELECT WHERE T2.role = 'Sponsor' FROM JOIN AS T1 FROM staff WITH AS T2 FROM conference_participation ON T1.staff_id = T2.staff_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Show all names who have been in both ACL and Naccl.\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'",
    "dsql": "INTERSECT PROJECT T1.name FROM SELECT WHERE T3.Conference_name = 'ACL' FROM JOIN AS T1 FROM staff WITH JOIN AS T2 FROM conference_participation WITH AS T3 FROM Conference ON T2.conference_id = T3.conference_id ON T1.staff_id = T2.staff_id WITH PROJECT T1.name FROM SELECT WHERE T3.Conference_name = 'Naccl' FROM JOIN AS T1 FROM staff WITH JOIN AS T2 FROM conference_participation WITH AS T3 FROM conference ON T2.conference_id = T3.conference_id ON T1.staff_id = T2.staff_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What are the names of everbody who has participated in both the ACL and NACCL conferences?\n### Response (TSQL):",
    "sql": "SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'ACL' INTERSECT SELECT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.Conference_name  =  'Naccl'",
    "dsql": "INTERSECT PROJECT T1.name FROM SELECT WHERE T3.Conference_name = 'ACL' FROM JOIN AS T1 FROM staff WITH JOIN AS T2 FROM conference_participation WITH AS T3 FROM Conference ON T2.conference_id = T3.conference_id ON T1.staff_id = T2.staff_id WITH PROJECT T1.name FROM SELECT WHERE T3.Conference_name = 'Naccl' FROM JOIN AS T1 FROM staff WITH JOIN AS T2 FROM conference_participation WITH AS T3 FROM conference ON T2.conference_id = T3.conference_id ON T1.staff_id = T2.staff_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Show all staff names who attend a conference in 2003 or 2004.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004",
    "dsql": "PROJECT DISTINCT T1.name FROM SELECT WHERE T3.year = 2003 OR T3.year = 2004 FROM JOIN AS T1 FROM staff WITH JOIN AS T2 FROM conference_participation WITH AS T3 FROM Conference ON T2.conference_id = T3.conference_id ON T1.staff_id = T2.staff_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What are the staff names who participated in conferences between 2003 or 2004?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.name FROM staff AS T1 JOIN conference_participation AS T2 JOIN Conference AS T3 ON T1.staff_id  =  T2.staff_id AND T2.conference_id  =  T3.conference_id WHERE T3.year  =  2003 OR T3.year  =  2004",
    "dsql": "PROJECT DISTINCT T1.name FROM SELECT WHERE T3.year = 2003 OR T3.year = 2004 FROM JOIN AS T1 FROM staff WITH JOIN AS T2 FROM conference_participation WITH AS T3 FROM Conference ON T2.conference_id = T3.conference_id ON T1.staff_id = T2.staff_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Show the conference name and year and the number of participants for each conference.\n### Response (TSQL):",
    "sql": "SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id",
    "dsql": "PROJECT T1.conference_name, T1.year, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.conference_id FROM JOIN AS T1 FROM Conference WITH AS T2 FROM Conference_participation ON T1.conference_id = T2.conference_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: For each conference id, what are their names, year, and number of participants?\n### Response (TSQL):",
    "sql": "SELECT T1.conference_name ,  T1.year ,  count(*) FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id",
    "dsql": "PROJECT T1.conference_name, T1.year, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.conference_id FROM JOIN AS T1 FROM Conference WITH AS T2 FROM Conference_participation ON T1.conference_id = T2.conference_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Find the name of the conferences that have the top 2 most number of attendants.\n### Response (TSQL):",
    "sql": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2",
    "dsql": "LIMIT 2 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.conference_name FROM AGGREGATE COUNT(*) GROUP BY T2.conference_id FROM JOIN AS T1 FROM Conference WITH AS T2 FROM Conference_participation ON T1.conference_id = T2.conference_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What are the names of the conferences that have the top 2 most people attending?\n### Response (TSQL):",
    "sql": "SELECT T1.conference_name FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id GROUP BY T2.conference_id ORDER BY count(*) DESC LIMIT 2",
    "dsql": "LIMIT 2 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.conference_name FROM AGGREGATE COUNT(*) GROUP BY T2.conference_id FROM JOIN AS T1 FROM Conference WITH AS T2 FROM Conference_participation ON T1.conference_id = T2.conference_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Find the name and nationality of the people who did not participate in any ACL conference.\n### Response (TSQL):",
    "sql": "SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  \"ACL\")",
    "dsql": "PROJECT name, nationality FROM SELECT WHERE staff_id NOT IN PROJECT T2.staff_id FROM SELECT WHERE T1.Conference_Name = \"ACL\" FROM JOIN AS T1 FROM Conference WITH AS T2 FROM Conference_participation ON T1.conference_id = T2.conference_id FROM staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What are the names and nationalities of the people who did not participate in any ACL conferences?\n### Response (TSQL):",
    "sql": "SELECT name ,  nationality FROM staff WHERE staff_id NOT IN (SELECT T2.staff_id FROM Conference AS T1 JOIN Conference_participation AS T2 ON T1.conference_id  =  T2.conference_id WHERE T1.Conference_Name  =  \"ACL\")",
    "dsql": "PROJECT name, nationality FROM SELECT WHERE staff_id NOT IN PROJECT T2.staff_id FROM SELECT WHERE T1.Conference_Name = \"ACL\" FROM JOIN AS T1 FROM Conference WITH AS T2 FROM Conference_participation ON T1.conference_id = T2.conference_id FROM staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: Find the name and location of the universities that did not have any staff participated in any conference in 2004.\n### Response (TSQL):",
    "sql": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)",
    "dsql": "PROJECT T1.Institution_Name, T1.location FROM SELECT WHERE T2.staff_id NOT IN PROJECT T4.staff_id FROM SELECT WHERE T3.year = 2004 FROM JOIN AS T3 FROM Conference WITH AS T4 FROM Conference_participation ON T3.conference_id = T4.conference_id FROM JOIN AS T1 FROM institution WITH AS T2 FROM staff ON T1.institution_id = T2.institution_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE conference ( Conference_ID number, Conference_Name text, Year number, Location text, PRIMARY KEY(Conference_ID)); CREATE TABLE institution ( Institution_ID number, Institution_Name text, Location text, Founded number, PRIMARY KEY(Institution_ID)); CREATE TABLE staff ( staff_ID number, name text, Age number, Nationality text, Institution_ID number, PRIMARY KEY(staff_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); CREATE TABLE conference_participation ( Conference_ID number, staff_ID number, role text, PRIMARY KEY(staff_ID), FOREIGN KEY(Conference_ID) REFERENCES conference (Conference_ID), FOREIGN KEY(staff_ID) REFERENCES staff (staff_ID)); \n### Question: What are the names and locations of the universities that did not have any staff participating in any conferences in 2004?\n### Response (TSQL):",
    "sql": "SELECT T1.Institution_Name ,  T1.location FROM institution AS T1 JOIN staff AS T2 ON T1.institution_id  =  T2.institution_id WHERE T2.staff_id NOT IN (SELECT T4.staff_id FROM Conference AS T3 JOIN Conference_participation AS T4 ON T3.conference_id  =  T4.conference_id WHERE T3.year  =  2004)",
    "dsql": "PROJECT T1.Institution_Name, T1.location FROM SELECT WHERE T2.staff_id NOT IN PROJECT T4.staff_id FROM SELECT WHERE T3.year = 2004 FROM JOIN AS T3 FROM Conference WITH AS T4 FROM Conference_participation ON T3.conference_id = T4.conference_id FROM JOIN AS T1 FROM institution WITH AS T2 FROM staff ON T1.institution_id = T2.institution_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What is the name of the oldest pilot?\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC age FROM PROJECT pilot_name FROM PilotSkills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Return the name of the oldest pilot.\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM PilotSkills ORDER BY age DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC age FROM PROJECT pilot_name FROM PilotSkills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the names of pilots whose age is below the average age, ordered by age?\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
    "dsql": "ORDER BY age FROM PROJECT pilot_name FROM SELECT WHERE age < PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM PilotSkills FROM PilotSkills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Return the names of pilots who are younger than average, ordered by age ascending.\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM PilotSkills WHERE age  <  (SELECT avg(age) FROM PilotSkills) ORDER BY age",
    "dsql": "ORDER BY age FROM PROJECT pilot_name FROM SELECT WHERE age < PROJECT AVG(age) FROM AGGREGATE AVG(age) FROM PilotSkills FROM PilotSkills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find all information of on pilots whose age is less than 30.\n### Response (TSQL):",
    "sql": "SELECT * FROM PilotSkills WHERE age  <  30",
    "dsql": "PROJECT * FROM SELECT WHERE age < 30 FROM PilotSkills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What is all the information about pilots who are younger than 30 ?\n### Response (TSQL):",
    "sql": "select * from pilotskills where age  <  30",
    "dsql": "PROJECT * FROM SELECT WHERE age < 30 FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find the names of all pilots who have a plane named Piper Cub and is under 35.\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
    "dsql": "PROJECT pilot_name FROM SELECT WHERE age < 35 AND plane_name = 'Piper Cub' FROM PilotSkills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the names of pilots who are younger than 35 and have a plane named Piper Cub?\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM PilotSkills WHERE age  <  35 AND plane_name  =  'Piper Cub'",
    "dsql": "PROJECT pilot_name FROM SELECT WHERE age < 35 AND plane_name = 'Piper Cub' FROM PilotSkills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Where is the plane F-14 Fighter located?\n### Response (TSQL):",
    "sql": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
    "dsql": "PROJECT LOCATION FROM SELECT WHERE plane_name = 'F-14 Fighter' FROM hangar "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Return the location of the hangar in which F-14 Fighter is located.\n### Response (TSQL):",
    "sql": "SELECT LOCATION FROM hangar WHERE plane_name  =  'F-14 Fighter'",
    "dsql": "PROJECT LOCATION FROM SELECT WHERE plane_name = 'F-14 Fighter' FROM hangar "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: How many different places have some plane?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT LOCATION) FROM hangar",
    "dsql": "PROJECT COUNT(DISTINCT LOCATION) FROM AGGREGATE COUNT(DISTINCT LOCATION) FROM hangar "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Count the number of different locations of hangars.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT LOCATION) FROM hangar",
    "dsql": "PROJECT COUNT(DISTINCT LOCATION) FROM AGGREGATE COUNT(DISTINCT LOCATION) FROM hangar "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Which plane does the pilot Jones with age 32 has?\n### Response (TSQL):",
    "sql": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32",
    "dsql": "PROJECT plane_name FROM SELECT WHERE pilot_name = 'Jones' AND age = 32 FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the names of planes that the pilot Jones who is 32 has?\n### Response (TSQL):",
    "sql": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Jones'  AND age  =  32",
    "dsql": "PROJECT plane_name FROM SELECT WHERE pilot_name = 'Jones' AND age = 32 FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: How many pilots who are older than 40?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM pilotskills WHERE age  >  40",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE age > 40 FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Count the number of pilots with age greater than 40.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM pilotskills WHERE age  >  40",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE age > 40 FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: How many plane B-52 Bomber owned by the pilot who is under 35?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE age < 35 AND plane_name = 'B-52 Bomber' FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Count the number of B-52 Bombers owned by pilots under 35.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM pilotskills WHERE age  <  35 AND plane_name  =  'B-52 Bomber'",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE age < 35 AND plane_name = 'B-52 Bomber' FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Who is the youngest pilot to fly the plane Piper Cub?\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY age FROM PROJECT pilot_name FROM SELECT WHERE plane_name = 'Piper Cub' FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Return the name of the youngest pilot to fly Piper Cub.\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' ORDER BY age LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY age FROM PROJECT pilot_name FROM SELECT WHERE plane_name = 'Piper Cub' FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What is the name of the most popular plane?\n### Response (TSQL):",
    "sql": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT plane_name FROM AGGREGATE COUNT(*) GROUP BY plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What is the name of the plane that is flown the most often?\n### Response (TSQL):",
    "sql": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT plane_name FROM AGGREGATE COUNT(*) GROUP BY plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What is the name of the least popular plane?\n### Response (TSQL):",
    "sql": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT plane_name FROM AGGREGATE COUNT(*) GROUP BY plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What is the name of the plane that is flown the least often?\n### Response (TSQL):",
    "sql": "SELECT plane_name FROM pilotskills GROUP BY plane_name ORDER BY count(*) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT plane_name FROM AGGREGATE COUNT(*) GROUP BY plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: How many pilots whose planes are in Chicago?\n### Response (TSQL):",
    "sql": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'",
    "dsql": "PROJECT COUNT(DISTINCT T1.pilot_name) FROM AGGREGATE COUNT(DISTINCT T1.pilot_name) FROM SELECT WHERE T2.location = 'Chicago' FROM JOIN AS T1 FROM pilotskills WITH AS T2 FROM hangar ON T1.plane_name = T2.plane_name "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Count the number of pilots who have planes in Chicago.\n### Response (TSQL):",
    "sql": "SELECT \tcount(DISTINCT T1.pilot_name) FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  'Chicago'",
    "dsql": "PROJECT COUNT(DISTINCT T1.pilot_name) FROM AGGREGATE COUNT(DISTINCT T1.pilot_name) FROM SELECT WHERE T2.location = 'Chicago' FROM JOIN AS T1 FROM pilotskills WITH AS T2 FROM hangar ON T1.plane_name = T2.plane_name "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the planes owned by pilot Smith with age 41?\n### Response (TSQL):",
    "sql": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41",
    "dsql": "PROJECT plane_name FROM SELECT WHERE pilot_name = 'Smith' AND age = 41 FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Return the names of planes owned by the pilot whose name is Smith and is 41 years old.\n### Response (TSQL):",
    "sql": "SELECT plane_name FROM pilotskills WHERE pilot_name  =  'Smith' AND age  =  41",
    "dsql": "PROJECT plane_name FROM SELECT WHERE pilot_name = 'Smith' AND age = 41 FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: How many distinct planes are owned across all pilots?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT plane_name) FROM pilotskills",
    "dsql": "PROJECT COUNT(DISTINCT plane_name) FROM AGGREGATE COUNT(DISTINCT plane_name) FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Count the number of different plane names across all pilots.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT plane_name) FROM pilotskills",
    "dsql": "PROJECT COUNT(DISTINCT plane_name) FROM AGGREGATE COUNT(DISTINCT plane_name) FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: How many planes are owned by the pilot whose name is Smith?\n### Response (TSQL):",
    "sql": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'",
    "dsql": "PROJECT COUNT(plane_name) FROM AGGREGATE COUNT(plane_name) FROM SELECT WHERE pilot_name = 'Smith' FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Count the number of planes Smith owns.\n### Response (TSQL):",
    "sql": "SELECT count(plane_name) FROM pilotskills WHERE pilot_name  =  'Smith'",
    "dsql": "PROJECT COUNT(plane_name) FROM AGGREGATE COUNT(plane_name) FROM SELECT WHERE pilot_name = 'Smith' FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: How many planes are controlled by the pilots whose age is older than 40?\n### Response (TSQL):",
    "sql": "SELECT count(plane_name) FROM pilotskills WHERE age  >  40",
    "dsql": "PROJECT COUNT(plane_name) FROM AGGREGATE COUNT(plane_name) FROM SELECT WHERE age > 40 FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Count the number of planes flown by pilots older than 40.\n### Response (TSQL):",
    "sql": "SELECT count(plane_name) FROM pilotskills WHERE age  >  40",
    "dsql": "PROJECT COUNT(plane_name) FROM AGGREGATE COUNT(plane_name) FROM SELECT WHERE age > 40 FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find the names of all pilots with age between 30 and 40 sorted by their ages in ascending order.\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age",
    "dsql": "ORDER BY age FROM PROJECT pilot_name FROM SELECT WHERE age BETWEEN 30 AND 40 FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the names of pilots between the ages of 30 and 40, ordered by age ascending?\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM pilotskills WHERE age BETWEEN 30 AND 40 ORDER BY age",
    "dsql": "ORDER BY age FROM PROJECT pilot_name FROM SELECT WHERE age BETWEEN 30 AND 40 FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: List all pilot names sorted by their ages in the descending order.\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM pilotskills ORDER BY age DESC",
    "dsql": "ORDER BY DESC age FROM PROJECT pilot_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the names of pilots, ordered by age descending?\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM pilotskills ORDER BY age DESC",
    "dsql": "ORDER BY DESC age FROM PROJECT pilot_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find all locations of planes sorted by the plane name.\n### Response (TSQL):",
    "sql": "SELECT LOCATION FROM hangar ORDER BY plane_name",
    "dsql": "ORDER BY plane_name FROM PROJECT LOCATION FROM hangar "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the locations of the different planes, ordered by plane name?\n### Response (TSQL):",
    "sql": "SELECT LOCATION FROM hangar ORDER BY plane_name",
    "dsql": "ORDER BY plane_name FROM PROJECT LOCATION FROM hangar "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: List all distinct types of planes owned by all pilots in alphabetic order?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name",
    "dsql": "ORDER BY plane_name FROM PROJECT DISTINCT plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the different plane names, ordered alphabetically?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT plane_name FROM pilotskills ORDER BY plane_name",
    "dsql": "ORDER BY plane_name FROM PROJECT DISTINCT plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: How many pilots who are older than 40 or younger than 30?\n### Response (TSQL):",
    "sql": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30",
    "dsql": "ORDER BY age > 40 OR age < 30 FROM PROJECT COUNT(pilot_name) FROM AGGREGATE COUNT(pilot_name) FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Count the number of pilots with age greater than 40 or less than 30.\n### Response (TSQL):",
    "sql": "SELECT count(pilot_name) FROM pilotskills ORDER BY age  >  40 OR age  <  30",
    "dsql": "ORDER BY age > 40 OR age < 30 FROM PROJECT COUNT(pilot_name) FROM AGGREGATE COUNT(pilot_name) FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the names and ages of pilots who own plane Piper Cub and are older than 35, or have F-14 Fighter and are younger than 30?\n### Response (TSQL):",
    "sql": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30",
    "dsql": "UNION PROJECT pilot_name, age FROM SELECT WHERE plane_name = 'Piper Cub' AND age > 35 FROM pilotskills WITH PROJECT pilot_name, age FROM SELECT WHERE plane_name = 'F-14 Fighter' AND age < 30 FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Return the names and ages of pilors who have flown Piper Cub and are older than 35, or have flown the F-14 Fighter and are younger than 30.\n### Response (TSQL):",
    "sql": "SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'Piper Cub' AND age  >  35 UNION SELECT pilot_name ,  age FROM pilotskills WHERE plane_name  =  'F-14 Fighter' AND age  <  30",
    "dsql": "UNION PROJECT pilot_name, age FROM SELECT WHERE plane_name = 'Piper Cub' AND age > 35 FROM pilotskills WITH PROJECT pilot_name, age FROM SELECT WHERE plane_name = 'F-14 Fighter' AND age < 30 FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find pilots who own plane Piper Cub but not B-52 Bomber.\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
    "dsql": "EXCEPT PROJECT pilot_name FROM SELECT WHERE plane_name = 'Piper Cub' FROM pilotskills WITH PROJECT pilot_name FROM SELECT WHERE plane_name = 'B-52 Bomber' FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the names of pilots who have flown Piper Cub but not the B-52 Bomber?\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' EXCEPT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
    "dsql": "EXCEPT PROJECT pilot_name FROM SELECT WHERE plane_name = 'Piper Cub' FROM pilotskills WITH PROJECT pilot_name FROM SELECT WHERE plane_name = 'B-52 Bomber' FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find pilots who own planes Piper Cub and B-52 Bomber.\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
    "dsql": "INTERSECT PROJECT pilot_name FROM SELECT WHERE plane_name = 'Piper Cub' FROM pilotskills WITH PROJECT pilot_name FROM SELECT WHERE plane_name = 'B-52 Bomber' FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the names of pilots who own both Piper Cub and the B-52 Bomber?\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' INTERSECT SELECT pilot_name FROM pilotskills WHERE plane_name  =  'B-52 Bomber'",
    "dsql": "INTERSECT PROJECT pilot_name FROM SELECT WHERE plane_name = 'Piper Cub' FROM pilotskills WITH PROJECT pilot_name FROM SELECT WHERE plane_name = 'B-52 Bomber' FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the average and smallest ages of all pilots?\n### Response (TSQL):",
    "sql": "SELECT avg(age) ,  min(age) FROM pilotskills",
    "dsql": "PROJECT AVG(age), MIN(age) FROM AGGREGATE AVG(age), MIN(age) FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Return the average and minimum ages across all pilots.\n### Response (TSQL):",
    "sql": "SELECT avg(age) ,  min(age) FROM pilotskills",
    "dsql": "PROJECT AVG(age), MIN(age) FROM AGGREGATE AVG(age), MIN(age) FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the names of pilots who have planes in both Austin and Boston?\n### Response (TSQL):",
    "sql": "SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  \"Boston\"",
    "dsql": "INTERSECT PROJECT T1.pilot_name FROM SELECT WHERE T2.location = \"Austin\" FROM JOIN AS T1 FROM pilotskills WITH AS T2 FROM hangar ON T1.plane_name = T2.plane_name WITH PROJECT T1.pilot_name FROM SELECT WHERE T2.LOCATION = \"Boston\" FROM JOIN AS T1 FROM pilotskills WITH AS T2 FROM hangar ON T1.plane_name = T2.plane_name "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Give the names of pilots who have planes in Austin and Boston.\n### Response (TSQL):",
    "sql": "SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\" INTERSECT SELECT T1.pilot_name FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.LOCATION  =  \"Boston\"",
    "dsql": "INTERSECT PROJECT T1.pilot_name FROM SELECT WHERE T2.location = \"Austin\" FROM JOIN AS T1 FROM pilotskills WITH AS T2 FROM hangar ON T1.plane_name = T2.plane_name WITH PROJECT T1.pilot_name FROM SELECT WHERE T2.LOCATION = \"Boston\" FROM JOIN AS T1 FROM pilotskills WITH AS T2 FROM hangar ON T1.plane_name = T2.plane_name "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find the pilots who have either plane Piper Cub or plane F-14 Fighter.\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
    "dsql": "PROJECT pilot_name FROM SELECT WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter' FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the names of pilots who have either the Piper Cub or the F-14 Fighter?\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM pilotskills WHERE plane_name  =  'Piper Cub' OR plane_name  =  'F-14 Fighter'",
    "dsql": "PROJECT pilot_name FROM SELECT WHERE plane_name = 'Piper Cub' OR plane_name = 'F-14 Fighter' FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What is the average age of pilots for different types of planes?\n### Response (TSQL):",
    "sql": "SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name",
    "dsql": "PROJECT AVG(age), plane_name FROM AGGREGATE AVG(age), COUNT(*) GROUP BY plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Return the average age of pilots for each plane name.\n### Response (TSQL):",
    "sql": "SELECT avg(age) ,  plane_name FROM pilotskills GROUP BY plane_name",
    "dsql": "PROJECT AVG(age), plane_name FROM AGGREGATE AVG(age), COUNT(*) GROUP BY plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find the number of planes for each type.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name",
    "dsql": "PROJECT COUNT(*), plane_name FROM AGGREGATE COUNT(*) GROUP BY plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Count the number of entries for each plane name.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name",
    "dsql": "PROJECT COUNT(*), plane_name FROM AGGREGATE COUNT(*) GROUP BY plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find the name of the oldest pilot for each type of plane, and order the results by plane name.\n### Response (TSQL):",
    "sql": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name",
    "dsql": "ORDER BY plane_name FROM PROJECT pilot_name, plane_name, MAX(age) FROM AGGREGATE MAX(age), COUNT(*) GROUP BY plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the different plane names, and what are the names of the oldest pilot who has each, ordered by plane name?\n### Response (TSQL):",
    "sql": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name ORDER BY plane_name",
    "dsql": "ORDER BY plane_name FROM PROJECT pilot_name, plane_name, MAX(age) FROM AGGREGATE MAX(age), COUNT(*) GROUP BY plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the names of oldest pilots for each type of plane?\n### Response (TSQL):",
    "sql": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
    "dsql": "PROJECT pilot_name, plane_name, MAX(age) FROM AGGREGATE MAX(age), COUNT(*) GROUP BY plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Return the names of the different planes, as well as the names of the oldest pilots who flew each.\n### Response (TSQL):",
    "sql": "SELECT pilot_name ,  plane_name ,  max(age) FROM pilotskills GROUP BY plane_name",
    "dsql": "PROJECT pilot_name, plane_name, MAX(age) FROM AGGREGATE MAX(age), COUNT(*) GROUP BY plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find the max age for each group of pilots with the same name.\n### Response (TSQL):",
    "sql": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name",
    "dsql": "PROJECT MAX(age), pilot_name FROM AGGREGATE MAX(age), COUNT(*) GROUP BY pilot_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the different pilot names, and what are the maximum ages of pilots for each?\n### Response (TSQL):",
    "sql": "SELECT max(age) ,  pilot_name FROM pilotskills GROUP BY pilot_name",
    "dsql": "PROJECT MAX(age), pilot_name FROM AGGREGATE MAX(age), COUNT(*) GROUP BY pilot_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: For each city, find the number and average age of pilots who have a plane.\n### Response (TSQL):",
    "sql": "SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location",
    "dsql": "PROJECT COUNT(T1.pilot_name), AVG(T1.age), T2.location FROM AGGREGATE AVG(T1.age), COUNT(*), COUNT(T1.pilot_name) GROUP BY T2.location FROM JOIN AS T1 FROM pilotskills WITH AS T2 FROM hangar ON T1.plane_name = T2.plane_name "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the different hangar locations and how many pilots correspond to each. Also, what are their average ages?\n### Response (TSQL):",
    "sql": "SELECT count(T1.pilot_name) ,  avg(T1.age) ,  T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name GROUP BY T2.location",
    "dsql": "PROJECT COUNT(T1.pilot_name), AVG(T1.age), T2.location FROM AGGREGATE AVG(T1.age), COUNT(*), COUNT(T1.pilot_name) GROUP BY T2.location FROM JOIN AS T1 FROM pilotskills WITH AS T2 FROM hangar ON T1.plane_name = T2.plane_name "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find the number of pilots for the plane types with average pilot age below 35.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
    "dsql": "PROJECT COUNT(*), plane_name FROM SELECT WHERE AVG(age) < 35 FROM AGGREGATE AVG(age), COUNT(*) GROUP BY plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the different plane names of planes with an average pilot age of below 35, and how many pilots have flown each of them?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  plane_name FROM pilotskills GROUP BY plane_name HAVING avg(age)  <  35",
    "dsql": "PROJECT COUNT(*), plane_name FROM SELECT WHERE AVG(age) < 35 FROM AGGREGATE AVG(age), COUNT(*) GROUP BY plane_name FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find the location of the plane that is owned by the youngest pilot.\n### Response (TSQL):",
    "sql": "SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)",
    "dsql": "PROJECT T2.location FROM SELECT WHERE T1.age = PROJECT MIN(age) FROM AGGREGATE MIN(age) FROM pilotskills FROM JOIN AS T1 FROM pilotskills WITH AS T2 FROM hangar ON T1.plane_name = T2.plane_name "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What is the location of the plane that was flown by the pilot with the lowest age?\n### Response (TSQL):",
    "sql": "SELECT T2.location FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T1.age  =  (SELECT min(age) FROM pilotskills)",
    "dsql": "PROJECT T2.location FROM SELECT WHERE T1.age = PROJECT MIN(age) FROM AGGREGATE MIN(age) FROM pilotskills FROM JOIN AS T1 FROM pilotskills WITH AS T2 FROM hangar ON T1.plane_name = T2.plane_name "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find the name and age of pilots who have a plane in Austin.\n### Response (TSQL):",
    "sql": "SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\"",
    "dsql": "PROJECT T1.pilot_name, T1.age FROM SELECT WHERE T2.location = \"Austin\" FROM JOIN AS T1 FROM pilotskills WITH AS T2 FROM hangar ON T1.plane_name = T2.plane_name "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the names and ages of pilots who have planes located in Austin?\n### Response (TSQL):",
    "sql": "SELECT T1.pilot_name ,  T1.age FROM pilotskills AS T1 JOIN hangar AS T2 ON T1.plane_name  =  T2.plane_name WHERE T2.location  =  \"Austin\"",
    "dsql": "PROJECT T1.pilot_name, T1.age FROM SELECT WHERE T2.location = \"Austin\" FROM JOIN AS T1 FROM pilotskills WITH AS T2 FROM hangar ON T1.plane_name = T2.plane_name "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: List in alphabetic order the names of pilots whose age is greater than some pilots having plane Piper Cub.\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
    "dsql": "ORDER BY pilot_name FROM PROJECT pilot_name FROM SELECT WHERE age > PROJECT MIN(age) FROM AGGREGATE MIN(age) FROM SELECT WHERE plane_name = 'Piper Cub' FROM pilotskills FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Return the names of pilots who are older than any pilot who has flown Piper Cub, ordered alphabetically.\n### Response (TSQL):",
    "sql": "SELECT pilot_name FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub') ORDER BY pilot_name",
    "dsql": "ORDER BY pilot_name FROM PROJECT pilot_name FROM SELECT WHERE age > PROJECT MIN(age) FROM AGGREGATE MIN(age) FROM SELECT WHERE plane_name = 'Piper Cub' FROM pilotskills FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find the number of pilots whose age is younger than all pilots whose plane is F-14 Fighter.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE age < PROJECT MIN(age) FROM AGGREGATE MIN(age) FROM SELECT WHERE plane_name = 'F-14 Fighter' FROM pilotskills FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: How many pilots are younger than all pilots who own the F-14 Fighter?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM pilotskills WHERE age  <  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'F-14 Fighter')",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE age < PROJECT MIN(age) FROM AGGREGATE MIN(age) FROM SELECT WHERE plane_name = 'F-14 Fighter' FROM pilotskills FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find all different planes whose names contain substring 'Bomber'.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'",
    "dsql": "PROJECT DISTINCT plane_name FROM SELECT WHERE plane_name LIKE '%Bomber%' FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: What are the different plane names that contain the word Bomber?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT plane_name FROM pilotskills WHERE plane_name LIKE '%Bomber%'",
    "dsql": "PROJECT DISTINCT plane_name FROM SELECT WHERE plane_name LIKE '%Bomber%' FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: Find the number of all pilots whose age is older than some pilot who has plane Piper Cub.\n### Response (TSQL):",
    "sql": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')",
    "dsql": "PROJECT COUNT(pilot_name) FROM AGGREGATE COUNT(pilot_name) FROM SELECT WHERE age > PROJECT MIN(age) FROM AGGREGATE MIN(age) FROM SELECT WHERE plane_name = 'Piper Cub' FROM pilotskills FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE PilotSkills ( pilot_name text, plane_name text, age number, PRIMARY KEY(pilot_name), FOREIGN KEY(plane_name) REFERENCES Hangar (plane_name)); CREATE TABLE Hangar ( plane_name text, location text, PRIMARY KEY(plane_name)); \n### Question: How many pilots are older than the youngest pilot who has Piper Cub?\n### Response (TSQL):",
    "sql": "SELECT count(pilot_name) FROM pilotskills WHERE age  >  (SELECT min(age) FROM pilotskills WHERE plane_name  =  'Piper Cub')",
    "dsql": "PROJECT COUNT(pilot_name) FROM AGGREGATE COUNT(pilot_name) FROM SELECT WHERE age > PROJECT MIN(age) FROM AGGREGATE MIN(age) FROM SELECT WHERE plane_name = 'Piper Cub' FROM pilotskills FROM pilotskills "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Find the name of the district which has the largest area.\n### Response (TSQL):",
    "sql": "SELECT name FROM district ORDER BY Area_km DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC Area_km FROM PROJECT name FROM district "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Select the area and government website of the district with the smallest population.\n### Response (TSQL):",
    "sql": "SELECT area_km ,  Government_website FROM district ORDER BY Population LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY Population FROM PROJECT area_km, Government_website FROM district "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Find the names and populations of the districts whose area is greater than the average area.\n### Response (TSQL):",
    "sql": "SELECT name ,  population FROM district WHERE area_km  >  (SELECT avg(area_km) FROM district)",
    "dsql": "PROJECT name, population FROM SELECT WHERE area_km > PROJECT AVG(area_km) FROM AGGREGATE AVG(area_km) FROM district FROM district "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Give me the biggest and average areas of all districts.\n### Response (TSQL):",
    "sql": "SELECT max(area_km) ,  avg(area_km) FROM district",
    "dsql": "PROJECT MAX(area_km), AVG(area_km) FROM AGGREGATE MAX(area_km), AVG(area_km) FROM district "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: What is the total population of the districts whose areas are in the top 3?\n### Response (TSQL):",
    "sql": "SELECT sum(population) FROM district ORDER BY area_km DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC area_km FROM PROJECT SUM(population) FROM AGGREGATE SUM(population) FROM district "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: List the ids, names, and government websites of all districts sorted by population.\n### Response (TSQL):",
    "sql": "SELECT name ,  Government_website ,  district_id FROM district ORDER BY Population",
    "dsql": "ORDER BY Population FROM PROJECT name, Government_website, district_id FROM district "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Find the names of districts whose government links use a 'gov' domain.\n### Response (TSQL):",
    "sql": "SELECT name FROM district WHERE Government_website LIKE \"%gov%\"",
    "dsql": "PROJECT name FROM SELECT WHERE Government_website LIKE \"%gov%\" FROM district "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Return the ids and names of the districts whose population is larger than 4000 or area bigger than 3000.\n### Response (TSQL):",
    "sql": "SELECT district_id ,  name FROM district WHERE area_km  >  3000 OR population  >  4000",
    "dsql": "PROJECT district_id, name FROM SELECT WHERE area_km > 3000 OR population > 4000 FROM district "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Find all spokesman's names and speech titles.\n### Response (TSQL):",
    "sql": "SELECT name ,  speach_title FROM spokesman",
    "dsql": "PROJECT name, speach_title FROM spokesman "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Find the average points and average ages of all spokesmen whose rank position is 1.\n### Response (TSQL):",
    "sql": "SELECT avg(points) ,  avg(age) FROM spokesman WHERE rank_position  =  1",
    "dsql": "PROJECT AVG(points), AVG(age) FROM AGGREGATE AVG(age), AVG(points) FROM SELECT WHERE rank_position = 1 FROM spokesman "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: What are the names and points of spokesmen who are younger than 40?\n### Response (TSQL):",
    "sql": "SELECT name ,  points FROM spokesman WHERE age  <  40",
    "dsql": "PROJECT name, points FROM SELECT WHERE age < 40 FROM spokesman "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Who is the oldest spokesman?\n### Response (TSQL):",
    "sql": "SELECT name FROM spokesman ORDER BY age DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC age FROM PROJECT name FROM spokesman "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Which spokesman has lower points than the average?\n### Response (TSQL):",
    "sql": "SELECT name FROM spokesman WHERE points  <  (SELECT avg(points) FROM spokesman)",
    "dsql": "PROJECT name FROM SELECT WHERE points < PROJECT AVG(points) FROM AGGREGATE AVG(points) FROM spokesman FROM spokesman "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Find the name of the district which has greatest number of spokesmen.\n### Response (TSQL):",
    "sql": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t1.name FROM AGGREGATE COUNT(*) GROUP BY t2.District_ID FROM JOIN AS t1 FROM district WITH AS t2 FROM spokesman_district ON t1.District_ID = t2.District_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Find the names of spokesmen who have served some district before 2004.\n### Response (TSQL):",
    "sql": "SELECT t1.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID WHERE t2.start_year  <  2004",
    "dsql": "PROJECT t1.name FROM SELECT WHERE t2.start_year < 2004 FROM JOIN AS t1 FROM spokesman WITH AS t2 FROM spokesman_district ON t1.Spokesman_ID = t2.Spokesman_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Find the number of spokesmen for each district, and the show district names as well.\n### Response (TSQL):",
    "sql": "SELECT t1.name ,  count(*) FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID",
    "dsql": "PROJECT t1.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY t2.District_ID FROM JOIN AS t1 FROM district WITH AS t2 FROM spokesman_district ON t1.District_ID = t2.District_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Find the names of the districts which have had both spokesman with rank position 1 and 2.\n### Response (TSQL):",
    "sql": "SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  1 INTERSECT SELECT t3.name FROM spokesman AS t1 JOIN spokesman_district AS t2 ON t1.Spokesman_ID  =  t2.Spokesman_ID JOIN district AS t3 ON t3.district_id  =  t2.district_id WHERE t1.rank_position  =  2",
    "dsql": "INTERSECT PROJECT t3.name FROM SELECT WHERE t1.rank_position = 1 FROM JOIN AS t1 FROM spokesman WITH JOIN AS t2 FROM spokesman_district WITH AS t3 FROM district ON t3.district_id = t2.district_id ON t1.Spokesman_ID = t2.Spokesman_ID WITH PROJECT t3.name FROM SELECT WHERE t1.rank_position = 2 FROM JOIN AS t1 FROM spokesman WITH JOIN AS t2 FROM spokesman_district WITH AS t3 FROM district ON t3.district_id = t2.district_id ON t1.Spokesman_ID = t2.Spokesman_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Find the names of districts which have more than one spokesman.\n### Response (TSQL):",
    "sql": "SELECT t1.name FROM district AS t1 JOIN spokesman_district AS t2 ON t1.District_ID  =  t2.District_ID GROUP BY t2.District_ID HAVING count(*)  >  1",
    "dsql": "PROJECT t1.name FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY t2.District_ID FROM JOIN AS t1 FROM district WITH AS t2 FROM spokesman_district ON t1.District_ID = t2.District_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Find the number of districts which have no spokesmen.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM district WHERE district_id NOT IN (SELECT district_id FROM spokesman_district)",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE district_id NOT IN PROJECT district_id FROM spokesman_district FROM district "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Find the name of spokesmen who do not speak for any district.\n### Response (TSQL):",
    "sql": "SELECT name FROM spokesman WHERE Spokesman_ID NOT IN (SELECT Spokesman_ID FROM spokesman_district)",
    "dsql": "PROJECT name FROM SELECT WHERE Spokesman_ID NOT IN PROJECT Spokesman_ID FROM spokesman_district FROM spokesman "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE district ( District_ID number, Name text, Area_km number, Population number, Density_km number, Government_website text, PRIMARY KEY(District_ID)); CREATE TABLE spokesman ( Spokesman_ID number, Name text, Age number, Speach_title text, Rank_position number, Points number, PRIMARY KEY(Spokesman_ID)); CREATE TABLE spokesman_district ( Spokesman_ID number, District_ID number, Start_year text, PRIMARY KEY(Spokesman_ID), FOREIGN KEY(District_ID) REFERENCES district (District_ID), FOREIGN KEY(Spokesman_ID) REFERENCES spokesman (Spokesman_ID)); \n### Question: Find the total and average population of the districts which have some spokesman.\n### Response (TSQL):",
    "sql": "SELECT sum(population) ,  avg(population) FROM district WHERE district_id IN (SELECT district_id FROM spokesman_district)",
    "dsql": "PROJECT SUM(population), AVG(population) FROM AGGREGATE SUM(population), AVG(population) FROM SELECT WHERE district_id IN PROJECT district_id FROM spokesman_district FROM district "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the title of the sculpture that was created in the most recent year ?\n### Response (TSQL):",
    "sql": "select title from sculptures order by year desc limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC year FROM PROJECT title FROM sculptures "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the name of the scuplture that was created most recently ?\n### Response (TSQL):",
    "sql": "select title from sculptures order by year desc limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC year FROM PROJECT title FROM sculptures "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the title and location of the oldest painting ?\n### Response (TSQL):",
    "sql": "select title ,  location from paintings order by year limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY year FROM PROJECT title, location FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the name of the oldest painting and where is it located?\n### Response (TSQL):",
    "sql": "SELECT title ,  LOCATION ,  YEAR FROM paintings ORDER BY YEAR LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY YEAR FROM PROJECT title, LOCATION, YEAR FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the names of all sculptures located in gallery 226.\n### Response (TSQL):",
    "sql": "SELECT title FROM sculptures WHERE LOCATION  =  \"Gallery 226\"",
    "dsql": "PROJECT title FROM SELECT WHERE LOCATION = \"Gallery 226\" FROM sculptures "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the names of all sculptures in gallery 226?\n### Response (TSQL):",
    "sql": "SELECT title FROM sculptures WHERE LOCATION  =  \"Gallery 226\"",
    "dsql": "PROJECT title FROM SELECT WHERE LOCATION = \"Gallery 226\" FROM sculptures "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: List the title and location of all paintings.\n### Response (TSQL):",
    "sql": "SELECT title ,  LOCATION FROM paintings",
    "dsql": "PROJECT title, LOCATION FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the paintings called and where are they located?\n### Response (TSQL):",
    "sql": "SELECT title ,  LOCATION FROM paintings",
    "dsql": "PROJECT title, LOCATION FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: List the title and location of all sculptures.\n### Response (TSQL):",
    "sql": "SELECT title ,  LOCATION FROM sculptures",
    "dsql": "PROJECT title, LOCATION FROM sculptures "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the sculptures called and where are they located?\n### Response (TSQL):",
    "sql": "SELECT title ,  LOCATION FROM sculptures",
    "dsql": "PROJECT title, LOCATION FROM sculptures "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the medium types of the painting with id = 80\n### Response (TSQL):",
    "sql": "SELECT medium FROM paintings WHERE paintingID  =  80",
    "dsql": "PROJECT medium FROM SELECT WHERE paintingID = 80 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What mediums were used for the painting with id 80 ?\n### Response (TSQL):",
    "sql": "select medium from paintings where paintingid  =  80",
    "dsql": "PROJECT medium FROM SELECT WHERE paintingid = 80 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the first and last names of all artists who were born after 1850.\n### Response (TSQL):",
    "sql": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850",
    "dsql": "PROJECT lname, fname FROM SELECT WHERE birthYear > 1850 FROM artists "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the full names of artists born after 1850?\n### Response (TSQL):",
    "sql": "SELECT lname ,  fname FROM artists WHERE birthYear  >  1850",
    "dsql": "PROJECT lname, fname FROM SELECT WHERE birthYear > 1850 FROM artists "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the names and years of all sculptures that are not located in gallery 226.\n### Response (TSQL):",
    "sql": "SELECT title ,  YEAR FROM sculptures WHERE LOCATION != \"Gallery 226\"",
    "dsql": "PROJECT title, YEAR FROM SELECT WHERE LOCATION <> \"Gallery 226\" FROM sculptures "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the names and dates created for all sculptures not located in gallery 226?\n### Response (TSQL):",
    "sql": "SELECT title ,  YEAR FROM sculptures WHERE LOCATION != \"Gallery 226\"",
    "dsql": "PROJECT title, YEAR FROM SELECT WHERE LOCATION <> \"Gallery 226\" FROM sculptures "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the first and last names of all distinct artists who made sculptures before 1900?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900",
    "dsql": "PROJECT DISTINCT T1.lname, T1.fname FROM SELECT WHERE T2.year < 1900 FROM JOIN AS T1 FROM artists WITH AS T2 FROM sculptures ON T1.artistID = T2.sculptorID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the first and last name of each distinct artists who made a sculpture before 1900?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  <  1900",
    "dsql": "PROJECT DISTINCT T1.lname, T1.fname FROM SELECT WHERE T2.year < 1900 FROM JOIN AS T1 FROM artists WITH AS T2 FROM sculptures ON T1.artistID = T2.sculptorID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the birth years of all distinct artists who made sculptures after 1920?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920",
    "dsql": "PROJECT DISTINCT T1.birthYear FROM SELECT WHERE T2.year > 1920 FROM JOIN AS T1 FROM artists WITH AS T2 FROM sculptures ON T1.artistID = T2.sculptorID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the birth year of each distinct artists who created sculptures after 1920?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.birthYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.year  >  1920",
    "dsql": "PROJECT DISTINCT T1.birthYear FROM SELECT WHERE T2.year > 1920 FROM JOIN AS T1 FROM artists WITH AS T2 FROM sculptures ON T1.artistID = T2.sculptorID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the first and last names of the artist who lived the longest?\n### Response (TSQL):",
    "sql": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC deathYear - birthYear FROM PROJECT lname, fname FROM artists "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Give the full name of the artist who lived the longest.\n### Response (TSQL):",
    "sql": "SELECT lname ,  fname FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC deathYear - birthYear FROM PROJECT lname, fname FROM artists "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the age of the artist who had the shortest life?\n### Response (TSQL):",
    "sql": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY deathYear - birthYear FROM PROJECT deathYear - birthYear FROM artists "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: How old is the artist who lived the shortest life?\n### Response (TSQL):",
    "sql": "SELECT deathYear - birthYear FROM artists ORDER BY deathYear - birthYear LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY deathYear - birthYear FROM PROJECT deathYear - birthYear FROM artists "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the first name and age of the artist who had the longest life?\n### Response (TSQL):",
    "sql": "SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC deathYear - birthYear FROM PROJECT fname, deathYear - birthYear FROM artists "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the first name and age of the artist who lived the longest?\n### Response (TSQL):",
    "sql": "SELECT fname  ,  deathYear - birthYear FROM artists ORDER BY deathYear - birthYear DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC deathYear - birthYear FROM PROJECT fname, deathYear - birthYear FROM artists "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: How many paintings are exhibited at gallery 240?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE LOCATION = \"Gallery 240\" FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the total number of paintings exhibited in gallery 240?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM paintings WHERE LOCATION  =  \"Gallery 240\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE LOCATION = \"Gallery 240\" FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: How many paintings did the artist with the longest life make ?\n### Response (TSQL):",
    "sql": "select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC t1.deathyear - t1.birthyear FROM PROJECT COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY t2.painterid FROM JOIN AS t1 FROM artists WITH AS t2 FROM paintings ON t1.artistid = t2.painterid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the painting count of the artist with the longest life ?\n### Response (TSQL):",
    "sql": "select count(*) from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid order by t1.deathyear - t1.birthyear desc limit 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC t1.deathyear - t1.birthyear FROM PROJECT COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY t2.painterid FROM JOIN AS t1 FROM artists WITH AS t2 FROM paintings ON t1.artistid = t2.painterid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Give me a list of names and years of paintings that were created by the artist whose first name is Mary.\n### Response (TSQL):",
    "sql": "SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Mary\"",
    "dsql": "PROJECT T2.title, T2.year FROM SELECT WHERE T1.fname = \"Mary\" FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the name and year of each painting created by the artist whose first name is Mary?\n### Response (TSQL):",
    "sql": "SELECT T2.title ,   T2.year FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Mary\"",
    "dsql": "PROJECT T2.title, T2.year FROM SELECT WHERE T1.fname = \"Mary\" FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the widths of the paintings that were created by the artist who was born before 1850?\n### Response (TSQL):",
    "sql": "SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850",
    "dsql": "PROJECT T2.width_mm FROM SELECT WHERE T1.birthYear < 1850 FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: How wide were the paintings by the artist who was born prior to 1850?\n### Response (TSQL):",
    "sql": "SELECT T2.width_mm FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.birthYear  <  1850",
    "dsql": "PROJECT T2.width_mm FROM SELECT WHERE T1.birthYear < 1850 FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the location and medium type of paintings that are created by the artist whose first name is Pablo?\n### Response (TSQL):",
    "sql": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\"",
    "dsql": "PROJECT T2.location, T2.medium FROM SELECT WHERE T1.fname = \"Pablo\" FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: In what locations and on what mediums are the paintings created by the artist with the first name Pablo?\n### Response (TSQL):",
    "sql": "SELECT T2.location ,   T2.medium FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.fname  =  \"Pablo\"",
    "dsql": "PROJECT T2.location, T2.medium FROM SELECT WHERE T1.fname = \"Pablo\" FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the first and last names of the artists who have both works of paintings and sculptures?\n### Response (TSQL):",
    "sql": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID",
    "dsql": "INTERSECT PROJECT T1.lname, T1.fname FROM JOIN AS T1 FROM artists WITH AS T2 FROM sculptures ON T1.artistID = T2.sculptorID WITH PROJECT T3.lname, T3.fname FROM JOIN AS T3 FROM artists WITH AS T4 FROM paintings ON T3.artistID = T4.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Give the full names of artists who have created paintings and sculptures.\n### Response (TSQL):",
    "sql": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID",
    "dsql": "INTERSECT PROJECT T1.lname, T1.fname FROM JOIN AS T1 FROM artists WITH AS T2 FROM sculptures ON T1.artistID = T2.sculptorID WITH PROJECT T3.lname, T3.fname FROM JOIN AS T3 FROM artists WITH AS T4 FROM paintings ON T3.artistID = T4.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the first and last names of the artists who have not only medium oil paintings but also paintings with the lithographic medium?\n### Response (TSQL):",
    "sql": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
    "dsql": "INTERSECT PROJECT T1.lname, T1.fname FROM SELECT WHERE T2.medium = \"oil\" FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID WITH PROJECT T3.lname, T3.fname FROM SELECT WHERE T4.medium = \"lithograph\" FROM JOIN AS T3 FROM artists WITH AS T4 FROM paintings ON T3.artistID = T4.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the first and last names of artists who have painted using both oil and lithographic mediums?\n### Response (TSQL):",
    "sql": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" INTERSECT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN paintings AS T4 ON T3.artistID  =  T4.painterID WHERE T4.medium  =  \"lithograph\"",
    "dsql": "INTERSECT PROJECT T1.lname, T1.fname FROM SELECT WHERE T2.medium = \"oil\" FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID WITH PROJECT T3.lname, T3.fname FROM SELECT WHERE T4.medium = \"lithograph\" FROM JOIN AS T3 FROM artists WITH AS T4 FROM paintings ON T3.artistID = T4.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the birth year of the artist who created a painting in 1884 that is on canvas?\n### Response (TSQL):",
    "sql": "SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  \"canvas\"",
    "dsql": "PROJECT T1.birthYear FROM SELECT WHERE T2.year = 1884 AND mediumOn = \"canvas\" FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: In what year was the artist who created a painting in 1884 born?\n### Response (TSQL):",
    "sql": "SELECT T1.birthYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  =  1884 AND mediumOn  =  \"canvas\"",
    "dsql": "PROJECT T1.birthYear FROM SELECT WHERE T2.year = 1884 AND mediumOn = \"canvas\" FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the unique first names of the artists who had medium oil paintings located in gallery 241?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
    "dsql": "PROJECT DISTINCT T1.fname FROM SELECT WHERE T2.medium = \"oil\" AND LOCATION = \"Gallery 241\" FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are first names of the artists with oil paintings in gallery 241?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
    "dsql": "PROJECT DISTINCT T1.fname FROM SELECT WHERE T2.medium = \"oil\" AND LOCATION = \"Gallery 241\" FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the numbers of works for different medium type?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  medium FROM paintings GROUP BY medium",
    "dsql": "PROJECT COUNT(*), medium FROM AGGREGATE COUNT(*) GROUP BY medium FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: How many works are there in each medium?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  medium FROM paintings GROUP BY medium",
    "dsql": "PROJECT COUNT(*), medium FROM AGGREGATE COUNT(*) GROUP BY medium FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the average height of paintings for different medium types?\n### Response (TSQL):",
    "sql": "SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium",
    "dsql": "PROJECT AVG(height_mm), medium FROM AGGREGATE AVG(height_mm), COUNT(*) GROUP BY medium FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the average height of paintings for different medium types?\n### Response (TSQL):",
    "sql": "SELECT avg(height_mm) ,  medium FROM paintings GROUP BY medium",
    "dsql": "PROJECT AVG(height_mm), medium FROM AGGREGATE AVG(height_mm), COUNT(*) GROUP BY medium FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the numbers of paintings created before 1900 in different places?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION",
    "dsql": "PROJECT COUNT(*), LOCATION FROM AGGREGATE COUNT(*) GROUP BY LOCATION FROM SELECT WHERE YEAR < 1900 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: How many paintings were created before 1900 in different locations?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  LOCATION FROM paintings WHERE YEAR  <  1900 GROUP BY LOCATION",
    "dsql": "PROJECT COUNT(*), LOCATION FROM AGGREGATE COUNT(*) GROUP BY LOCATION FROM SELECT WHERE YEAR < 1900 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the titles of paintings that are created after 1910 and whose medium is oil?\n### Response (TSQL):",
    "sql": "SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  \"oil\"",
    "dsql": "PROJECT title FROM SELECT WHERE YEAR > 1910 AND medium = \"oil\" FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Give the names of all oil paintings created after 1910.\n### Response (TSQL):",
    "sql": "SELECT title FROM paintings WHERE YEAR  >  1910 AND medium  =  \"oil\"",
    "dsql": "PROJECT title FROM SELECT WHERE YEAR > 1910 AND medium = \"oil\" FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the unique id of the painters who had medium oil paintings exhibited at gallery 240?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\"",
    "dsql": "PROJECT DISTINCT painterID FROM SELECT WHERE medium = \"oil\" AND LOCATION = \"Gallery 240\" FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the unique id of every painter who had a medium oil painting displayed at gallery 240?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT painterID FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 240\"",
    "dsql": "PROJECT DISTINCT painterID FROM SELECT WHERE medium = \"oil\" AND LOCATION = \"Gallery 240\" FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the distinct titles of all the paintings that have a longer height than some painting on canvas?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  \"canvas\")",
    "dsql": "PROJECT DISTINCT title FROM SELECT WHERE height_mm > PROJECT MIN(height_mm) FROM AGGREGATE MIN(height_mm) FROM SELECT WHERE mediumOn = \"canvas\" FROM paintings FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the distinct titles of every painting that has a greater height than some painting on canvas?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT title FROM paintings WHERE height_mm  >  (SELECT min(height_mm) FROM paintings WHERE mediumOn  =  \"canvas\")",
    "dsql": "PROJECT DISTINCT title FROM SELECT WHERE height_mm > PROJECT MIN(height_mm) FROM AGGREGATE MIN(height_mm) FROM SELECT WHERE mediumOn = \"canvas\" FROM paintings FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the distinct ids of all paintings that are older than some painting at location gallery 240.\n### Response (TSQL):",
    "sql": "SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  \"Gallery 240\")",
    "dsql": "PROJECT paintingID FROM SELECT WHERE YEAR < PROJECT MAX(YEAR) FROM AGGREGATE MAX(YEAR) FROM SELECT WHERE LOCATION = \"Gallery 240\" FROM paintings FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the distinct ids of every painting that is older than some painting in gallery 240?\n### Response (TSQL):",
    "sql": "SELECT paintingID FROM paintings WHERE YEAR  <  (SELECT max(YEAR) FROM paintings WHERE LOCATION  =  \"Gallery 240\")",
    "dsql": "PROJECT paintingID FROM SELECT WHERE YEAR < PROJECT MAX(YEAR) FROM AGGREGATE MAX(YEAR) FROM SELECT WHERE LOCATION = \"Gallery 240\" FROM paintings FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the id of the oldest painting.\n### Response (TSQL):",
    "sql": "SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY YEAR FROM PROJECT paintingID FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the id of the oldest painting?\n### Response (TSQL):",
    "sql": "SELECT paintingID FROM paintings ORDER BY YEAR LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY YEAR FROM PROJECT paintingID FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the first and last name of the artist who had a sculpture work whose title has the word \u201cfemale\u201d in it?\n### Response (TSQL):",
    "sql": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\"",
    "dsql": "PROJECT T1.lname, T1.fname FROM SELECT WHERE T2.title LIKE \"%female%\" FROM JOIN AS T1 FROM artists WITH AS T2 FROM sculptures ON T1.artistID = T2.sculptorID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the full name of the artist with a sculpture whose title includes the word \"female\"?\n### Response (TSQL):",
    "sql": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID WHERE T2.title LIKE \"%female%\"",
    "dsql": "PROJECT T1.lname, T1.fname FROM SELECT WHERE T2.title LIKE \"%female%\" FROM JOIN AS T1 FROM artists WITH AS T2 FROM sculptures ON T1.artistID = T2.sculptorID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: List the names of all distinct paintings in alphabetical order.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT title FROM paintings ORDER BY title",
    "dsql": "ORDER BY title FROM PROJECT DISTINCT title FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the name of every distinct painting in alphabetical order?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT title FROM paintings ORDER BY title",
    "dsql": "ORDER BY title FROM PROJECT DISTINCT title FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: List the names of all distinct paintings ordered by length.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT title FROM paintings ORDER BY height_mm",
    "dsql": "ORDER BY height_mm FROM PROJECT DISTINCT title FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: List the names of all distinct paintings from shortest to longest in height.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT title FROM paintings ORDER BY height_mm",
    "dsql": "ORDER BY height_mm FROM PROJECT DISTINCT title FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the names of both paintings and sculptures created between 1900 and 1950?\n### Response (TSQL):",
    "sql": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950",
    "dsql": "UNION PROJECT title FROM SELECT WHERE YEAR BETWEEN 1900 AND 1950 FROM paintings WITH PROJECT title FROM SELECT WHERE YEAR BETWEEN 1900 AND 1950 FROM sculptures "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the names of  paintings and scupltures created between 1900 and 1950?\n### Response (TSQL):",
    "sql": "SELECT title FROM paintings WHERE YEAR BETWEEN 1900 AND 1950 UNION SELECT title FROM sculptures WHERE YEAR BETWEEN 1900 AND 1950",
    "dsql": "UNION PROJECT title FROM SELECT WHERE YEAR BETWEEN 1900 AND 1950 FROM paintings WITH PROJECT title FROM SELECT WHERE YEAR BETWEEN 1900 AND 1950 FROM sculptures "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the titles of paintings and sculpture works made by the artist whose id is 222?\n### Response (TSQL):",
    "sql": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
    "dsql": "UNION PROJECT T2.title FROM SELECT WHERE T1.artistID = 222 FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID WITH PROJECT T4.title FROM SELECT WHERE T3.artistID = 222 FROM JOIN AS T3 FROM artists WITH AS T4 FROM sculptures ON T3.artistID = T4.sculptorID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the titles of all paintings and sculpture works made by the artist whose id is 222?\n### Response (TSQL):",
    "sql": "SELECT T2.title FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T1.artistID  =  222 UNION SELECT T4.title FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID WHERE T3.artistID  =  222",
    "dsql": "UNION PROJECT T2.title FROM SELECT WHERE T1.artistID = 222 FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID WITH PROJECT T4.title FROM SELECT WHERE T3.artistID = 222 FROM JOIN AS T3 FROM artists WITH AS T4 FROM sculptures ON T3.artistID = T4.sculptorID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the id of the artist who has the highest number of painting works before 1900?\n### Response (TSQL):",
    "sql": "SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.artistID FROM AGGREGATE COUNT(*) GROUP BY T1.artistID FROM SELECT WHERE T2.year < 1900 FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the id of the artist with the most paintings before 1900?\n### Response (TSQL):",
    "sql": "SELECT T1.artistID FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.year  <  1900 GROUP BY T1.artistID ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.artistID FROM AGGREGATE COUNT(*) GROUP BY T1.artistID FROM SELECT WHERE T2.year < 1900 FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the first name of the artist who has the highest number of sculptures?\n### Response (TSQL):",
    "sql": "SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.fname FROM AGGREGATE COUNT(*) GROUP BY T2.sculptorID FROM JOIN AS T1 FROM artists WITH AS T2 FROM sculptures ON T1.artistID = T2.sculptorID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the first name of the sculptor with the greatest number of works?\n### Response (TSQL):",
    "sql": "SELECT T1.fname FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.fname FROM AGGREGATE COUNT(*) GROUP BY T2.sculptorID FROM JOIN AS T1 FROM artists WITH AS T2 FROM sculptures ON T1.artistID = T2.sculptorID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the names of paintings whose width is less than 600 or height is larger than 800?\n### Response (TSQL):",
    "sql": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800",
    "dsql": "PROJECT title FROM SELECT WHERE width_mm < 600 OR height_mm > 800 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the titles of paintings that have a width less than 600 or a height taller taller than 800?\n### Response (TSQL):",
    "sql": "SELECT title FROM paintings WHERE width_mm  <  600 OR height_mm  >  800",
    "dsql": "PROJECT title FROM SELECT WHERE width_mm < 600 OR height_mm > 800 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Which locations have paintings created before 1885 or after 1930?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930",
    "dsql": "PROJECT DISTINCT LOCATION FROM SELECT WHERE YEAR < 1885 OR YEAR > 1930 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What locations have works painted before 1885 or after 1930?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  < 1885 OR YEAR  >  1930",
    "dsql": "PROJECT DISTINCT LOCATION FROM SELECT WHERE YEAR < 1885 OR YEAR > 1930 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the ids of paintings whose height is bigger than 500 and less than 2000?\n### Response (TSQL):",
    "sql": "SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000",
    "dsql": "PROJECT paintingID FROM SELECT WHERE height_mm > 500 AND height_mm < 2000 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the ids of paintings that are taller than 500 and shorter than 2000?\n### Response (TSQL):",
    "sql": "SELECT paintingID FROM paintings WHERE height_mm  >  500 AND height_mm  <  2000",
    "dsql": "PROJECT paintingID FROM SELECT WHERE height_mm > 500 AND height_mm < 2000 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Which locations have paintings in the mediums of on panel and on canvas?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\"",
    "dsql": "INTERSECT PROJECT DISTINCT LOCATION FROM SELECT WHERE mediumOn = \"panel\" FROM paintings WITH PROJECT DISTINCT LOCATION FROM SELECT WHERE mediumOn = \"canvas\" FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the locations that have paintings in the mediums of on panels and on canvas?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"panel\" INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE mediumOn  =  \"canvas\"",
    "dsql": "INTERSECT PROJECT DISTINCT LOCATION FROM SELECT WHERE mediumOn = \"panel\" FROM paintings WITH PROJECT DISTINCT LOCATION FROM SELECT WHERE mediumOn = \"canvas\" FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the locations that have paintings created before 1885 and after 1930?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
    "dsql": "INTERSECT PROJECT DISTINCT LOCATION FROM SELECT WHERE YEAR < 1885 FROM paintings WITH PROJECT DISTINCT LOCATION FROM SELECT WHERE YEAR > 1930 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the locations that have works painted before 1885 and after 1930?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 INTERSECT SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  >  1930",
    "dsql": "INTERSECT PROJECT DISTINCT LOCATION FROM SELECT WHERE YEAR < 1885 FROM paintings WITH PROJECT DISTINCT LOCATION FROM SELECT WHERE YEAR > 1930 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the average height and width of paintings that are oil medium in the place of gallery 241?\n### Response (TSQL):",
    "sql": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
    "dsql": "PROJECT AVG(height_mm), AVG(width_mm) FROM AGGREGATE AVG(height_mm), AVG(width_mm) FROM SELECT WHERE medium = \"oil\" AND LOCATION = \"Gallery 241\" FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the average height and width of paintings that are oil medium in gallery 241?\n### Response (TSQL):",
    "sql": "SELECT avg(height_mm) ,  avg(width_mm) FROM paintings WHERE medium  =  \"oil\" AND LOCATION  =  \"Gallery 241\"",
    "dsql": "PROJECT AVG(height_mm), AVG(width_mm) FROM AGGREGATE AVG(height_mm), AVG(width_mm) FROM SELECT WHERE medium = \"oil\" AND LOCATION = \"Gallery 241\" FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the maximum height and id of paintings painted before 1900?\n### Response (TSQL):",
    "sql": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900",
    "dsql": "PROJECT MAX(height_mm), paintingID FROM AGGREGATE MAX(height_mm) FROM SELECT WHERE YEAR < 1900 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the height and id of the tallest painting created before 1900?\n### Response (TSQL):",
    "sql": "SELECT max(height_mm) ,  paintingID FROM paintings WHERE YEAR  <  1900",
    "dsql": "PROJECT MAX(height_mm), paintingID FROM AGGREGATE MAX(height_mm) FROM SELECT WHERE YEAR < 1900 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the maximum height and width of paintings for each year?\n### Response (TSQL):",
    "sql": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR",
    "dsql": "ORDER BY YEAR FROM PROJECT MAX(height_mm), MAX(width_mm), YEAR FROM AGGREGATE MAX(width_mm), MAX(height_mm), COUNT(*) GROUP BY YEAR FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are largest height and width dimensions for paintings in each year?\n### Response (TSQL):",
    "sql": "SELECT max(height_mm) ,  max(width_mm) ,  YEAR FROM paintings GROUP BY YEAR ORDER BY YEAR",
    "dsql": "ORDER BY YEAR FROM PROJECT MAX(height_mm), MAX(width_mm), YEAR FROM AGGREGATE MAX(width_mm), MAX(height_mm), COUNT(*) GROUP BY YEAR FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the average height and width of paintings grouped by painters and ordered by name?\n### Response (TSQL):",
    "sql": "SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title",
    "dsql": "ORDER BY title FROM PROJECT AVG(height_mm), AVG(width_mm), painterID FROM AGGREGATE AVG(height_mm), AVG(width_mm), COUNT(*) GROUP BY painterID FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the average height and width of paintings grouped by painters and ordered by name\n### Response (TSQL):",
    "sql": "SELECT avg(height_mm) ,  avg(width_mm) ,  painterID FROM paintings GROUP BY painterID ORDER BY title",
    "dsql": "ORDER BY title FROM PROJECT AVG(height_mm), AVG(width_mm), painterID FROM AGGREGATE AVG(height_mm), AVG(width_mm), COUNT(*) GROUP BY painterID FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the first names and number of works of all artists who have at least two paintings?\n### Response (TSQL):",
    "sql": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2",
    "dsql": "PROJECT T1.fname, COUNT(*) FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T2.painterID FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the first names of all artists who have at least two paintings, and how many works did each create?\n### Response (TSQL):",
    "sql": "SELECT T1.fname ,  count(*) FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  >=  2",
    "dsql": "PROJECT T1.fname, COUNT(*) FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T2.painterID FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the death year of all artists who have at most 3 paintings?\n### Response (TSQL):",
    "sql": "SELECT T1.deathYear FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID GROUP BY T2.painterID HAVING count(*)  <=  3",
    "dsql": "PROJECT T1.deathYear FROM SELECT WHERE COUNT(*) <= 3 FROM AGGREGATE COUNT(*) GROUP BY T2.painterID FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: When did each artist who created less than 4 paintings die ?\n### Response (TSQL):",
    "sql": "select t1.deathyear from artists as t1 join paintings as t2 on t1.artistid  =  t2.painterid group by t2.painterid having count(*)  <  4",
    "dsql": "PROJECT t1.deathyear FROM SELECT WHERE COUNT(*) < 4 FROM AGGREGATE COUNT(*) GROUP BY t2.painterid FROM JOIN AS t1 FROM artists WITH AS t2 FROM paintings ON t1.artistid = t2.painterid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the death year of the artist who made the least number of sculptures?\n### Response (TSQL):",
    "sql": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT T1.deathYear FROM AGGREGATE COUNT(*) GROUP BY T2.sculptorID FROM JOIN AS T1 FROM artists WITH AS T2 FROM sculptures ON T1.artistID = T2.sculptorID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: When did the artist who made the fewest sculptures die?\n### Response (TSQL):",
    "sql": "SELECT T1.deathYear FROM artists AS T1 JOIN sculptures AS T2 ON T1.artistID  =  T2.sculptorID GROUP BY T2.sculptorID ORDER BY count(*) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT T1.deathYear FROM AGGREGATE COUNT(*) GROUP BY T2.sculptorID FROM JOIN AS T1 FROM artists WITH AS T2 FROM sculptures ON T1.artistID = T2.sculptorID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the id and height of the painting with the longest width in gallery 240?\n### Response (TSQL):",
    "sql": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC width_mm FROM PROJECT paintingID, height_mm FROM SELECT WHERE LOCATION = 'Gallery 240' FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Tell me the height and id number of the widest painting in gallery 240.\n### Response (TSQL):",
    "sql": "SELECT paintingID ,  height_mm FROM paintings WHERE LOCATION  =  'Gallery 240' ORDER BY width_mm DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC width_mm FROM PROJECT paintingID, height_mm FROM SELECT WHERE LOCATION = 'Gallery 240' FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the ids of the paintings created before all of the paintings in gallery 240?\n### Response (TSQL):",
    "sql": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
    "dsql": "PROJECT paintingID FROM SELECT WHERE YEAR < PROJECT MIN(YEAR) FROM AGGREGATE MIN(YEAR) FROM SELECT WHERE LOCATION = 'Gallery 240' FROM paintings FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What is the id of every painting created before the oldest painting in gallery 240?\n### Response (TSQL):",
    "sql": "SELECT paintingID FROM paintings WHERE YEAR  <   (SELECT min(YEAR) FROM paintings WHERE LOCATION  =  'Gallery 240')",
    "dsql": "PROJECT paintingID FROM SELECT WHERE YEAR < PROJECT MIN(YEAR) FROM AGGREGATE MIN(YEAR) FROM SELECT WHERE LOCATION = 'Gallery 240' FROM paintings FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the ids of the paintings whose height is longer than the height of all paintings created after 1900?\n### Response (TSQL):",
    "sql": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)",
    "dsql": "PROJECT paintingID FROM SELECT WHERE height_mm > PROJECT MAX(height_mm) FROM AGGREGATE MAX(height_mm) FROM SELECT WHERE YEAR > 1900 FROM paintings FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: List the ids of all paintings that are taller than the longest painting created after 1900.\n### Response (TSQL):",
    "sql": "SELECT paintingID FROM paintings WHERE height_mm  >   (SELECT max(height_mm) FROM paintings WHERE YEAR  >  1900)",
    "dsql": "PROJECT paintingID FROM SELECT WHERE height_mm > PROJECT MAX(height_mm) FROM AGGREGATE MAX(height_mm) FROM SELECT WHERE YEAR > 1900 FROM paintings FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the top 3 artists who have the biggest number of painting works whose medium is oil?\n### Response (TSQL):",
    "sql": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.lname, T1.fname FROM AGGREGATE COUNT(*) GROUP BY T2.painterID FROM SELECT WHERE T2.medium = \"oil\" FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Which artists have the most paintings in oil?\n### Response (TSQL):",
    "sql": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID WHERE T2.medium  =  \"oil\" GROUP BY T2.painterID ORDER BY count(*) DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.lname, T1.fname FROM AGGREGATE COUNT(*) GROUP BY T2.painterID FROM SELECT WHERE T2.medium = \"oil\" FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: List the painting id, location and title of the medium oil paintings ordered by year.\n### Response (TSQL):",
    "sql": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR",
    "dsql": "ORDER BY YEAR FROM PROJECT paintingID, title, LOCATION FROM SELECT WHERE medium = \"oil\" FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Order all of the oil paintings by date of creation and list their ids, locations, and titles.\n### Response (TSQL):",
    "sql": "SELECT paintingID ,  title ,  LOCATION FROM paintings WHERE medium  =  \"oil\" ORDER BY YEAR",
    "dsql": "ORDER BY YEAR FROM PROJECT paintingID, title, LOCATION FROM SELECT WHERE medium = \"oil\" FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: List the year, location and title of paintings whose height is longer than 1000 ordered by title.\n### Response (TSQL):",
    "sql": "SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title",
    "dsql": "ORDER BY title FROM PROJECT title, LOCATION, YEAR FROM SELECT WHERE height_mm > 1000 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: List the year, location, and name of all paintings that are taller than 1000 in alphabetical order.\n### Response (TSQL):",
    "sql": "SELECT title ,  LOCATION ,  YEAR FROM paintings WHERE height_mm  >  1000 ORDER BY title",
    "dsql": "ORDER BY title FROM PROJECT title, LOCATION, YEAR FROM SELECT WHERE height_mm > 1000 FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the first and last name of artists who have painting but no sculpture work.\n### Response (TSQL):",
    "sql": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID",
    "dsql": "EXCEPT PROJECT T1.lname, T1.fname FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID WITH PROJECT T3.lname, T3.fname FROM JOIN AS T3 FROM artists WITH AS T4 FROM sculptures ON T3.artistID = T4.sculptorID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: What are the first and last names of the artists who did not sculpt but could paint.\n### Response (TSQL):",
    "sql": "SELECT T1.lname ,  T1.fname FROM artists AS T1 JOIN paintings AS T2 ON T1.artistID  =  T2.painterID EXCEPT SELECT T3.lname ,  T3.fname FROM artists AS T3 JOIN sculptures AS T4 ON T3.artistID  =  T4.sculptorID",
    "dsql": "EXCEPT PROJECT T1.lname, T1.fname FROM JOIN AS T1 FROM artists WITH AS T2 FROM paintings ON T1.artistID = T2.painterID WITH PROJECT T3.lname, T3.fname FROM JOIN AS T3 FROM artists WITH AS T4 FROM sculptures ON T3.artistID = T4.sculptorID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Find the locations that have paintings before 1885 and no work with medium on canvas?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != \"canvas\"",
    "dsql": "PROJECT DISTINCT LOCATION FROM SELECT WHERE YEAR < 1885 AND mediumOn <> \"canvas\" FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Artists ( artistID number, lname text, fname text, birthYear number, deathYear number, PRIMARY KEY(artistID)); CREATE TABLE Paintings ( paintingID number, title text, year number, height_mm number, width_mm number, medium text, mediumOn text, location text, painterID number, PRIMARY KEY(paintingID), FOREIGN KEY(painterID) REFERENCES Artists (artistID)); CREATE TABLE Sculptures ( sculptureID number, title text, year number, medium text, location text, sculptorID number, PRIMARY KEY(sculptureID), FOREIGN KEY(sculptorID) REFERENCES Artists (artistID)); \n### Question: Where do you have paintings that were created before 1885 that are not on canvas?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT LOCATION FROM paintings WHERE YEAR  <  1885 AND mediumOn != \"canvas\"",
    "dsql": "PROJECT DISTINCT LOCATION FROM SELECT WHERE YEAR < 1885 AND mediumOn <> \"canvas\" FROM paintings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: How many races are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM race",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM race "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Count the number of races.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM race",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM race "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: List the winning drivers and winning teams of races in ascending alphabetical order of winning team.\n### Response (TSQL):",
    "sql": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC",
    "dsql": "ORDER BY ASC Winning_team FROM PROJECT Winning_driver, Winning_team FROM race "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the winning drivers and teams of races, ordered alphabetically by team?\n### Response (TSQL):",
    "sql": "SELECT Winning_driver ,  Winning_team FROM race ORDER BY Winning_team ASC",
    "dsql": "ORDER BY ASC Winning_team FROM PROJECT Winning_driver, Winning_team FROM race "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Which winning drivers of races had pole position that is not \"Junior Strous\"?\n### Response (TSQL):",
    "sql": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
    "dsql": "PROJECT Winning_driver FROM SELECT WHERE Pole_Position <> 'Junior Strous' FROM race "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Return the winning drivers of races who did not have the pole position of Junior Strous.\n### Response (TSQL):",
    "sql": "SELECT Winning_driver FROM race WHERE Pole_Position != 'Junior Strous'",
    "dsql": "PROJECT Winning_driver FROM SELECT WHERE Pole_Position <> 'Junior Strous' FROM race "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Who are the constructors of drivers sorted by drivers' age in ascending order?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC",
    "dsql": "ORDER BY ASC Age FROM PROJECT DISTINCT CONSTRUCTOR FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Return the different constructors of drivers, ordered by age ascending.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT CONSTRUCTOR FROM driver ORDER BY Age ASC",
    "dsql": "ORDER BY ASC Age FROM PROJECT DISTINCT CONSTRUCTOR FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the distinct entrant types of drivers aged 20 or older?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20",
    "dsql": "PROJECT DISTINCT Entrant FROM SELECT WHERE Age >= 20 FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Give the different entrant types for drivers at least 20 years old.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT Entrant FROM driver WHERE Age  >=  20",
    "dsql": "PROJECT DISTINCT Entrant FROM SELECT WHERE Age >= 20 FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the maximum and minimum age of driver?\n### Response (TSQL):",
    "sql": "SELECT max(Age) ,  min(Age) FROM driver",
    "dsql": "PROJECT MAX(Age), MIN(Age) FROM AGGREGATE MIN(Age), MAX(Age) FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Return the maximum and minimum age across drivers.\n### Response (TSQL):",
    "sql": "SELECT max(Age) ,  min(Age) FROM driver",
    "dsql": "PROJECT MAX(Age), MIN(Age) FROM AGGREGATE MIN(Age), MAX(Age) FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: How many different engines are used by drivers with age older than 30 or younger than 20?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20",
    "dsql": "PROJECT COUNT(DISTINCT Engine) FROM AGGREGATE COUNT(DISTINCT Engine) FROM SELECT WHERE Age > 30 OR Age < 20 FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Count the number of different engines used by drivers who had an age either over 30 or under 20.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT Engine) FROM driver WHERE Age  >  30 OR Age  <  20",
    "dsql": "PROJECT COUNT(DISTINCT Engine) FROM AGGREGATE COUNT(DISTINCT Engine) FROM SELECT WHERE Age > 30 OR Age < 20 FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: List all names of drivers in descending alphabetical order.\n### Response (TSQL):",
    "sql": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
    "dsql": "ORDER BY DESC Driver_Name FROM PROJECT Driver_Name FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the names of drivers, ordered descending alphabetically?\n### Response (TSQL):",
    "sql": "SELECT Driver_Name FROM driver ORDER BY Driver_Name DESC",
    "dsql": "ORDER BY DESC Driver_Name FROM PROJECT Driver_Name FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Please show the names of drivers and the names of races they participate in.\n### Response (TSQL):",
    "sql": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID",
    "dsql": "PROJECT T1.Driver_Name, T2.Race_Name FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the names of drivers and the names of the races they took part in?\n### Response (TSQL):",
    "sql": "SELECT T1.Driver_Name ,  T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID",
    "dsql": "PROJECT T1.Driver_Name, T2.Race_Name FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Please show the names of drivers and the number of races they participate in.\n### Response (TSQL):",
    "sql": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID",
    "dsql": "PROJECT T1.Driver_Name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.Driver_ID FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: How many races did each driver participate in?\n### Response (TSQL):",
    "sql": "SELECT T1.Driver_Name ,  COUNT(*) FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID",
    "dsql": "PROJECT T1.Driver_Name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.Driver_ID FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Please show the age of the driver who participated in the most number of races.\n### Response (TSQL):",
    "sql": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.Age FROM AGGREGATE COUNT(*) GROUP BY T1.Driver_ID FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What is the age of the driver who raced in the most races?\n### Response (TSQL):",
    "sql": "SELECT T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.Age FROM AGGREGATE COUNT(*) GROUP BY T1.Driver_ID FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Please show the names and ages of the drivers who participated in at least two races.\n### Response (TSQL):",
    "sql": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2",
    "dsql": "PROJECT T1.Driver_Name, T1.Age FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.Driver_ID FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the names and ages of drivers who raced in two or more races?\n### Response (TSQL):",
    "sql": "SELECT T1.Driver_Name ,  T1.Age FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID GROUP BY T1.Driver_ID HAVING COUNT(*)  >=  2",
    "dsql": "PROJECT T1.Driver_Name, T1.Age FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.Driver_ID FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Please list the names of races with drivers aged 26 or older participating.\n### Response (TSQL):",
    "sql": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
    "dsql": "PROJECT T2.Race_Name FROM SELECT WHERE T1.Age >= 26 FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the names of races in which drivers 26 or older took part?\n### Response (TSQL):",
    "sql": "SELECT T2.Race_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE T1.Age  >=  26",
    "dsql": "PROJECT T2.Race_Name FROM SELECT WHERE T1.Age >= 26 FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: List the names of drivers whose constructor is not \"Bugatti\".\n### Response (TSQL):",
    "sql": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\"",
    "dsql": "PROJECT Driver_Name FROM SELECT WHERE CONSTRUCTOR <> \"Bugatti\" FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the names od drivers who did not have the constructor Bugatti?\n### Response (TSQL):",
    "sql": "SELECT Driver_Name FROM driver WHERE CONSTRUCTOR != \"Bugatti\"",
    "dsql": "PROJECT Driver_Name FROM SELECT WHERE CONSTRUCTOR <> \"Bugatti\" FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: List different constructors and the number of drivers that use each constructor.\n### Response (TSQL):",
    "sql": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR",
    "dsql": "PROJECT CONSTRUCTOR, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY CONSTRUCTOR FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: How many drivers use each constructor?\n### Response (TSQL):",
    "sql": "SELECT CONSTRUCTOR ,  COUNT(*) FROM driver GROUP BY CONSTRUCTOR",
    "dsql": "PROJECT CONSTRUCTOR, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY CONSTRUCTOR FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: List the most common type of engine used by drivers.\n### Response (TSQL):",
    "sql": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Engine FROM AGGREGATE COUNT(*) GROUP BY Engine FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What is the most common type of engine?\n### Response (TSQL):",
    "sql": "SELECT Engine FROM driver GROUP BY Engine ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Engine FROM AGGREGATE COUNT(*) GROUP BY Engine FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: List the types of engines that are used by at least two drivers.\n### Response (TSQL):",
    "sql": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
    "dsql": "PROJECT Engine FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY Engine FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the engine types that are used by two or more drivers?\n### Response (TSQL):",
    "sql": "SELECT Engine FROM driver GROUP BY Engine HAVING COUNT(*)  >=  2",
    "dsql": "PROJECT Engine FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY Engine FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: List the names of drivers that do not participate in any race.\n### Response (TSQL):",
    "sql": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
    "dsql": "PROJECT Driver_Name FROM SELECT WHERE Driver_ID NOT IN PROJECT Driver_ID FROM race FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are names of drivers who did not take part in a race?\n### Response (TSQL):",
    "sql": "SELECT Driver_Name FROM driver WHERE Driver_ID NOT IN (SELECT Driver_ID FROM race)",
    "dsql": "PROJECT Driver_Name FROM SELECT WHERE Driver_ID NOT IN PROJECT Driver_ID FROM race FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Show the constructors that are used both by drivers with age lower than 20 and drivers with age over than 30.\n### Response (TSQL):",
    "sql": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30",
    "dsql": "INTERSECT PROJECT CONSTRUCTOR FROM SELECT WHERE Age < 20 FROM driver WITH PROJECT CONSTRUCTOR FROM SELECT WHERE Age > 30 FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the constructors who are used by both drivers who are younger than 20 and drivers older than 30?\n### Response (TSQL):",
    "sql": "SELECT CONSTRUCTOR FROM driver WHERE Age  <  20 INTERSECT SELECT CONSTRUCTOR FROM driver WHERE Age  >  30",
    "dsql": "INTERSECT PROJECT CONSTRUCTOR FROM SELECT WHERE Age < 20 FROM driver WITH PROJECT CONSTRUCTOR FROM SELECT WHERE Age > 30 FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Find the teams that won more than once.\n### Response (TSQL):",
    "sql": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1",
    "dsql": "PROJECT Winning_team FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY Winning_team FROM race "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Which teams won more than 1 race?\n### Response (TSQL):",
    "sql": "SELECT Winning_team FROM race GROUP BY Winning_team HAVING count(*)  >  1",
    "dsql": "PROJECT Winning_team FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY Winning_team FROM race "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: Find the names of drivers who were in both \"James Hinchcliffe\" and \"Carl Skerlong\" pole positions before.\n### Response (TSQL):",
    "sql": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
    "dsql": "INTERSECT PROJECT T1.Driver_Name FROM SELECT WHERE Pole_Position = \"Carl Skerlong\" FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID WITH PROJECT T1.Driver_Name FROM SELECT WHERE Pole_Position = \"James Hinchcliffe\" FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the names of drivers who had both the pole position James Hinchcliffe and the pole position Carl Skerlong?\n### Response (TSQL):",
    "sql": "SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"Carl Skerlong\" INTERSECT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
    "dsql": "INTERSECT PROJECT T1.Driver_Name FROM SELECT WHERE Pole_Position = \"Carl Skerlong\" FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID WITH PROJECT T1.Driver_Name FROM SELECT WHERE Pole_Position = \"James Hinchcliffe\" FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: find the name of drivers who were never in \"James Hinchcliffe\" pole position before.\n### Response (TSQL):",
    "sql": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
    "dsql": "EXCEPT PROJECT Driver_Name FROM driver WITH PROJECT T1.Driver_Name FROM SELECT WHERE Pole_Position = \"James Hinchcliffe\" FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE driver ( Driver_ID number, Driver_Name text, Entrant text, Constructor text, Chassis text, Engine text, Age number, PRIMARY KEY(Driver_ID)); CREATE TABLE race ( Road number, Driver_ID number, Race_Name text, Pole_Position text, Fastest_Lap text, Winning_driver text, Winning_team text, Report text, PRIMARY KEY(Road), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID)); \n### Question: What are the names of drivers except for those who had the pole position James Hinchcliffe?\n### Response (TSQL):",
    "sql": "SELECT Driver_Name FROM driver EXCEPT SELECT T1.Driver_Name FROM driver AS T1 JOIN race AS T2 ON T1.Driver_ID  =  T2.Driver_ID WHERE Pole_Position  =  \"James Hinchcliffe\"",
    "dsql": "EXCEPT PROJECT Driver_Name FROM driver WITH PROJECT T1.Driver_Name FROM SELECT WHERE Pole_Position = \"James Hinchcliffe\" FROM JOIN AS T1 FROM driver WITH AS T2 FROM race ON T1.Driver_ID = T2.Driver_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: How many languages are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM languages",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM languages "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Count the number of languages.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM languages",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM languages "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: List the name of languages in ascending alphabetical order.\n### Response (TSQL):",
    "sql": "SELECT name FROM languages ORDER BY name ASC",
    "dsql": "ORDER BY ASC name FROM PROJECT name FROM languages "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What are the names of languages, in alphabetical order?\n### Response (TSQL):",
    "sql": "SELECT name FROM languages ORDER BY name ASC",
    "dsql": "ORDER BY ASC name FROM PROJECT name FROM languages "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What are the names of languages that contain the word \"ish\"?\n### Response (TSQL):",
    "sql": "SELECT name FROM languages WHERE name LIKE \"%ish%\"",
    "dsql": "PROJECT name FROM SELECT WHERE name LIKE \"%ish%\" FROM languages "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Return the names of langauges that contain the substring \"ish\".\n### Response (TSQL):",
    "sql": "SELECT name FROM languages WHERE name LIKE \"%ish%\"",
    "dsql": "PROJECT name FROM SELECT WHERE name LIKE \"%ish%\" FROM languages "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Show the names of countries in descending order of overall scores.\n### Response (TSQL):",
    "sql": "SELECT name FROM countries ORDER BY overall_score DESC",
    "dsql": "ORDER BY DESC overall_score FROM PROJECT name FROM countries "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What are the names of the countries, ordered descending by overall score?\n### Response (TSQL):",
    "sql": "SELECT name FROM countries ORDER BY overall_score DESC",
    "dsql": "ORDER BY DESC overall_score FROM PROJECT name FROM countries "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What is the average justice scores among countries?\n### Response (TSQL):",
    "sql": "SELECT avg(justice_score) FROM countries",
    "dsql": "PROJECT AVG(justice_score) FROM AGGREGATE AVG(justice_score) FROM countries "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Give the average justice scores across all countries.\n### Response (TSQL):",
    "sql": "SELECT avg(justice_score) FROM countries",
    "dsql": "PROJECT AVG(justice_score) FROM AGGREGATE AVG(justice_score) FROM countries "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What are the maximum and minimum health scores among countries that are not \"Norway\".\n### Response (TSQL):",
    "sql": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\"",
    "dsql": "PROJECT MAX(health_score), MIN(health_score) FROM AGGREGATE MIN(health_score), MAX(health_score) FROM SELECT WHERE name <> \"Norway\" FROM countries "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Return the maximum and minimum health scores across all countries other than Norway.\n### Response (TSQL):",
    "sql": "SELECT max(health_score) ,  min(health_score) FROM countries WHERE name != \"Norway\"",
    "dsql": "PROJECT MAX(health_score), MIN(health_score) FROM AGGREGATE MIN(health_score), MAX(health_score) FROM SELECT WHERE name <> \"Norway\" FROM countries "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: How many different official languages are there?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT language_id) FROM official_languages",
    "dsql": "PROJECT COUNT(DISTINCT language_id) FROM AGGREGATE COUNT(DISTINCT language_id) FROM official_languages "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Count the number of different official languages.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT language_id) FROM official_languages",
    "dsql": "PROJECT COUNT(DISTINCT language_id) FROM AGGREGATE COUNT(DISTINCT language_id) FROM official_languages "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: List names of countries in descending order of education_score.\n### Response (TSQL):",
    "sql": "SELECT name FROM countries ORDER BY education_score DESC",
    "dsql": "ORDER BY DESC education_score FROM PROJECT name FROM countries "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What are the names of the countries, ordered descending by education score?\n### Response (TSQL):",
    "sql": "SELECT name FROM countries ORDER BY education_score DESC",
    "dsql": "ORDER BY DESC education_score FROM PROJECT name FROM countries "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: List the name of the country with the biggest score in politics.\n### Response (TSQL):",
    "sql": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC politics_score FROM PROJECT name FROM countries "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What is the name of the country with the highest politics score?\n### Response (TSQL):",
    "sql": "SELECT name FROM countries ORDER BY politics_score DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC politics_score FROM PROJECT name FROM countries "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Show the names of countries and their official languages.\n### Response (TSQL):",
    "sql": "SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id",
    "dsql": "PROJECT T1.name, T3.name FROM JOIN AS T1 FROM countries WITH JOIN AS T2 FROM official_languages WITH AS T3 FROM languages ON T2.language_id = T3.id ON T1.id = T2.country_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What are the names of the countries, as well as the names of their official langauges?\n### Response (TSQL):",
    "sql": "SELECT T1.name ,  T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id",
    "dsql": "PROJECT T1.name, T3.name FROM JOIN AS T1 FROM countries WITH JOIN AS T2 FROM official_languages WITH AS T3 FROM languages ON T2.language_id = T3.id ON T1.id = T2.country_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Show the official languages and the number of countries speaking each language.\n### Response (TSQL):",
    "sql": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name",
    "dsql": "PROJECT T2.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.name FROM JOIN AS T1 FROM official_languages WITH AS T2 FROM languages ON T1.language_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What are the names of the different official languages, as well as the number of countries that speak each?\n### Response (TSQL):",
    "sql": "SELECT T2.name ,  COUNT(*) FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.name",
    "dsql": "PROJECT T2.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T2.name FROM JOIN AS T1 FROM official_languages WITH AS T2 FROM languages ON T1.language_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Show the official language spoken by the most number of countries.\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM official_languages WITH AS T2 FROM languages ON T1.language_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What is the official language that is most common?\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM official_languages WITH AS T2 FROM languages ON T1.language_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Show the official languages spoken by at least two countries.\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2",
    "dsql": "PROJECT T2.name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM official_languages WITH AS T2 FROM languages ON T1.language_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Which official languages are spoken in two or more countries?\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id HAVING COUNT(*)  >=  2",
    "dsql": "PROJECT T2.name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM official_languages WITH AS T2 FROM languages ON T1.language_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Show the average overall scores of countries whose official language is \"English\".\n### Response (TSQL):",
    "sql": "SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  \"English\"",
    "dsql": "PROJECT AVG(T1.overall_score) FROM AGGREGATE AVG(T1.overall_score) FROM SELECT WHERE T3.name = \"English\" FROM JOIN AS T1 FROM countries WITH JOIN AS T2 FROM official_languages WITH AS T3 FROM languages ON T2.language_id = T3.id ON T1.id = T2.country_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What is the average overall score across countries with English as their official language?\n### Response (TSQL):",
    "sql": "SELECT avg(T1.overall_score) FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T3.name  =  \"English\"",
    "dsql": "PROJECT AVG(T1.overall_score) FROM AGGREGATE AVG(T1.overall_score) FROM SELECT WHERE T3.name = \"English\" FROM JOIN AS T1 FROM countries WITH JOIN AS T2 FROM official_languages WITH AS T3 FROM languages ON T2.language_id = T3.id ON T1.id = T2.country_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Show the three official languages that are most commonly spoken.\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM official_languages WITH AS T2 FROM languages ON T1.language_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What are the names of the three official languages spoken in the most countries?\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM official_languages AS T1 JOIN languages AS T2 ON T1.language_id  =  T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.name FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM official_languages WITH AS T2 FROM languages ON T1.language_id = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Show the official languages sorted in descending order by the average overall scores among countries speaking them.\n### Response (TSQL):",
    "sql": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC",
    "dsql": "ORDER BY DESC AVG(T1.overall_score) FROM PROJECT T3.name FROM AGGREGATE AVG(T1.overall_score), COUNT(*) GROUP BY T3.id FROM JOIN AS T1 FROM countries WITH JOIN AS T2 FROM official_languages WITH AS T3 FROM languages ON T2.language_id = T3.id ON T1.id = T2.country_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What are the names of the official languages, sorted descending by the average overall scores across the countries that correspond to each?\n### Response (TSQL):",
    "sql": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id GROUP BY T3.id ORDER BY avg(T1.overall_score) DESC",
    "dsql": "ORDER BY DESC AVG(T1.overall_score) FROM PROJECT T3.name FROM AGGREGATE AVG(T1.overall_score), COUNT(*) GROUP BY T3.id FROM JOIN AS T1 FROM countries WITH JOIN AS T2 FROM official_languages WITH AS T3 FROM languages ON T2.language_id = T3.id ON T1.id = T2.country_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Show the name of the country that has the greatest number of official languages.\n### Response (TSQL):",
    "sql": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.Name FROM AGGREGATE COUNT(*) GROUP BY T1.id FROM JOIN AS T1 FROM countries WITH AS T2 FROM official_languages ON T1.id = T2.country_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Which country has the greatest number of official languages?\n### Response (TSQL):",
    "sql": "SELECT T1.Name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.Name FROM AGGREGATE COUNT(*) GROUP BY T1.id FROM JOIN AS T1 FROM countries WITH AS T2 FROM official_languages ON T1.id = T2.country_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: List the names of languages that are not the official language of any countries.\n### Response (TSQL):",
    "sql": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
    "dsql": "PROJECT name FROM SELECT WHERE id NOT IN PROJECT language_id FROM official_languages FROM languages "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What are the names of languages that are not the official language of any country?\n### Response (TSQL):",
    "sql": "SELECT name FROM languages WHERE id NOT IN (SELECT language_id FROM official_languages)",
    "dsql": "PROJECT name FROM SELECT WHERE id NOT IN PROJECT language_id FROM official_languages FROM languages "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: List the names of countries that do not have any official language.\n### Response (TSQL):",
    "sql": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
    "dsql": "PROJECT name FROM SELECT WHERE id NOT IN PROJECT country_id FROM official_languages FROM countries "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What are the names of countries that do not have an official language?\n### Response (TSQL):",
    "sql": "SELECT name FROM countries WHERE id NOT IN (SELECT country_id FROM official_languages)",
    "dsql": "PROJECT name FROM SELECT WHERE id NOT IN PROJECT country_id FROM official_languages FROM countries "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: Show the names of languages that are the official language for both countries with overall score greater than 95 and countries with overall score less than than 90.\n### Response (TSQL):",
    "sql": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90",
    "dsql": "INTERSECT PROJECT T3.name FROM SELECT WHERE T1.overall_score > 95 FROM JOIN AS T1 FROM countries WITH JOIN AS T2 FROM official_languages WITH AS T3 FROM languages ON T2.language_id = T3.id ON T1.id = T2.country_id WITH PROJECT T3.name FROM SELECT WHERE T1.overall_score < 90 FROM JOIN AS T1 FROM countries WITH JOIN AS T2 FROM official_languages WITH AS T3 FROM languages ON T2.language_id = T3.id ON T1.id = T2.country_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE languages ( id number, name text, PRIMARY KEY(id)); CREATE TABLE countries ( id number, name text, overall_score number, justice_score number, health_score number, education_score number, economics_score number, politics_score number, PRIMARY KEY(id)); CREATE TABLE official_languages ( language_id number, country_id number, PRIMARY KEY(language_id), FOREIGN KEY(country_id) REFERENCES countries (id), FOREIGN KEY(language_id) REFERENCES languages (id)); \n### Question: What are the names of languages that are the official language not only for countries that have an overall score of above 95, but also for countries that have an overall score below 90?\n### Response (TSQL):",
    "sql": "SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  >  95 INTERSECT SELECT T3.name FROM countries AS T1 JOIN official_languages AS T2 ON T1.id  =  T2.country_id JOIN languages AS T3 ON T2.language_id  =  T3.id WHERE T1.overall_score  <  90",
    "dsql": "INTERSECT PROJECT T3.name FROM SELECT WHERE T1.overall_score > 95 FROM JOIN AS T1 FROM countries WITH JOIN AS T2 FROM official_languages WITH AS T3 FROM languages ON T2.language_id = T3.id ON T1.id = T2.country_id WITH PROJECT T3.name FROM SELECT WHERE T1.overall_score < 90 FROM JOIN AS T1 FROM countries WITH JOIN AS T2 FROM official_languages WITH AS T3 FROM languages ON T2.language_id = T3.id ON T1.id = T2.country_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Which countries and cities are included in addresses?\n### Response (TSQL):",
    "sql": "SELECT country ,  town_city FROM Addresses;",
    "dsql": "PROJECT country, town_city FROM Addresses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the countries and cities for each address?\n### Response (TSQL):",
    "sql": "SELECT country ,  town_city FROM Addresses;",
    "dsql": "PROJECT country, town_city FROM Addresses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: In which states are each of the the properties located?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
    "dsql": "PROJECT DISTINCT T1.county_state_province FROM JOIN AS T1 FROM Addresses WITH AS T2 FROM Properties ON T1.address_id = T2.property_address_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Give the states or provinces corresponding to each property.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.county_state_province FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id;",
    "dsql": "PROJECT DISTINCT T1.county_state_province FROM JOIN AS T1 FROM Addresses WITH AS T2 FROM Properties ON T1.address_id = T2.property_address_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: How is the feature rooftop described?\n### Response (TSQL):",
    "sql": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "dsql": "PROJECT feature_description FROM SELECT WHERE feature_name = 'rooftop' FROM Features "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Return the description of the feature 'rooftop'.\n### Response (TSQL):",
    "sql": "SELECT feature_description FROM Features WHERE feature_name  =  'rooftop';",
    "dsql": "PROJECT feature_description FROM SELECT WHERE feature_name = 'rooftop' FROM Features "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the feature name and description of the most commonly seen feature across properties?\n### Response (TSQL):",
    "sql": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.feature_name, T1.feature_description FROM AGGREGATE COUNT(*) GROUP BY T1.feature_name FROM JOIN AS T1 FROM Features WITH AS T2 FROM Property_Features ON T1.feature_id = T2.feature_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Give the feature name and description for the most common feature across all properties.\n### Response (TSQL):",
    "sql": "SELECT T1.feature_name ,  T1.feature_description FROM Features AS T1 JOIN Property_Features AS T2 ON T1.feature_id  =  T2.feature_id GROUP BY T1.feature_name ORDER BY count(*) DESC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.feature_name, T1.feature_description FROM AGGREGATE COUNT(*) GROUP BY T1.feature_name FROM JOIN AS T1 FROM Features WITH AS T2 FROM Property_Features ON T1.feature_id = T2.feature_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What is the minimum number of rooms in a property?\n### Response (TSQL):",
    "sql": "SELECT min(room_count) FROM Properties;",
    "dsql": "PROJECT MIN(room_count) FROM AGGREGATE MIN(room_count) FROM Properties "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What is the lowest room count across all the properties?\n### Response (TSQL):",
    "sql": "SELECT min(room_count) FROM Properties;",
    "dsql": "PROJECT MIN(room_count) FROM AGGREGATE MIN(room_count) FROM Properties "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: How many properties have 1 parking lot or 1 garage?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE parking_lots = 1 OR garage_yn = 1 FROM Properties "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Count the number of properties that have 1 parking lot or 1 garage.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Properties WHERE parking_lots  =  1 OR garage_yn  =  1;",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE parking_lots = 1 OR garage_yn = 1 FROM Properties "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: For users whose description contain the string 'Mother', which age categories are they in?\n### Response (TSQL):",
    "sql": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";",
    "dsql": "PROJECT T2.age_category_code FROM SELECT WHERE T1.User_category_description LIKE \"%Mother\" FROM JOIN AS T1 FROM Ref_User_Categories WITH AS T2 FROM Users ON T1.user_category_code = T2.user_category_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the age categories for users whose description contains the string Mother?\n### Response (TSQL):",
    "sql": "SELECT T2.age_category_code FROM Ref_User_Categories AS T1 JOIN Users AS T2 ON T1.user_category_code  =  T2.user_category_code WHERE T1.User_category_description LIKE \"%Mother\";",
    "dsql": "PROJECT T2.age_category_code FROM SELECT WHERE T1.User_category_description LIKE \"%Mother\" FROM JOIN AS T1 FROM Ref_User_Categories WITH AS T2 FROM Users ON T1.user_category_code = T2.user_category_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What is the first name of the user who owns the greatest number of properties?\n### Response (TSQL):",
    "sql": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.first_name FROM AGGREGATE COUNT(*) GROUP BY T1.User_id FROM JOIN AS T2 FROM Properties WITH AS T1 FROM Users ON T2.owner_user_id = T1.User_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Return the first name of the user who owns the most properties.\n### Response (TSQL):",
    "sql": "SELECT T1.first_name FROM Users AS T1 JOIN Properties AS T2 ON T2.owner_user_id  =  T1.User_id GROUP BY T1.User_id ORDER BY count(*) DESC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.first_name FROM AGGREGATE COUNT(*) GROUP BY T1.User_id FROM JOIN AS T2 FROM Properties WITH AS T1 FROM Users ON T2.owner_user_id = T1.User_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: List the average room count of the properties with gardens.\n### Response (TSQL):",
    "sql": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
    "dsql": "PROJECT AVG(T3.room_count) FROM AGGREGATE AVG(T3.room_count) FROM SELECT WHERE T2.feature_name = 'garden' FROM JOIN AS T2 FROM Features WITH JOIN AS T1 FROM Property_Features WITH AS T3 FROM Properties ON T1.property_id = T3.property_id ON T1.feature_id = T2.feature_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: On average, how many rooms do properties with garden features have?\n### Response (TSQL):",
    "sql": "SELECT avg(T3.room_count) FROM Property_Features AS T1 JOIN Features AS T2 ON T1.feature_id  =  T2.feature_id JOIN Properties AS T3 ON T1.property_id  =  T3.property_id WHERE T2.feature_name  =  'garden';",
    "dsql": "PROJECT AVG(T3.room_count) FROM AGGREGATE AVG(T3.room_count) FROM SELECT WHERE T2.feature_name = 'garden' FROM JOIN AS T2 FROM Features WITH JOIN AS T1 FROM Property_Features WITH AS T3 FROM Properties ON T1.property_id = T3.property_id ON T1.feature_id = T2.feature_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: In which cities are there any properties equipped with a swimming pool?\n### Response (TSQL):",
    "sql": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
    "dsql": "PROJECT T2.town_city FROM SELECT WHERE T4.feature_name = 'swimming pool' FROM JOIN AS T2 FROM Addresses WITH JOIN AS T1 FROM Properties WITH JOIN AS T3 FROM Property_Features WITH AS T4 FROM Features ON T4.feature_id = T3.feature_id ON T1.property_id = T3.property_id ON T1.property_address_id = T2.address_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Return the cities in which there exist properties that have swimming pools.\n### Response (TSQL):",
    "sql": "SELECT T2.town_city FROM Properties AS T1 JOIN Addresses AS T2 ON T1.property_address_id  =  T2.address_id JOIN Property_Features AS T3 ON T1.property_id  =  T3.property_id JOIN Features AS T4 ON T4.feature_id  =  T3.feature_id WHERE T4.feature_name  =  'swimming pool';",
    "dsql": "PROJECT T2.town_city FROM SELECT WHERE T4.feature_name = 'swimming pool' FROM JOIN AS T2 FROM Addresses WITH JOIN AS T1 FROM Properties WITH JOIN AS T3 FROM Property_Features WITH AS T4 FROM Features ON T4.feature_id = T3.feature_id ON T1.property_id = T3.property_id ON T1.property_address_id = T2.address_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Which property had the lowest price requested by the vendor? List the id and the price.\n### Response (TSQL):",
    "sql": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY vendor_requested_price FROM PROJECT property_id, vendor_requested_price FROM Properties "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What is the id of the property that had the lowest requested price from the vendor, and what was that price?\n### Response (TSQL):",
    "sql": "SELECT property_id ,  vendor_requested_price FROM Properties ORDER BY vendor_requested_price LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY vendor_requested_price FROM PROJECT property_id, vendor_requested_price FROM Properties "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: On average, how many rooms does a property have?\n### Response (TSQL):",
    "sql": "SELECT avg(room_count) FROM Properties;",
    "dsql": "PROJECT AVG(room_count) FROM AGGREGATE AVG(room_count) FROM Properties "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What is the average number of rooms in a property?\n### Response (TSQL):",
    "sql": "SELECT avg(room_count) FROM Properties;",
    "dsql": "PROJECT AVG(room_count) FROM AGGREGATE AVG(room_count) FROM Properties "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: How many kinds of room sizes are listed?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT room_size) FROM Rooms;",
    "dsql": "PROJECT COUNT(DISTINCT room_size) FROM AGGREGATE COUNT(DISTINCT room_size) FROM Rooms "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Return the number of different room sizes.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT room_size) FROM Rooms;",
    "dsql": "PROJECT COUNT(DISTINCT room_size) FROM AGGREGATE COUNT(DISTINCT room_size) FROM Rooms "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the ids of users who have searched at least twice, and what did they search?\n### Response (TSQL):",
    "sql": "SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;",
    "dsql": "PROJECT search_seq, user_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY user_id FROM User_Searches "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Return the ids of users who have performed two or more searches, as well as their search sequence.\n### Response (TSQL):",
    "sql": "SELECT search_seq ,  user_id FROM User_Searches GROUP BY user_id HAVING count(*) >= 2;",
    "dsql": "PROJECT search_seq, user_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY user_id FROM User_Searches "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: When was the time of the latest search by a user?\n### Response (TSQL):",
    "sql": "SELECT max(search_datetime) FROM User_Searches;",
    "dsql": "PROJECT MAX(search_datetime) FROM AGGREGATE MAX(search_datetime) FROM User_Searches "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What was the time of the most recent search?\n### Response (TSQL):",
    "sql": "SELECT max(search_datetime) FROM User_Searches;",
    "dsql": "PROJECT MAX(search_datetime) FROM AGGREGATE MAX(search_datetime) FROM User_Searches "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are all the user searches time and content? Sort the result descending by content.\n### Response (TSQL):",
    "sql": "SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;",
    "dsql": "ORDER BY DESC search_string FROM PROJECT search_datetime, search_string FROM User_Searches "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Return the search strings and corresonding time stamps for all user searches, sorted by search string descending.\n### Response (TSQL):",
    "sql": "SELECT search_datetime ,  search_string FROM User_Searches ORDER BY search_string DESC;",
    "dsql": "ORDER BY DESC search_string FROM PROJECT search_datetime, search_string FROM User_Searches "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the zip codes of properties which do not belong to users who own at most 2 properties?\n### Response (TSQL):",
    "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );",
    "dsql": "PROJECT T1.zip_postcode FROM SELECT WHERE T2.owner_user_id NOT IN PROJECT owner_user_id FROM SELECT WHERE COUNT(*) <= 2 FROM AGGREGATE COUNT(*) GROUP BY owner_user_id FROM Properties FROM JOIN AS T1 FROM Addresses WITH AS T2 FROM Properties ON T1.address_id = T2.property_address_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Return the zip codes for properties not belonging to users who own two or fewer properties.\n### Response (TSQL):",
    "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Properties AS T2 ON T1.address_id  =  T2.property_address_id WHERE T2.owner_user_id NOT IN ( SELECT owner_user_id FROM Properties GROUP BY owner_user_id HAVING count(*)  <=  2 );",
    "dsql": "PROJECT T1.zip_postcode FROM SELECT WHERE T2.owner_user_id NOT IN PROJECT owner_user_id FROM SELECT WHERE COUNT(*) <= 2 FROM AGGREGATE COUNT(*) GROUP BY owner_user_id FROM Properties FROM JOIN AS T1 FROM Addresses WITH AS T2 FROM Properties ON T1.address_id = T2.property_address_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the users making only one search? List both category and user id.\n### Response (TSQL):",
    "sql": "SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;",
    "dsql": "PROJECT T1.user_category_code, T1.user_id FROM SELECT WHERE COUNT(*) = 1 FROM AGGREGATE COUNT(*) GROUP BY T1.user_id FROM JOIN AS T1 FROM Users WITH AS T2 FROM User_Searches ON T1.user_id = T2.user_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the ids of users who have only made one search, and what are their category codes?\n### Response (TSQL):",
    "sql": "SELECT T1.user_category_code ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  =  1;",
    "dsql": "PROJECT T1.user_category_code, T1.user_id FROM SELECT WHERE COUNT(*) = 1 FROM AGGREGATE COUNT(*) GROUP BY T1.user_id FROM JOIN AS T1 FROM Users WITH AS T2 FROM User_Searches ON T1.user_id = T2.user_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What is the age range category of the user who made the first search?\n### Response (TSQL):",
    "sql": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY T2.search_datetime FROM PROJECT T1.age_category_code FROM JOIN AS T1 FROM Users WITH AS T2 FROM User_Searches ON T1.user_id = T2.user_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Return the age category for the user who made the earliest search.\n### Response (TSQL):",
    "sql": "SELECT T1.age_category_code FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id ORDER BY T2.search_datetime LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY T2.search_datetime FROM PROJECT T1.age_category_code FROM JOIN AS T1 FROM Users WITH AS T2 FROM User_Searches ON T1.user_id = T2.user_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Find the login names of all senior citizen users ordered by their first names.\n### Response (TSQL):",
    "sql": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
    "dsql": "ORDER BY first_name FROM PROJECT login_name FROM SELECT WHERE user_category_code = 'Senior Citizen' FROM Users "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the login names of all senior citizens, sorted by first name?\n### Response (TSQL):",
    "sql": "SELECT login_name FROM Users WHERE user_category_code  =  'Senior Citizen' ORDER BY first_name",
    "dsql": "ORDER BY first_name FROM PROJECT login_name FROM SELECT WHERE user_category_code = 'Senior Citizen' FROM Users "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: How many searches do buyers make in total?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.is_buyer = 1 FROM JOIN AS T1 FROM Users WITH AS T2 FROM User_Searches ON T1.user_id = T2.user_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Count the number of searches made by buyers.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id WHERE T1.is_buyer  =  1;",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE T1.is_buyer = 1 FROM JOIN AS T1 FROM Users WITH AS T2 FROM User_Searches ON T1.user_id = T2.user_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: When did the user with login name ratione register?\n### Response (TSQL):",
    "sql": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';",
    "dsql": "PROJECT date_registered FROM SELECT WHERE login_name = 'ratione' FROM Users "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What was the registration date for the user whose login name is ratione?\n### Response (TSQL):",
    "sql": "SELECT date_registered FROM Users WHERE login_name  =  'ratione';",
    "dsql": "PROJECT date_registered FROM SELECT WHERE login_name = 'ratione' FROM Users "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: List the first name, middle name and last name, and log in name of all the seller users, whose seller value is 1.\n### Response (TSQL):",
    "sql": "SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;",
    "dsql": "PROJECT first_name, middle_name, last_name, login_name FROM SELECT WHERE is_seller = 1 FROM Users "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the first, middle, last, and login names for all users who are sellers?\n### Response (TSQL):",
    "sql": "SELECT first_name ,  middle_name ,  last_name ,  login_name FROM Users WHERE is_seller  =  1;",
    "dsql": "PROJECT first_name, middle_name, last_name, login_name FROM SELECT WHERE is_seller = 1 FROM Users "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Where do the Senior Citizens live? List building, street, and the city.\n### Response (TSQL):",
    "sql": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';",
    "dsql": "PROJECT T1.line_1_number_building, T1.line_2_number_street, T1.town_city FROM SELECT WHERE T2.user_category_code = 'Senior Citizen' FROM JOIN AS T1 FROM Addresses WITH AS T2 FROM Users ON T1.address_id = T2.user_address_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the buildings, streets, and cities corresponding to the addresses of senior citizens?\n### Response (TSQL):",
    "sql": "SELECT T1.line_1_number_building ,  T1.line_2_number_street ,  T1.town_city FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.user_category_code  =  'Senior Citizen';",
    "dsql": "PROJECT T1.line_1_number_building, T1.line_2_number_street, T1.town_city FROM SELECT WHERE T2.user_category_code = 'Senior Citizen' FROM JOIN AS T1 FROM Addresses WITH AS T2 FROM Users ON T1.address_id = T2.user_address_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: How many properties are there with at least 2 features?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;",
    "dsql": "PROJECT COUNT(*) FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY property_id FROM Properties "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Count the number of properties with at least two features.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Properties GROUP BY property_id HAVING count(*)  >= 2;",
    "dsql": "PROJECT COUNT(*) FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY property_id FROM Properties "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: How many photos does each property have?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;",
    "dsql": "PROJECT COUNT(*), property_id FROM AGGREGATE COUNT(*) GROUP BY property_id FROM Property_Photos "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Count the number of property photos each property has by id.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  property_id FROM Property_Photos GROUP BY property_id;",
    "dsql": "PROJECT COUNT(*), property_id FROM AGGREGATE COUNT(*) GROUP BY property_id FROM Property_Photos "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: How many photos does each owner has of his or her properties? List user id and number of photos.\n### Response (TSQL):",
    "sql": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;",
    "dsql": "PROJECT T1.owner_user_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.owner_user_id FROM JOIN AS T1 FROM Properties WITH AS T2 FROM Property_Photos ON T1.property_id = T2.property_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the user ids of property owners who have property photos, and how many do each of them have?\n### Response (TSQL):",
    "sql": "SELECT T1.owner_user_id ,  count(*) FROM Properties AS T1 JOIN Property_Photos AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.owner_user_id;",
    "dsql": "PROJECT T1.owner_user_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.owner_user_id FROM JOIN AS T1 FROM Properties WITH AS T2 FROM Property_Photos ON T1.property_id = T2.property_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What is the total max price of the properties owned by single mothers or students?\n### Response (TSQL):",
    "sql": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';",
    "dsql": "PROJECT SUM(T1.price_max) FROM AGGREGATE SUM(T1.price_max) FROM SELECT WHERE T2.user_category_code = 'Single Mother' OR T2.user_category_code = 'Student' FROM JOIN AS T1 FROM Properties WITH AS T2 FROM Users ON T1.owner_user_id = T2.user_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Give the total max price corresponding to any properties owned by single mothers or students.\n### Response (TSQL):",
    "sql": "SELECT sum(T1.price_max) FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T2.user_category_code  =  'Single Mother' OR T2.user_category_code  =  'Student';",
    "dsql": "PROJECT SUM(T1.price_max) FROM AGGREGATE SUM(T1.price_max) FROM SELECT WHERE T2.user_category_code = 'Single Mother' OR T2.user_category_code = 'Student' FROM JOIN AS T1 FROM Properties WITH AS T2 FROM Users ON T1.owner_user_id = T2.user_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the date stamps and property names for each item of property history, ordered by date stamp?\n### Response (TSQL):",
    "sql": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;",
    "dsql": "ORDER BY datestamp FROM PROJECT T1.datestamp, T2.property_name FROM JOIN AS T1 FROM User_Property_History WITH AS T2 FROM Properties ON T1.property_id = T2.property_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Return the date stamp and property name for each property history event, sorted by date stamp.\n### Response (TSQL):",
    "sql": "SELECT T1.datestamp ,  T2.property_name FROM User_Property_History AS T1 JOIN Properties AS T2 ON T1.property_id  =  T2.property_id ORDER BY datestamp;",
    "dsql": "ORDER BY datestamp FROM PROJECT T1.datestamp, T2.property_name FROM JOIN AS T1 FROM User_Property_History WITH AS T2 FROM Properties ON T1.property_id = T2.property_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What is the description of the most common property type? List the description and code.\n### Response (TSQL):",
    "sql": "SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.property_type_description, T1.property_type_code FROM AGGREGATE COUNT(*) GROUP BY T1.property_type_code FROM JOIN AS T1 FROM Ref_Property_Types WITH AS T2 FROM Properties ON T1.property_type_code = T2.property_type_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What is the most common property type, and what is its description.\n### Response (TSQL):",
    "sql": "SELECT T1.property_type_description ,  T1.property_type_code FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code ORDER BY count(*) DESC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.property_type_description, T1.property_type_code FROM AGGREGATE COUNT(*) GROUP BY T1.property_type_code FROM JOIN AS T1 FROM Ref_Property_Types WITH AS T2 FROM Properties ON T1.property_type_code = T2.property_type_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What is the detailed description of the age category code 'Over 60'?\n### Response (TSQL):",
    "sql": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';",
    "dsql": "PROJECT age_category_description FROM SELECT WHERE age_category_code = 'Over 60' FROM Ref_Age_Categories "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Give the category description of the age category 'Over 60'.\n### Response (TSQL):",
    "sql": "SELECT age_category_description FROM Ref_Age_Categories WHERE age_category_code  =  'Over 60';",
    "dsql": "PROJECT age_category_description FROM SELECT WHERE age_category_code = 'Over 60' FROM Ref_Age_Categories "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the different room sizes, and how many of each are there?\n### Response (TSQL):",
    "sql": "SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size",
    "dsql": "PROJECT room_size, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY room_size FROM Rooms "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Return the number of rooms with each different room size.\n### Response (TSQL):",
    "sql": "SELECT room_size ,  count(*) FROM Rooms GROUP BY room_size",
    "dsql": "PROJECT room_size, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY room_size FROM Rooms "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: In which country does the user with first name Robbie live?\n### Response (TSQL):",
    "sql": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
    "dsql": "PROJECT T1.country FROM SELECT WHERE T2.first_name = 'Robbie' FROM JOIN AS T1 FROM Addresses WITH AS T2 FROM Users ON T1.address_id = T2.user_address_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Return the country in which the user with first name Robbie lives.\n### Response (TSQL):",
    "sql": "SELECT T1.country FROM Addresses AS T1 JOIN Users AS T2 ON T1.address_id  =  T2.user_address_id WHERE T2.first_name  =  'Robbie';",
    "dsql": "PROJECT T1.country FROM SELECT WHERE T2.first_name = 'Robbie' FROM JOIN AS T1 FROM Addresses WITH AS T2 FROM Users ON T1.address_id = T2.user_address_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the first, middle and last names of users who own the property they live in?\n### Response (TSQL):",
    "sql": "SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;",
    "dsql": "PROJECT first_name, middle_name, last_name FROM SELECT WHERE T1.property_address_id = T2.user_address_id FROM JOIN AS T1 FROM Properties WITH AS T2 FROM Users ON T1.owner_user_id = T2.user_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: Return the full names of users who live in properties that they own.\n### Response (TSQL):",
    "sql": "SELECT first_name ,  middle_name ,  last_name FROM Properties AS T1 JOIN Users AS T2 ON T1.owner_user_id  =  T2.user_id WHERE T1.property_address_id  =  T2.user_address_id;",
    "dsql": "PROJECT first_name, middle_name, last_name FROM SELECT WHERE T1.property_address_id = T2.user_address_id FROM JOIN AS T1 FROM Properties WITH AS T2 FROM Users ON T1.owner_user_id = T2.user_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: List the search content of the users who do not own a single property.\n### Response (TSQL):",
    "sql": "SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;",
    "dsql": "EXCEPT PROJECT search_string FROM User_Searches WITH PROJECT T1.search_string FROM JOIN AS T1 FROM User_Searches WITH AS T2 FROM Properties ON T1.user_id = T2.owner_user_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What search strings were entered by users who do not own any properties?\n### Response (TSQL):",
    "sql": "SELECT search_string FROM User_Searches EXCEPT SELECT T1.search_string FROM User_Searches AS T1 JOIN Properties AS T2 ON T1.user_id  =  T2.owner_user_id;",
    "dsql": "EXCEPT PROJECT search_string FROM User_Searches WITH PROJECT T1.search_string FROM JOIN AS T1 FROM User_Searches WITH AS T2 FROM Properties ON T1.user_id = T2.owner_user_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: List the last names and ids of users who have at least 2 properties and searched at most twice.\n### Response (TSQL):",
    "sql": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;",
    "dsql": "INTERSECT PROJECT T1.last_name, T1.user_id FROM SELECT WHERE COUNT(*) <= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.user_id FROM JOIN AS T1 FROM Users WITH AS T2 FROM User_Searches ON T1.user_id = T2.user_id WITH PROJECT T3.last_name, T3.user_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T3.user_id FROM JOIN AS T3 FROM Users WITH AS T4 FROM Properties ON T3.user_id = T4.owner_user_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Ref_Age_Categories ( age_category_code text, age_category_description text, PRIMARY KEY(age_category_code)); CREATE TABLE Ref_Property_Types ( property_type_code text, property_type_description text, PRIMARY KEY(property_type_code)); CREATE TABLE Ref_Room_Types ( room_type_code text, room_type_description text, PRIMARY KEY(room_type_code)); CREATE TABLE Ref_User_Categories ( user_category_code text, user_category_description text, PRIMARY KEY(user_category_code)); CREATE TABLE Addresses ( address_id number, line_1_number_building text, line_2_number_street text, line_3_area_locality text, town_city text, zip_postcode text, county_state_province text, country text, other_address_details text, PRIMARY KEY(address_id)); CREATE TABLE Features ( feature_id number, feature_name text, feature_description text, PRIMARY KEY(feature_id)); CREATE TABLE Users ( user_id number, age_category_code text, user_category_code text, user_address_id number, is_buyer text, is_seller text, login_name text, password text, date_registered time, first_name text, middle_name text, last_name text, other_user_details text, PRIMARY KEY(user_id)); CREATE TABLE Properties ( property_id number, property_address_id number, owner_user_id number, property_type_code text, date_on_market time, date_off_market time, property_name text, property_description text, garage_yn text, parking_lots text, room_count text, vendor_requested_price number, price_min number, price_max number, other_property_details text, PRIMARY KEY(property_id), FOREIGN KEY(property_type_code) REFERENCES Ref_Property_Types (property_type_code), FOREIGN KEY(property_address_id) REFERENCES Addresses (address_id), FOREIGN KEY(owner_user_id) REFERENCES Users (user_id)); CREATE TABLE Property_Features ( property_id number, feature_id number, feature_value text, property_feature_description text, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(feature_id) REFERENCES Features (feature_id)); CREATE TABLE Property_Photos ( property_id number, photo_seq number, photo_title text, photo_description text, photo_filename text, FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE Rooms ( property_id number, room_number text, room_type_code text, room_size text, other_room_details text, FOREIGN KEY(room_type_code) REFERENCES Ref_Room_Types (room_type_code), FOREIGN KEY(property_id) REFERENCES Properties (property_id)); CREATE TABLE User_Property_History ( user_id number, property_id number, datestamp time, FOREIGN KEY(property_id) REFERENCES Properties (property_id), FOREIGN KEY(user_id) REFERENCES Users (user_id)); CREATE TABLE User_Searches ( user_id number, search_seq number, search_datetime time, search_string text, FOREIGN KEY(user_id) REFERENCES Users (user_id)); \n### Question: What are the last names and ids of users who have searched two or fewer times, and own two or more properties?\n### Response (TSQL):",
    "sql": "SELECT T1.last_name ,  T1.user_id FROM Users AS T1 JOIN User_Searches AS T2 ON T1.user_id  =  T2.user_id GROUP BY T1.user_id HAVING count(*)  <=  2 INTERSECT SELECT T3.last_name ,  T3.user_id FROM Users AS T3 JOIN Properties AS T4 ON T3.user_id  =  T4.owner_user_id GROUP BY T3.user_id HAVING count(*)  >=  2;",
    "dsql": "INTERSECT PROJECT T1.last_name, T1.user_id FROM SELECT WHERE COUNT(*) <= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.user_id FROM JOIN AS T1 FROM Users WITH AS T2 FROM User_Searches ON T1.user_id = T2.user_id WITH PROJECT T3.last_name, T3.user_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T3.user_id FROM JOIN AS T3 FROM Users WITH AS T4 FROM Properties ON T3.user_id = T4.owner_user_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: How many bikes are heavier than 780 grams?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM bike WHERE weight  >  780",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE weight > 780 FROM bike "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: List the product names and weights of the bikes in ascending order of price.\n### Response (TSQL):",
    "sql": "SELECT product_name ,  weight FROM bike ORDER BY price ASC",
    "dsql": "ORDER BY ASC price FROM PROJECT product_name, weight FROM bike "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: List the heat, name, and nation for all the cyclists.\n### Response (TSQL):",
    "sql": "SELECT heat ,  name ,  nation FROM cyclist",
    "dsql": "PROJECT heat, name, nation FROM cyclist "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: What are the maximum and minimum weight of all bikes?\n### Response (TSQL):",
    "sql": "SELECT max(weight) ,  min(weight) FROM bike",
    "dsql": "PROJECT MAX(weight), MIN(weight) FROM AGGREGATE MIN(weight), MAX(weight) FROM bike "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: What is the average price of the bikes made of material 'Carbon CC'?\n### Response (TSQL):",
    "sql": "SELECT avg(price) FROM bike WHERE material  =  'Carbon CC'",
    "dsql": "PROJECT AVG(price) FROM AGGREGATE AVG(price) FROM SELECT WHERE material = 'Carbon CC' FROM bike "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: What are the name and result of the cyclists not from 'Russia' ?\n### Response (TSQL):",
    "sql": "SELECT name ,  RESULT FROM cyclist WHERE nation != 'Russia'",
    "dsql": "PROJECT name, RESULT FROM SELECT WHERE nation <> 'Russia' FROM cyclist "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: What are the distinct ids and product names of the bikes that are purchased after year 2015?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id WHERE T2.purchase_year  >  2015",
    "dsql": "PROJECT DISTINCT T1.id, T1.product_name FROM SELECT WHERE T2.purchase_year > 2015 FROM JOIN AS T1 FROM bike WITH AS T2 FROM cyclists_own_bikes ON T1.id = T2.bike_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: What are the ids and names of racing bikes that are purchased by at least 4 cyclists?\n### Response (TSQL):",
    "sql": "SELECT T1.id ,  T1.product_name FROM bike AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.bike_id GROUP BY T1.id HAVING count(*)  >=  4",
    "dsql": "PROJECT T1.id, T1.product_name FROM SELECT WHERE COUNT(*) >= 4 FROM AGGREGATE COUNT(*) GROUP BY T1.id FROM JOIN AS T1 FROM bike WITH AS T2 FROM cyclists_own_bikes ON T1.id = T2.bike_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: What are the id and name of the cyclist who owns the most bikes?\n### Response (TSQL):",
    "sql": "SELECT T1.id ,  T1.name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.id, T1.name FROM AGGREGATE COUNT(*) GROUP BY T1.id FROM JOIN AS T1 FROM cyclist WITH AS T2 FROM cyclists_own_bikes ON T1.id = T2.cyclist_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: What are the distinct product names of bikes owned by cyclists from 'Russia' or cyclists from 'Great Britain'?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.nation  =  'Russia' OR T1.nation  =  'Great Britain'",
    "dsql": "PROJECT DISTINCT T3.product_name FROM SELECT WHERE T1.nation = 'Russia' OR T1.nation = 'Great Britain' FROM JOIN AS T1 FROM cyclist WITH JOIN AS T2 FROM cyclists_own_bikes WITH AS T3 FROM bike ON T2.bike_id = T3.id ON T1.id = T2.cyclist_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: How many different levels of heat are there for the cyclists?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT heat) FROM cyclist",
    "dsql": "PROJECT COUNT(DISTINCT heat) FROM AGGREGATE COUNT(DISTINCT heat) FROM cyclist "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: How many cyclists did not purchase any bike after year 2015?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM cyclist WHERE id NOT IN ( SELECT cyclist_id FROM cyclists_own_bikes WHERE purchase_year  >  2015 )",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE id NOT IN PROJECT cyclist_id FROM SELECT WHERE purchase_year > 2015 FROM cyclists_own_bikes FROM cyclist "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: What are the names of distinct racing bikes that are purchased by the cyclists with better results than '4:21.558' ?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T3.product_name FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.result  <  '4:21.558'",
    "dsql": "PROJECT DISTINCT T3.product_name FROM SELECT WHERE T1.result < '4:21.558' FROM JOIN AS T1 FROM cyclist WITH JOIN AS T2 FROM cyclists_own_bikes WITH AS T3 FROM bike ON T2.bike_id = T3.id ON T1.id = T2.cyclist_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: List the name and price of the bike that is owned by both the cyclists named 'Bradley Wiggins' and the cyclist named 'Antonio Tauler'.\n### Response (TSQL):",
    "sql": "SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Bradley Wiggins' INTERSECT SELECT T3.product_name ,  T3.price FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id JOIN bike AS T3 ON T2.bike_id  =  T3.id WHERE T1.name  =  'Antonio Tauler'",
    "dsql": "INTERSECT PROJECT T3.product_name, T3.price FROM SELECT WHERE T1.name = 'Bradley Wiggins' FROM JOIN AS T1 FROM cyclist WITH JOIN AS T2 FROM cyclists_own_bikes WITH AS T3 FROM bike ON T2.bike_id = T3.id ON T1.id = T2.cyclist_id WITH PROJECT T3.product_name, T3.price FROM SELECT WHERE T1.name = 'Antonio Tauler' FROM JOIN AS T1 FROM cyclist WITH JOIN AS T2 FROM cyclists_own_bikes WITH AS T3 FROM bike ON T2.bike_id = T3.id ON T1.id = T2.cyclist_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: Show the name, nation and result for the cyclists who did not purchase any racing bike.\n### Response (TSQL):",
    "sql": "SELECT name ,  nation ,  RESULT FROM cyclist EXCEPT SELECT T1.name ,  T1.nation ,  T1.result FROM cyclist AS T1 JOIN cyclists_own_bikes AS T2 ON T1.id  =  T2.cyclist_id",
    "dsql": "EXCEPT PROJECT name, nation, RESULT FROM cyclist WITH PROJECT T1.name, T1.nation, T1.result FROM JOIN AS T1 FROM cyclist WITH AS T2 FROM cyclists_own_bikes ON T1.id = T2.cyclist_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: What are the names of the bikes that have substring 'fiber' in their material?\n### Response (TSQL):",
    "sql": "SELECT product_name FROM bike WHERE material LIKE \"%fiber%\"",
    "dsql": "PROJECT product_name FROM SELECT WHERE material LIKE \"%fiber%\" FROM bike "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE bike ( id number, product_name text, weight number, price number, material text, PRIMARY KEY(id)); CREATE TABLE cyclist ( id number, heat number, name text, nation text, result number, PRIMARY KEY(id)); CREATE TABLE cyclists_own_bikes ( cyclist_id number, bike_id number, purchase_year number, PRIMARY KEY(cyclist_id), FOREIGN KEY(bike_id) REFERENCES bike (id), FOREIGN KEY(cyclist_id) REFERENCES cyclist (id)); \n### Question: How many bikes does each cyclist own? Order by cyclist id.\n### Response (TSQL):",
    "sql": "SELECT cyclist_id ,  count(*) FROM cyclists_own_bikes GROUP BY cyclist_id ORDER BY cyclist_id",
    "dsql": "ORDER BY cyclist_id FROM PROJECT cyclist_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY cyclist_id FROM cyclists_own_bikes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What is the most expensive cake and its flavor?\n### Response (TSQL):",
    "sql": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC price FROM PROJECT id, flavor FROM SELECT WHERE food = \"Cake\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give the id and flavor of the most expensive cake.\n### Response (TSQL):",
    "sql": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY price DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC price FROM PROJECT id, flavor FROM SELECT WHERE food = \"Cake\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What is the cheapest cookie and its flavor?\n### Response (TSQL):",
    "sql": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY price FROM PROJECT id, flavor FROM SELECT WHERE food = \"Cookie\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What is the id and flavor of the cheapest cookie?\n### Response (TSQL):",
    "sql": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cookie\" ORDER BY price LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY price FROM PROJECT id, flavor FROM SELECT WHERE food = \"Cookie\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Find the ids of goods that have apple flavor.\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE flavor  =  \"Apple\"",
    "dsql": "PROJECT id FROM SELECT WHERE flavor = \"Apple\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the ids with apple flavor?\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE flavor  =  \"Apple\"",
    "dsql": "PROJECT id FROM SELECT WHERE flavor = \"Apple\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the ids of goods that cost less than 3 dollars?\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE price  <  3",
    "dsql": "PROJECT id FROM SELECT WHERE price < 3 FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give the ids of goods that cost less than 3 dollars.\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE price  <  3",
    "dsql": "PROJECT id FROM SELECT WHERE price < 3 FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: List the distinct ids of all customers who bought a cake with lemon flavor?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\"",
    "dsql": "PROJECT DISTINCT T3.CustomerId FROM SELECT WHERE T1.Flavor = \"Lemon\" AND T1.Food = \"Cake\" FROM JOIN AS T1 FROM goods WITH JOIN AS T2 FROM items WITH AS T3 FROM receipts ON T2.Receipt = T3.ReceiptNumber ON T1.Id = T2.Item "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the distinct ids of customers who bought lemon flavored cake?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber WHERE T1.Flavor  =  \"Lemon\" AND T1.Food  =  \"Cake\"",
    "dsql": "PROJECT DISTINCT T3.CustomerId FROM SELECT WHERE T1.Flavor = \"Lemon\" AND T1.Food = \"Cake\" FROM JOIN AS T1 FROM goods WITH JOIN AS T2 FROM items WITH AS T3 FROM receipts ON T2.Receipt = T3.ReceiptNumber ON T1.Id = T2.Item "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: For each type of food, tell me how many customers have ever bought it.\n### Response (TSQL):",
    "sql": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food",
    "dsql": "PROJECT T1.food, COUNT(DISTINCT T3.CustomerId) FROM AGGREGATE COUNT(DISTINCT T3.CustomerId), COUNT(*) GROUP BY T1.food FROM JOIN AS T1 FROM goods WITH JOIN AS T2 FROM items WITH AS T3 FROM receipts ON T2.Receipt = T3.ReceiptNumber ON T1.Id = T2.Item "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: How many customers have bought each food?\n### Response (TSQL):",
    "sql": "SELECT T1.food ,  count(DISTINCT T3.CustomerId) FROM goods AS T1 JOIN items AS T2 ON T1.Id  =  T2.Item JOIN receipts AS T3 ON T2.Receipt  =  T3.ReceiptNumber GROUP BY T1.food",
    "dsql": "PROJECT T1.food, COUNT(DISTINCT T3.CustomerId) FROM AGGREGATE COUNT(DISTINCT T3.CustomerId), COUNT(*) GROUP BY T1.food FROM JOIN AS T1 FROM goods WITH JOIN AS T2 FROM items WITH AS T3 FROM receipts ON T2.Receipt = T3.ReceiptNumber ON T1.Id = T2.Item "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Find the id of customers who shopped at the bakery at least 15 times.\n### Response (TSQL):",
    "sql": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
    "dsql": "PROJECT CustomerId FROM SELECT WHERE COUNT(*) >= 15 FROM AGGREGATE COUNT(*) GROUP BY CustomerId FROM receipts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the customer ids of customers who have at least 15 receipts?\n### Response (TSQL):",
    "sql": "SELECT CustomerId FROM receipts GROUP BY CustomerId HAVING count(*)  >=  15",
    "dsql": "PROJECT CustomerId FROM SELECT WHERE COUNT(*) >= 15 FROM AGGREGATE COUNT(*) GROUP BY CustomerId FROM receipts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What is the last name of the customers who shopped at the bakery more than 10 times?\n### Response (TSQL):",
    "sql": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
    "dsql": "PROJECT T2.LastName FROM SELECT WHERE COUNT(*) > 10 FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM receipts WITH AS T2 FROM customers ON T1.CustomerId = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give the last names of customers who have been to the bakery more than 10 times?\n### Response (TSQL):",
    "sql": "SELECT T2.LastName FROM receipts AS T1 JOIN customers AS T2 ON T1.CustomerId  =  T2.id GROUP BY T2.id HAVING count(*)  >  10",
    "dsql": "PROJECT T2.LastName FROM SELECT WHERE COUNT(*) > 10 FROM AGGREGATE COUNT(*) GROUP BY T2.id FROM JOIN AS T1 FROM receipts WITH AS T2 FROM customers ON T1.CustomerId = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: How many types of Cake does this bakery sell?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE food = \"Cake\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Count the number of types of cake this bakery sells.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM goods WHERE food  =  \"Cake\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE food = \"Cake\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: List all the flavors of Croissant available in this bakery.\n### Response (TSQL):",
    "sql": "SELECT flavor FROM goods WHERE food  =  \"Croissant\"",
    "dsql": "PROJECT flavor FROM SELECT WHERE food = \"Croissant\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are all the flavors of croissant?\n### Response (TSQL):",
    "sql": "SELECT flavor FROM goods WHERE food  =  \"Croissant\"",
    "dsql": "PROJECT flavor FROM SELECT WHERE food = \"Croissant\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give me a list of all the distinct items bought by the customer number 15.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
    "dsql": "PROJECT DISTINCT T1.item FROM SELECT WHERE T2.CustomerId = 15 FROM JOIN AS T1 FROM items WITH AS T2 FROM receipts ON T1.receipt = T2.ReceiptNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are all the distinct items bought by customer 15?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.item FROM items AS T1 JOIN receipts AS T2 ON T1.receipt  =  T2.ReceiptNumber WHERE T2.CustomerId  =  15",
    "dsql": "PROJECT DISTINCT T1.item FROM SELECT WHERE T2.CustomerId = 15 FROM JOIN AS T1 FROM items WITH AS T2 FROM receipts ON T1.receipt = T2.ReceiptNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: For each type of food, what are the average, maximum and minimum price?\n### Response (TSQL):",
    "sql": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food",
    "dsql": "PROJECT food, AVG(price), MAX(price), MIN(price) FROM AGGREGATE MAX(price), MIN(price), AVG(price), COUNT(*) GROUP BY food FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the average, minimum and maximum prices for each food?\n### Response (TSQL):",
    "sql": "SELECT food ,  avg(price) ,  max(price) ,  min(price) FROM goods GROUP BY food",
    "dsql": "PROJECT food, AVG(price), MAX(price), MIN(price) FROM AGGREGATE MAX(price), MIN(price), AVG(price), COUNT(*) GROUP BY food FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Find the receipt numbers where both Cake and Cookie were bought.\n### Response (TSQL):",
    "sql": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\"",
    "dsql": "INTERSECT PROJECT T1.receipt FROM SELECT WHERE T2.food = \"Cake\" FROM JOIN AS T1 FROM items WITH AS T2 FROM goods ON T1.item = T2.id WITH PROJECT T1.receipt FROM SELECT WHERE T2.food = \"Cookie\" FROM JOIN AS T1 FROM items WITH AS T2 FROM goods ON T1.item = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the receipt numbers for instances where both cakes and cookies were purchased?\n### Response (TSQL):",
    "sql": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cake\" INTERSECT SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.food  =  \"Cookie\"",
    "dsql": "INTERSECT PROJECT T1.receipt FROM SELECT WHERE T2.food = \"Cake\" FROM JOIN AS T1 FROM items WITH AS T2 FROM goods ON T1.item = T2.id WITH PROJECT T1.receipt FROM SELECT WHERE T2.food = \"Cookie\" FROM JOIN AS T1 FROM items WITH AS T2 FROM goods ON T1.item = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Find all the receipt numbers in which customer with last name LOGAN purchased Croissant.\n### Response (TSQL):",
    "sql": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
    "dsql": "PROJECT T1.ReceiptNumber FROM SELECT WHERE T3.food = \"Croissant\" AND T4.LastName = 'LOGAN' FROM JOIN AS T1 FROM receipts WITH JOIN AS T2 FROM items WITH JOIN AS T3 FROM goods WITH AS T1 FROM receipts ON T4.Id = T1.CustomerId ON T2.item = T3.id ON T1.ReceiptNumber = T2.receipt "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the receipt numbers for a customer with the last name Logan who purchased a croissant?\n### Response (TSQL):",
    "sql": "SELECT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id JOIN customers AS T4 ON T4.Id  =  T1.CustomerId WHERE T3.food  =  \"Croissant\" AND T4.LastName  =  'LOGAN'",
    "dsql": "PROJECT T1.ReceiptNumber FROM SELECT WHERE T3.food = \"Croissant\" AND T4.LastName = 'LOGAN' FROM JOIN AS T1 FROM receipts WITH JOIN AS T2 FROM items WITH JOIN AS T3 FROM goods WITH AS T1 FROM receipts ON T4.Id = T1.CustomerId ON T2.item = T3.id ON T1.ReceiptNumber = T2.receipt "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What is the receipt number and date of the receipt in which the most expensive item was bought?\n### Response (TSQL):",
    "sql": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC T3.price FROM PROJECT T1.ReceiptNumber, T1.Date FROM JOIN AS T1 FROM receipts WITH JOIN AS T2 FROM items WITH AS T3 FROM goods ON T2.item = T3.id ON T1.ReceiptNumber = T2.receipt "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What is the receipt number and date corresponding to the receipt for which the most expensive item was purchased?\n### Response (TSQL):",
    "sql": "SELECT T1.ReceiptNumber ,  T1.Date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id ORDER BY T3.price DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC T3.price FROM PROJECT T1.ReceiptNumber, T1.Date FROM JOIN AS T1 FROM receipts WITH JOIN AS T2 FROM items WITH AS T3 FROM goods ON T2.item = T3.id ON T1.ReceiptNumber = T2.receipt "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What is the item that was bought the least number of times?\n### Response (TSQL):",
    "sql": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT item FROM AGGREGATE COUNT(*) GROUP BY item FROM items "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Which item was bought the fewest times?\n### Response (TSQL):",
    "sql": "SELECT item FROM items GROUP BY item ORDER BY count(*) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT item FROM AGGREGATE COUNT(*) GROUP BY item FROM items "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: How many goods are available for each food type?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  food FROM goods GROUP BY food",
    "dsql": "PROJECT COUNT(*), food FROM AGGREGATE COUNT(*) GROUP BY food FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Count the number of goods for each food type.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  food FROM goods GROUP BY food",
    "dsql": "PROJECT COUNT(*), food FROM AGGREGATE COUNT(*) GROUP BY food FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What is the average price for each food type?\n### Response (TSQL):",
    "sql": "SELECT avg(price) ,  food FROM goods GROUP BY food",
    "dsql": "PROJECT AVG(price), food FROM AGGREGATE AVG(price), COUNT(*) GROUP BY food FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give the average price for each food type.\n### Response (TSQL):",
    "sql": "SELECT avg(price) ,  food FROM goods GROUP BY food",
    "dsql": "PROJECT AVG(price), food FROM AGGREGATE AVG(price), COUNT(*) GROUP BY food FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are ids of the goods that have Apricot flavor and are cheaper than 5 dollars?\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5",
    "dsql": "PROJECT id FROM SELECT WHERE flavor = \"Apricot\" AND price < 5 FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give the ids for goods that have Apricot flavor and have a price lower than 5 dollars.\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE flavor  =  \"Apricot\" AND price  <  5",
    "dsql": "PROJECT id FROM SELECT WHERE flavor = \"Apricot\" AND price < 5 FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Find flavor of cakes that cost more than 10 dollars.\n### Response (TSQL):",
    "sql": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10",
    "dsql": "PROJECT flavor FROM SELECT WHERE food = \"Cake\" AND price > 10 FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the flavors of cakes that cost more than 10 dollars?\n### Response (TSQL):",
    "sql": "SELECT flavor FROM goods WHERE food  =  \"Cake\" AND price  >  10",
    "dsql": "PROJECT flavor FROM SELECT WHERE food = \"Cake\" AND price > 10 FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give me the distinct id and price for all goods whose price is below the average of all goods?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)",
    "dsql": "PROJECT DISTINCT id, price FROM SELECT WHERE price < PROJECT AVG(price) FROM AGGREGATE AVG(price) FROM goods FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the distinct ids and prices for goods that cost less than the average good?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT id ,  price FROM goods WHERE price  <  (SELECT avg(price) FROM goods)",
    "dsql": "PROJECT DISTINCT id, price FROM SELECT WHERE price < PROJECT AVG(price) FROM AGGREGATE AVG(price) FROM goods FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the distinct ids of all goods that are cheaper than some goods of type Tart?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")",
    "dsql": "PROJECT DISTINCT id FROM SELECT WHERE price < PROJECT MAX(price) FROM AGGREGATE MAX(price) FROM SELECT WHERE food = \"Tart\" FROM goods FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give the distinct ids for goods that cost less than any Tart.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT id FROM goods WHERE price  <  (SELECT max(price) FROM goods WHERE food  =  \"Tart\")",
    "dsql": "PROJECT DISTINCT id FROM SELECT WHERE price < PROJECT MAX(price) FROM AGGREGATE MAX(price) FROM SELECT WHERE food = \"Tart\" FROM goods FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: List distinct receipt numbers for which someone bought a good that costs more than 13 dollars.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13",
    "dsql": "PROJECT DISTINCT T1.ReceiptNumber FROM SELECT WHERE T3.price > 13 FROM JOIN AS T1 FROM receipts WITH JOIN AS T2 FROM items WITH AS T3 FROM goods ON T2.item = T3.id ON T1.ReceiptNumber = T2.receipt "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What distinct receipt numbers correspond to someone who bought a good that costs more than 13 dollars?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.ReceiptNumber FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  13",
    "dsql": "PROJECT DISTINCT T1.ReceiptNumber FROM SELECT WHERE T3.price > 13 FROM JOIN AS T1 FROM receipts WITH JOIN AS T2 FROM items WITH AS T3 FROM goods ON T2.item = T3.id ON T1.ReceiptNumber = T2.receipt "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: On which date did some customer buy a good that costs more than 15 dollars?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
    "dsql": "PROJECT DISTINCT T1.date FROM SELECT WHERE T3.price > 15 FROM JOIN AS T1 FROM receipts WITH JOIN AS T2 FROM items WITH AS T3 FROM goods ON T2.item = T3.id ON T1.ReceiptNumber = T2.receipt "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Which date corresponds to when a customer purchased a good costing over 15 dollars?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.date FROM receipts AS T1 JOIN items AS T2 ON T1.ReceiptNumber  =  T2.receipt JOIN goods AS T3 ON T2.item  =  T3.id WHERE T3.price  >  15",
    "dsql": "PROJECT DISTINCT T1.date FROM SELECT WHERE T3.price > 15 FROM JOIN AS T1 FROM receipts WITH JOIN AS T2 FROM items WITH AS T3 FROM goods ON T2.item = T3.id ON T1.ReceiptNumber = T2.receipt "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give me the list of ids of all goods whose id has \"APP\".\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
    "dsql": "PROJECT id FROM SELECT WHERE id LIKE \"%APP%\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are all the ids of goods with an id which contains \"APP\"?\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE id LIKE \"%APP%\"",
    "dsql": "PROJECT id FROM SELECT WHERE id LIKE \"%APP%\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Which good has \"70\" in its id? And what is its price?\n### Response (TSQL):",
    "sql": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\"",
    "dsql": "PROJECT id, price FROM SELECT WHERE id LIKE \"%70%\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the id and price for the good with \"70\" in its id?\n### Response (TSQL):",
    "sql": "SELECT id ,  price FROM goods WHERE id LIKE \"%70%\"",
    "dsql": "PROJECT id, price FROM SELECT WHERE id LIKE \"%70%\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: List the last names of all customers in an alphabetical order.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT LastName FROM customers ORDER BY LastName",
    "dsql": "ORDER BY LastName FROM PROJECT DISTINCT LastName FROM customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the last names of the customers in alphabetical order?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT LastName FROM customers ORDER BY LastName",
    "dsql": "ORDER BY LastName FROM PROJECT DISTINCT LastName FROM customers "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Return the ordered list of all good ids.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT id FROM goods ORDER BY id",
    "dsql": "ORDER BY id FROM PROJECT DISTINCT id FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Order the distinct good ids.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT id FROM goods ORDER BY id",
    "dsql": "ORDER BY id FROM PROJECT DISTINCT id FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Find all receipts in which either apple flavor pie was bought or customer id 12 shopped.\n### Response (TSQL):",
    "sql": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12",
    "dsql": "UNION PROJECT T1.receipt FROM SELECT WHERE T2.flavor = \"Apple\" AND T2.food = \"Pie\" FROM JOIN AS T1 FROM items WITH AS T2 FROM goods ON T1.item = T2.id WITH PROJECT ReceiptNumber FROM SELECT WHERE CustomerId = 12 FROM receipts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the receipt numbers for which either an apple flavor pie was purchased or the customer with id 12 shopped?\n### Response (TSQL):",
    "sql": "SELECT T1.receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Apple\" AND T2.food  =  \"Pie\" UNION SELECT ReceiptNumber FROM receipts WHERE CustomerId  =  12",
    "dsql": "UNION PROJECT T1.receipt FROM SELECT WHERE T2.flavor = \"Apple\" AND T2.food = \"Pie\" FROM JOIN AS T1 FROM items WITH AS T2 FROM goods ON T1.item = T2.id WITH PROJECT ReceiptNumber FROM SELECT WHERE CustomerId = 12 FROM receipts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Find all receipts which has the latest date. Also tell me that date.\n### Response (TSQL):",
    "sql": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
    "dsql": "PROJECT ReceiptNumber, date FROM SELECT WHERE date = LIMIT 1 FROM ORDER BY DESC date FROM PROJECT date FROM receipts FROM receipts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What is the receipt number with the latest date, and what is that date?\n### Response (TSQL):",
    "sql": "SELECT ReceiptNumber ,  date FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date DESC LIMIT 1)",
    "dsql": "PROJECT ReceiptNumber, date FROM SELECT WHERE date = LIMIT 1 FROM ORDER BY DESC date FROM PROJECT date FROM receipts FROM receipts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Find all receipts which either has the earliest date or has a good with price above 10.\n### Response (TSQL):",
    "sql": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
    "dsql": "UNION PROJECT T1.Receipt FROM SELECT WHERE T2.price > 10 FROM JOIN AS T1 FROM items WITH AS T2 FROM goods ON T1.item = T2.id WITH PROJECT ReceiptNumber FROM SELECT WHERE date = LIMIT 1 FROM ORDER BY date FROM PROJECT date FROM receipts FROM receipts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are all the receipt numbers that have a good with a price above 10 or have the earliest date?\n### Response (TSQL):",
    "sql": "SELECT T1.Receipt FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.price  >  10 UNION SELECT ReceiptNumber FROM receipts WHERE date  =  (SELECT date FROM receipts ORDER BY date LIMIT 1)",
    "dsql": "UNION PROJECT T1.Receipt FROM SELECT WHERE T2.price > 10 FROM JOIN AS T1 FROM items WITH AS T2 FROM goods ON T1.item = T2.id WITH PROJECT ReceiptNumber FROM SELECT WHERE date = LIMIT 1 FROM ORDER BY date FROM PROJECT date FROM receipts FROM receipts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the ids of Cookie and Cake that cost between 3 and 7 dollars.\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
    "dsql": "PROJECT id FROM SELECT WHERE food = \"Cookie\" OR food = \"Cake\" AND price BETWEEN 3 AND 7 FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give the ids of Cookies or Cakes that cost between 3 and 7 dollars.\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE food  =  \"Cookie\" OR food  =  \"Cake\" AND price BETWEEN 3 AND 7",
    "dsql": "PROJECT id FROM SELECT WHERE food = \"Cookie\" OR food = \"Cake\" AND price BETWEEN 3 AND 7 FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Find the first name and last name of a customer who visited on the earliest date.\n### Response (TSQL):",
    "sql": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY T2.date FROM PROJECT T1.FirstName, T1.LastName FROM JOIN AS T1 FROM customers WITH AS T2 FROM receipts ON T1.id = T2.CustomerId "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What is the full name of the customer who visited on the earliest date?\n### Response (TSQL):",
    "sql": "SELECT T1.FirstName ,  T1.LastName FROM customers AS T1 JOIN receipts AS T2 ON T1.id  =  T2.CustomerId ORDER BY T2.date LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY T2.date FROM PROJECT T1.FirstName, T1.LastName FROM JOIN AS T1 FROM customers WITH AS T2 FROM receipts ON T1.id = T2.CustomerId "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What is average price of goods whose flavor is blackberry or blueberry?\n### Response (TSQL):",
    "sql": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\"",
    "dsql": "PROJECT AVG(price) FROM AGGREGATE AVG(price) FROM SELECT WHERE flavor = \"Blackberry\" OR flavor = \"Blueberry\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the average prices of goods with blackberry or blueberry flavor?\n### Response (TSQL):",
    "sql": "SELECT avg(price) FROM goods WHERE flavor  =  \"Blackberry\" OR flavor  =  \"Blueberry\"",
    "dsql": "PROJECT AVG(price) FROM AGGREGATE AVG(price) FROM SELECT WHERE flavor = \"Blackberry\" OR flavor = \"Blueberry\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Return the cheapest price for goods with cheese flavor.\n### Response (TSQL):",
    "sql": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
    "dsql": "PROJECT MIN(price) FROM AGGREGATE MIN(price) FROM SELECT WHERE flavor = \"Cheese\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What is the cheapest good with cheese flavor?\n### Response (TSQL):",
    "sql": "SELECT min(price) FROM goods WHERE flavor  =  \"Cheese\"",
    "dsql": "PROJECT MIN(price) FROM AGGREGATE MIN(price) FROM SELECT WHERE flavor = \"Cheese\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are highest, lowest, and average prices of goods, grouped and ordered by flavor?\n### Response (TSQL):",
    "sql": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor",
    "dsql": "ORDER BY flavor FROM PROJECT MAX(price), MIN(price), AVG(price), flavor FROM AGGREGATE MAX(price), MIN(price), AVG(price), COUNT(*) GROUP BY flavor FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the maximum, minimum, and average prices of goods of each flavor, ordered by flavor?\n### Response (TSQL):",
    "sql": "SELECT max(price) ,  min(price) ,  avg(price) ,  flavor FROM goods GROUP BY flavor ORDER BY flavor",
    "dsql": "ORDER BY flavor FROM PROJECT MAX(price), MIN(price), AVG(price), flavor FROM AGGREGATE MAX(price), MIN(price), AVG(price), COUNT(*) GROUP BY flavor FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Return the lowest and highest prices of goods grouped and ordered by food type.\n### Response (TSQL):",
    "sql": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food",
    "dsql": "ORDER BY food FROM PROJECT MIN(price), MAX(price), food FROM AGGREGATE MAX(price), MIN(price), COUNT(*) GROUP BY food FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the minimum and maximum prices of food goods, ordered by food?\n### Response (TSQL):",
    "sql": "SELECT min(price) ,  max(price) ,  food FROM goods GROUP BY food ORDER BY food",
    "dsql": "ORDER BY food FROM PROJECT MIN(price), MAX(price), food FROM AGGREGATE MAX(price), MIN(price), COUNT(*) GROUP BY food FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Find the top three dates with the most receipts.\n### Response (TSQL):",
    "sql": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC COUNT(*) FROM PROJECT date FROM AGGREGATE COUNT(*) GROUP BY date FROM receipts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the three dates for which the most receipts were given?\n### Response (TSQL):",
    "sql": "SELECT date FROM receipts GROUP BY date ORDER BY count(*) DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC COUNT(*) FROM PROJECT date FROM AGGREGATE COUNT(*) GROUP BY date FROM receipts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Which customer shopped most often? How many times?\n### Response (TSQL):",
    "sql": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT CustomerId, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY CustomerId FROM receipts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give the customer id of the customer that made the most purchases, as well as the number of purchases made.\n### Response (TSQL):",
    "sql": "SELECT CustomerId ,  count(*) FROM receipts GROUP BY CustomerId ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT CustomerId, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY CustomerId FROM receipts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: For each date, return how many distinct customers visited on that day.\n### Response (TSQL):",
    "sql": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
    "dsql": "PROJECT date, COUNT(DISTINCT CustomerId) FROM AGGREGATE COUNT(*), COUNT(DISTINCT CustomerId) GROUP BY date FROM receipts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: How many cusomters visited on each date?\n### Response (TSQL):",
    "sql": "SELECT date ,  COUNT (DISTINCT CustomerId) FROM receipts GROUP BY date",
    "dsql": "PROJECT date, COUNT(DISTINCT CustomerId) FROM AGGREGATE COUNT(*), COUNT(DISTINCT CustomerId) GROUP BY date FROM receipts "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give me the first name and last name of customers who have bought apple flavor Tart.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
    "dsql": "PROJECT DISTINCT T4.FirstName, T4.LastName FROM SELECT WHERE T1.flavor = \"Apple\" AND T1.food = \"Tart\" FROM JOIN AS T1 FROM goods WITH JOIN AS T2 FROM items WITH JOIN AS T3 FROM receipts WITH AS T4 FROM customers ON T3.CustomerId = T4.id ON T2.receipt = T3.ReceiptNumber ON T1.id = T2.item "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the full names of customers who bought apple flavored Tarts?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T4.FirstName ,  T4.LastName FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber JOIN customers AS T4 ON T3.CustomerId  =  T4.id WHERE T1.flavor  =  \"Apple\" AND T1.food  =  \"Tart\"",
    "dsql": "PROJECT DISTINCT T4.FirstName, T4.LastName FROM SELECT WHERE T1.flavor = \"Apple\" AND T1.food = \"Tart\" FROM JOIN AS T1 FROM goods WITH JOIN AS T2 FROM items WITH JOIN AS T3 FROM receipts WITH AS T4 FROM customers ON T3.CustomerId = T4.id ON T2.receipt = T3.ReceiptNumber ON T1.id = T2.item "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the ids of Cookies whose price is lower than any Croissant?\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
    "dsql": "PROJECT id FROM SELECT WHERE food = \"Cookie\" AND price < PROJECT MIN(price) FROM AGGREGATE MIN(price) FROM SELECT WHERE food = 'Croissant' FROM goods FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give the ids of cookes that are cheaper than any croissant.\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE food  =  \"Cookie\" AND price  <  (SELECT min(price) FROM goods WHERE food  =  'Croissant')",
    "dsql": "PROJECT id FROM SELECT WHERE food = \"Cookie\" AND price < PROJECT MIN(price) FROM AGGREGATE MIN(price) FROM SELECT WHERE food = 'Croissant' FROM goods FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give me the ids of Cakes whose price is at least as much as the average price of Tart?\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")",
    "dsql": "PROJECT id FROM SELECT WHERE food = \"Cake\" AND price >= PROJECT AVG(price) FROM AGGREGATE AVG(price) FROM SELECT WHERE food = \"Tart\" FROM goods FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the ids of cakes that are at least as expensive as the average Tart?\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE food  =  \"Cake\" AND price  >=  (SELECT avg(price) FROM goods WHERE food  =  \"Tart\")",
    "dsql": "PROJECT id FROM SELECT WHERE food = \"Cake\" AND price >= PROJECT AVG(price) FROM AGGREGATE AVG(price) FROM SELECT WHERE food = \"Tart\" FROM goods FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the ids of goods whose price is above twice the average price of all goods?\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
    "dsql": "PROJECT id FROM SELECT WHERE price > PROJECT AVG(price) FROM AGGREGATE AVG(price) FROM goods FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give the ids of goods that are more than twice as expensive as the average good.\n### Response (TSQL):",
    "sql": "SELECT id FROM goods WHERE price  >  (SELECT avg(price) FROM goods)",
    "dsql": "PROJECT id FROM SELECT WHERE price > PROJECT AVG(price) FROM AGGREGATE AVG(price) FROM goods FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: List the id, flavor and type of food of goods ordered by price.\n### Response (TSQL):",
    "sql": "SELECT id ,  flavor ,  food FROM goods ORDER BY price",
    "dsql": "ORDER BY price FROM PROJECT id, flavor, food FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the ids, flavors, and food types of goods, ordered by price?\n### Response (TSQL):",
    "sql": "SELECT id ,  flavor ,  food FROM goods ORDER BY price",
    "dsql": "ORDER BY price FROM PROJECT id, flavor, food FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Return a list of the id and flavor for Cakes ordered by flavor.\n### Response (TSQL):",
    "sql": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
    "dsql": "ORDER BY flavor FROM PROJECT id, flavor FROM SELECT WHERE food = \"Cake\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the ids and flavors of cakes, ordered by flavor?\n### Response (TSQL):",
    "sql": "SELECT id ,  flavor FROM goods WHERE food  =  \"Cake\" ORDER BY flavor",
    "dsql": "ORDER BY flavor FROM PROJECT id, flavor FROM SELECT WHERE food = \"Cake\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Find all the items that have chocolate flavor but were not bought more than 10 times.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10",
    "dsql": "PROJECT DISTINCT T1.item FROM SELECT WHERE COUNT(*) <= 10 FROM AGGREGATE COUNT(*) GROUP BY item FROM SELECT WHERE T2.flavor = \"Chocolate\" FROM JOIN AS T1 FROM items WITH AS T2 FROM goods ON T1.item = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the items with chocolate flavor that were purchased at most 10 times.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.item FROM items AS T1 JOIN goods AS T2 ON T1.item  =  T2.id WHERE T2.flavor  =  \"Chocolate\" GROUP BY item HAVING count(*)  <=  10",
    "dsql": "PROJECT DISTINCT T1.item FROM SELECT WHERE COUNT(*) <= 10 FROM AGGREGATE COUNT(*) GROUP BY item FROM SELECT WHERE T2.flavor = \"Chocolate\" FROM JOIN AS T1 FROM items WITH AS T2 FROM goods ON T1.item = T2.id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the flavors available for Cake but not for Tart?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
    "dsql": "EXCEPT PROJECT DISTINCT flavor FROM SELECT WHERE food = \"Cake\" FROM goods WITH PROJECT DISTINCT flavor FROM SELECT WHERE food = \"Tart\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give the flavors of Cakes that are not available for Tart.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT flavor FROM goods WHERE food  =  \"Cake\" EXCEPT SELECT DISTINCT flavor FROM goods WHERE food  =  \"Tart\"",
    "dsql": "EXCEPT PROJECT DISTINCT flavor FROM SELECT WHERE food = \"Cake\" FROM goods WITH PROJECT DISTINCT flavor FROM SELECT WHERE food = \"Tart\" FROM goods "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What is the three most popular goods in this bakery?\n### Response (TSQL):",
    "sql": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC COUNT(*) FROM PROJECT item FROM AGGREGATE COUNT(*) GROUP BY item FROM items "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Give the three most purchased items at this bakery.\n### Response (TSQL):",
    "sql": "SELECT item FROM items GROUP BY item ORDER BY COUNT (*) DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC COUNT(*) FROM PROJECT item FROM AGGREGATE COUNT(*) GROUP BY item FROM items "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Find the ids of customers who have spent more than 150 dollars in total.\n### Response (TSQL):",
    "sql": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150",
    "dsql": "PROJECT T3.CustomerId FROM SELECT WHERE SUM(T1.price) > 150 FROM AGGREGATE SUM(T1.price), COUNT(*) GROUP BY T3.CustomerId FROM JOIN AS T1 FROM goods WITH JOIN AS T2 FROM items WITH AS T3 FROM receipts ON T2.receipt = T3.ReceiptNumber ON T1.id = T2.item "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the ids of customers who have spent over 150 dollars in total?\n### Response (TSQL):",
    "sql": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING sum(T1.price)  >  150",
    "dsql": "PROJECT T3.CustomerId FROM SELECT WHERE SUM(T1.price) > 150 FROM AGGREGATE SUM(T1.price), COUNT(*) GROUP BY T3.CustomerId FROM JOIN AS T1 FROM goods WITH JOIN AS T2 FROM items WITH AS T3 FROM receipts ON T2.receipt = T3.ReceiptNumber ON T1.id = T2.item "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: Find the ids of customers whose average spending for each good is above 5.\n### Response (TSQL):",
    "sql": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
    "dsql": "PROJECT T3.CustomerId FROM SELECT WHERE AVG(T1.price) > 5 FROM AGGREGATE AVG(T1.price), COUNT(*) GROUP BY T3.CustomerId FROM JOIN AS T1 FROM goods WITH JOIN AS T2 FROM items WITH AS T3 FROM receipts ON T2.receipt = T3.ReceiptNumber ON T1.id = T2.item "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: What are the ids of customers who spend more than 5 on average for each good?\n### Response (TSQL):",
    "sql": "SELECT T3.CustomerId FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.CustomerId HAVING avg(T1.price)  >  5",
    "dsql": "PROJECT T3.CustomerId FROM SELECT WHERE AVG(T1.price) > 5 FROM AGGREGATE AVG(T1.price), COUNT(*) GROUP BY T3.CustomerId FROM JOIN AS T1 FROM goods WITH JOIN AS T2 FROM items WITH AS T3 FROM receipts ON T2.receipt = T3.ReceiptNumber ON T1.id = T2.item "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: On which day did the bakery sell more than 100 dollars in total.\n### Response (TSQL):",
    "sql": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
    "dsql": "PROJECT T3.date FROM SELECT WHERE SUM(T1.price) > 100 FROM AGGREGATE SUM(T1.price), COUNT(*) GROUP BY T3.date FROM JOIN AS T1 FROM goods WITH JOIN AS T2 FROM items WITH AS T3 FROM receipts ON T2.receipt = T3.ReceiptNumber ON T1.id = T2.item "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE customers ( Id number, LastName text, FirstName text, PRIMARY KEY(Id)); CREATE TABLE goods ( Id text, Flavor text, Food text, Price number, PRIMARY KEY(Id)); CREATE TABLE items ( Receipt number, Ordinal number, Item text, PRIMARY KEY(Receipt), FOREIGN KEY(Item) REFERENCES goods (Id)); CREATE TABLE receipts ( ReceiptNumber number, Date text, CustomerId number, PRIMARY KEY(ReceiptNumber), FOREIGN KEY(CustomerId) REFERENCES customers (Id)); \n### Question: On what dates did the bakery sell more than 100 dollars worth of goods in total?\n### Response (TSQL):",
    "sql": "SELECT T3.date FROM goods AS T1 JOIN items AS T2 ON T1.id  =  T2.item JOIN receipts AS T3 ON T2.receipt  =  T3.ReceiptNumber GROUP BY T3.date HAVING sum(T1.price)  >  100",
    "dsql": "PROJECT T3.date FROM SELECT WHERE SUM(T1.price) > 100 FROM AGGREGATE SUM(T1.price), COUNT(*) GROUP BY T3.date FROM JOIN AS T1 FROM goods WITH JOIN AS T2 FROM items WITH AS T3 FROM receipts ON T2.receipt = T3.ReceiptNumber ON T1.id = T2.item "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: How many drivers are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM driver",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Find the total number of drivers.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM driver",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Find the number of drivers whose points are greater than 150 for each make.\n### Response (TSQL):",
    "sql": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make",
    "dsql": "PROJECT make, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY make FROM SELECT WHERE points > 150 FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: How many drivers receive points greater than 150 for each make? Show the make and the count.\n### Response (TSQL):",
    "sql": "SELECT make ,  count(*) FROM driver WHERE points  >  150 GROUP BY make",
    "dsql": "PROJECT make, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY make FROM SELECT WHERE points > 150 FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Find the average age of drivers for each make.\n### Response (TSQL):",
    "sql": "SELECT avg(age) ,  Make FROM driver GROUP BY make",
    "dsql": "PROJECT AVG(age), Make FROM AGGREGATE AVG(age), COUNT(*) GROUP BY make FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: What is the average age of drivers for each make? Return the average age and make.\n### Response (TSQL):",
    "sql": "SELECT avg(age) ,  Make FROM driver GROUP BY make",
    "dsql": "PROJECT AVG(age), Make FROM AGGREGATE AVG(age), COUNT(*) GROUP BY make FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: What are the average laps of all the drivers who are younger than 20?\n### Response (TSQL):",
    "sql": "SELECT avg(Laps) FROM driver WHERE age  <  20",
    "dsql": "PROJECT AVG(Laps) FROM AGGREGATE AVG(Laps) FROM SELECT WHERE age < 20 FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Compute the average laps of drivers under the age of 20.\n### Response (TSQL):",
    "sql": "SELECT avg(Laps) FROM driver WHERE age  <  20",
    "dsql": "PROJECT AVG(Laps) FROM AGGREGATE AVG(Laps) FROM SELECT WHERE age < 20 FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: What are the managers and sponsors of teams? Sort the results by Car Owners.\n### Response (TSQL):",
    "sql": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner",
    "dsql": "ORDER BY Car_Owner FROM PROJECT Manager, Sponsor FROM team "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Find the manager and sponsor for each team and order them by the car owner.\n### Response (TSQL):",
    "sql": "SELECT Manager ,  Sponsor FROM team ORDER BY Car_Owner",
    "dsql": "ORDER BY Car_Owner FROM PROJECT Manager, Sponsor FROM team "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Find the make that has more than one team.\n### Response (TSQL):",
    "sql": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
    "dsql": "PROJECT make FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY team FROM team "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Which make has more than one team?\n### Response (TSQL):",
    "sql": "SELECT make FROM team GROUP BY team HAVING count(*)  >  1",
    "dsql": "PROJECT make FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY team FROM team "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: What are the makes of the teams with car owner \"Buddy Arrington\"?\n### Response (TSQL):",
    "sql": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\"",
    "dsql": "PROJECT Make FROM SELECT WHERE Car_Owner = \"Buddy Arrington\" FROM team "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Find the make of the team whose car owner is \"Buddy Arrington\".\n### Response (TSQL):",
    "sql": "SELECT Make FROM team WHERE Car_Owner  =  \"Buddy Arrington\"",
    "dsql": "PROJECT Make FROM SELECT WHERE Car_Owner = \"Buddy Arrington\" FROM team "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: What are the maximum and minimum points of drivers.\n### Response (TSQL):",
    "sql": "SELECT max(Points) ,  min(Points) FROM driver",
    "dsql": "PROJECT MAX(Points), MIN(Points) FROM AGGREGATE MIN(Points), MAX(Points) FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Find the highest and lowest points of drivers.\n### Response (TSQL):",
    "sql": "SELECT max(Points) ,  min(Points) FROM driver",
    "dsql": "PROJECT MAX(Points), MIN(Points) FROM AGGREGATE MIN(Points), MAX(Points) FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: How many drivers have points smaller than 150?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM driver WHERE Points  <  150",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Points < 150 FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Count the number of drivers whose points are below 150.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM driver WHERE Points  <  150",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Points < 150 FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: List all the driver names in ascending order of age.\n### Response (TSQL):",
    "sql": "SELECT Driver FROM driver ORDER BY Age ASC",
    "dsql": "ORDER BY ASC Age FROM PROJECT Driver FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Sort the driver names by age in ascending order.\n### Response (TSQL):",
    "sql": "SELECT Driver FROM driver ORDER BY Age ASC",
    "dsql": "ORDER BY ASC Age FROM PROJECT Driver FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: List all the driver names in descending order of points.\n### Response (TSQL):",
    "sql": "SELECT Driver FROM driver ORDER BY Points DESC",
    "dsql": "ORDER BY DESC Points FROM PROJECT Driver FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: What is the list of drivers ordered by points in descending order?\n### Response (TSQL):",
    "sql": "SELECT Driver FROM driver ORDER BY Points DESC",
    "dsql": "ORDER BY DESC Points FROM PROJECT Driver FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Please show the names of drivers, and countries they are from.\n### Response (TSQL):",
    "sql": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country",
    "dsql": "PROJECT T2.Driver, T1.Country FROM JOIN AS T1 FROM country WITH AS T2 FROM driver ON T1.Country_ID = T2.Country "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: For each driver, return his or her name and country.\n### Response (TSQL):",
    "sql": "SELECT T2.Driver ,  T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country",
    "dsql": "PROJECT T2.Driver, T1.Country FROM JOIN AS T1 FROM country WITH AS T2 FROM driver ON T1.Country_ID = T2.Country "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Show the maximum points of the drivers from countries with capital \"Dublin\"\n### Response (TSQL):",
    "sql": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
    "dsql": "PROJECT MAX(T2.Points) FROM AGGREGATE MAX(T2.Points) FROM SELECT WHERE T1.Capital = \"Dublin\" FROM JOIN AS T1 FROM country WITH AS T2 FROM driver ON T1.Country_ID = T2.Country "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: What is the maximum points of the drivers from a country whose capital is \"Dublin\"?\n### Response (TSQL):",
    "sql": "SELECT max(T2.Points) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Capital  =  \"Dublin\"",
    "dsql": "PROJECT MAX(T2.Points) FROM AGGREGATE MAX(T2.Points) FROM SELECT WHERE T1.Capital = \"Dublin\" FROM JOIN AS T1 FROM country WITH AS T2 FROM driver ON T1.Country_ID = T2.Country "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: What is the average age of drivers from countries with official native language \"English\"\n### Response (TSQL):",
    "sql": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
    "dsql": "PROJECT AVG(T2.age) FROM AGGREGATE AVG(T2.age) FROM SELECT WHERE T1.Official_native_language = \"English\" FROM JOIN AS T1 FROM country WITH AS T2 FROM driver ON T1.Country_ID = T2.Country "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Find the average age of the drivers from the countries that use \"English\" as official native language.\n### Response (TSQL):",
    "sql": "SELECT avg(T2.age) FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T1.Official_native_language  =  \"English\"",
    "dsql": "PROJECT AVG(T2.age) FROM AGGREGATE AVG(T2.age) FROM SELECT WHERE T1.Official_native_language = \"English\" FROM JOIN AS T1 FROM country WITH AS T2 FROM driver ON T1.Country_ID = T2.Country "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: What are the countries that have drivers with points larger than 150?\n### Response (TSQL):",
    "sql": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
    "dsql": "PROJECT T1.Country FROM SELECT WHERE T2.Points > 150 FROM JOIN AS T1 FROM country WITH AS T2 FROM driver ON T1.Country_ID = T2.Country "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Find all the countries where some drivers have points above 150.\n### Response (TSQL):",
    "sql": "SELECT T1.Country FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country WHERE T2.Points  >  150",
    "dsql": "PROJECT T1.Country FROM SELECT WHERE T2.Points > 150 FROM JOIN AS T1 FROM country WITH AS T2 FROM driver ON T1.Country_ID = T2.Country "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: What is the capital of the country where the driver with the most points is from?\n### Response (TSQL):",
    "sql": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC T2.Points FROM PROJECT T1.Capital FROM JOIN AS T1 FROM country WITH AS T2 FROM driver ON T1.Country_ID = T2.Country "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Which country is the driver with the highest points from? Give me the capital of the country.\n### Response (TSQL):",
    "sql": "SELECT T1.Capital FROM country AS T1 JOIN driver AS T2 ON T1.Country_ID  =  T2.Country ORDER BY T2.Points DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC T2.Points FROM PROJECT T1.Capital FROM JOIN AS T1 FROM country WITH AS T2 FROM driver ON T1.Country_ID = T2.Country "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: List each make with the number of drivers with that make.\n### Response (TSQL):",
    "sql": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make",
    "dsql": "PROJECT Make, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Make FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: For each make, return the make and the count of drivers with that make.\n### Response (TSQL):",
    "sql": "SELECT Make ,  COUNT(*) FROM driver GROUP BY Make",
    "dsql": "PROJECT Make, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Make FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: List the make that are associated with most drivers.\n### Response (TSQL):",
    "sql": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Make FROM AGGREGATE COUNT(*) GROUP BY Make FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Which make does the most drivers have?\n### Response (TSQL):",
    "sql": "SELECT Make FROM driver GROUP BY Make ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Make FROM AGGREGATE COUNT(*) GROUP BY Make FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: List the driver makes that are associated with at least three drivers.\n### Response (TSQL):",
    "sql": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3",
    "dsql": "PROJECT Make FROM SELECT WHERE COUNT(*) >= 3 FROM AGGREGATE COUNT(*) GROUP BY Make FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Which make is associated with 3 or more drivers?\n### Response (TSQL):",
    "sql": "SELECT Make FROM driver GROUP BY Make HAVING COUNT(*)  >=  3",
    "dsql": "PROJECT Make FROM SELECT WHERE COUNT(*) >= 3 FROM AGGREGATE COUNT(*) GROUP BY Make FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: List the names of teams that do not have any drivers.\n### Response (TSQL):",
    "sql": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
    "dsql": "PROJECT Team FROM SELECT WHERE Team_ID NOT IN PROJECT Team_ID FROM team_driver FROM team "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Which team does not have drivers?\n### Response (TSQL):",
    "sql": "SELECT Team FROM team WHERE Team_ID NOT IN (SELECT Team_ID FROM team_driver)",
    "dsql": "PROJECT Team FROM SELECT WHERE Team_ID NOT IN PROJECT Team_ID FROM team_driver FROM team "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Which country has both drivers with make \"Dodge\" and drivers with make \"Chevrolet\"?\n### Response (TSQL):",
    "sql": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\"",
    "dsql": "INTERSECT PROJECT t2.country FROM SELECT WHERE t1.Make = \"Dodge\" FROM JOIN AS t1 FROM driver WITH AS t2 FROM country ON t1.country = t2.country_id WITH PROJECT t2.country FROM SELECT WHERE t1.Make = \"Chevrolet\" FROM JOIN AS t1 FROM driver WITH AS t2 FROM country ON t1.country = t2.country_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Find the countries in which there are both drivers with make \"Dodge\" and drivers with make \"Chevrolet\".\n### Response (TSQL):",
    "sql": "SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Dodge\" INTERSECT SELECT t2.country FROM driver AS t1 JOIN country AS t2 ON t1.country  =  t2.country_id WHERE t1.Make  =  \"Chevrolet\"",
    "dsql": "INTERSECT PROJECT t2.country FROM SELECT WHERE t1.Make = \"Dodge\" FROM JOIN AS t1 FROM driver WITH AS t2 FROM country ON t1.country = t2.country_id WITH PROJECT t2.country FROM SELECT WHERE t1.Make = \"Chevrolet\" FROM JOIN AS t1 FROM driver WITH AS t2 FROM country ON t1.country = t2.country_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Show total and average points of all drivers.\n### Response (TSQL):",
    "sql": "SELECT sum(Points) ,  avg(Points) FROM driver",
    "dsql": "PROJECT SUM(Points), AVG(Points) FROM AGGREGATE AVG(Points), SUM(Points) FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: What are the total and average points of drivers?\n### Response (TSQL):",
    "sql": "SELECT sum(Points) ,  avg(Points) FROM driver",
    "dsql": "PROJECT SUM(Points), AVG(Points) FROM AGGREGATE AVG(Points), SUM(Points) FROM driver "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Find the countries where no driver come from.\n### Response (TSQL):",
    "sql": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)",
    "dsql": "PROJECT country FROM SELECT WHERE country_id NOT IN PROJECT country FROM driver FROM country "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Which countries do not have any drivers?\n### Response (TSQL):",
    "sql": "SELECT country FROM country WHERE country_id NOT IN (SELECT country FROM driver)",
    "dsql": "PROJECT country FROM SELECT WHERE country_id NOT IN PROJECT country FROM driver FROM country "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: What are the manager and sponsor of the team that has the most drivers?\n### Response (TSQL):",
    "sql": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t1.manager, t1.sponsor FROM AGGREGATE COUNT(*) GROUP BY t2.team_id FROM JOIN AS t1 FROM team WITH AS t2 FROM team_driver ON t1.team_id = t2.team_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Find the manager and sponsor of the team that has the most drivers.\n### Response (TSQL):",
    "sql": "SELECT t1.manager ,  t1.sponsor FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t1.manager, t1.sponsor FROM AGGREGATE COUNT(*) GROUP BY t2.team_id FROM JOIN AS t1 FROM team WITH AS t2 FROM team_driver ON t1.team_id = t2.team_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: What are the manager and car owner of the team that has at least 2 drivers?\n### Response (TSQL):",
    "sql": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2",
    "dsql": "PROJECT t1.manager, t1.car_owner FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY t2.team_id FROM JOIN AS t1 FROM team WITH AS t2 FROM team_driver ON t1.team_id = t2.team_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE country ( Country_Id number, Country text, Capital text, Official_native_language text, Regoin text, PRIMARY KEY(Country_Id)); CREATE TABLE team ( Team_ID number, Team text, Make text, Manager text, Sponsor text, Car_Owner text, PRIMARY KEY(Team_ID)); CREATE TABLE driver ( Driver_ID number, Driver text, Country number, Age number, Car_# number, Make text, Points text, Laps number, Winnings text, PRIMARY KEY(Driver_ID)); CREATE TABLE team_driver ( Team_ID number, Driver_ID number, PRIMARY KEY(Team_ID), FOREIGN KEY(Driver_ID) REFERENCES driver (Driver_ID), FOREIGN KEY(Team_ID) REFERENCES team (Team_ID)); \n### Question: Find the team with two or more drivers and return the the manager and car owner of the team.\n### Response (TSQL):",
    "sql": "SELECT t1.manager ,  t1.car_owner FROM team AS t1 JOIN team_driver AS t2 ON t1.team_id  =  t2.team_id GROUP BY t2.team_id HAVING count(*)  >=  2",
    "dsql": "PROJECT t1.manager, t1.car_owner FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY t2.team_id FROM JOIN AS t1 FROM team WITH AS t2 FROM team_driver ON t1.team_id = t2.team_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: How many institutions are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM institution",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: Count the number of institutions.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM institution",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: List the names of institutions in ascending alphabetical order.\n### Response (TSQL):",
    "sql": "SELECT Name FROM institution ORDER BY Name ASC",
    "dsql": "ORDER BY ASC Name FROM PROJECT Name FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What are the names of institutions, ordered alphabetically?\n### Response (TSQL):",
    "sql": "SELECT Name FROM institution ORDER BY Name ASC",
    "dsql": "ORDER BY ASC Name FROM PROJECT Name FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: List the names of institutions in ascending order of founded year.\n### Response (TSQL):",
    "sql": "SELECT Name FROM institution ORDER BY Founded ASC",
    "dsql": "ORDER BY ASC Founded FROM PROJECT Name FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What are the names of institutions, ordered by the years in which they were founded?\n### Response (TSQL):",
    "sql": "SELECT Name FROM institution ORDER BY Founded ASC",
    "dsql": "ORDER BY ASC Founded FROM PROJECT Name FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What are the cities and provinces of institutions?\n### Response (TSQL):",
    "sql": "SELECT City ,  Province FROM institution",
    "dsql": "PROJECT City, Province FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: Return the cities and provinces of institutions.\n### Response (TSQL):",
    "sql": "SELECT City ,  Province FROM institution",
    "dsql": "PROJECT City, Province FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What are the maximum and minimum enrollment of all institutions?\n### Response (TSQL):",
    "sql": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution",
    "dsql": "PROJECT MAX(Enrollment), MIN(Enrollment) FROM AGGREGATE MIN(Enrollment), MAX(Enrollment) FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: Return the maximum and minimum enrollment across all institutions.\n### Response (TSQL):",
    "sql": "SELECT max(Enrollment) ,  min(Enrollment) FROM institution",
    "dsql": "PROJECT MAX(Enrollment), MIN(Enrollment) FROM AGGREGATE MIN(Enrollment), MAX(Enrollment) FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What are the affiliations of institutions that are not in city \"Vancouver\"?\n### Response (TSQL):",
    "sql": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\"",
    "dsql": "PROJECT Affiliation FROM SELECT WHERE City <> \"Vancouver\" FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: Return the affiliations of instituions that are not in the city of Vancouver.\n### Response (TSQL):",
    "sql": "SELECT Affiliation FROM institution WHERE City != \"Vancouver\"",
    "dsql": "PROJECT Affiliation FROM SELECT WHERE City <> \"Vancouver\" FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What are the stadiums of institutions in descending order of the capacity.\n### Response (TSQL):",
    "sql": "SELECT Stadium FROM institution ORDER BY Capacity DESC",
    "dsql": "ORDER BY DESC Capacity FROM PROJECT Stadium FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: Return the stadiums of institutions, ordered by capacity descending.\n### Response (TSQL):",
    "sql": "SELECT Stadium FROM institution ORDER BY Capacity DESC",
    "dsql": "ORDER BY DESC Capacity FROM PROJECT Stadium FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What is the stadium of the institution with the largest enrollment?\n### Response (TSQL):",
    "sql": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC Enrollment FROM PROJECT Stadium FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: Give the stadium of the institution which is the greatest enrollment.\n### Response (TSQL):",
    "sql": "SELECT Stadium FROM institution ORDER BY Enrollment DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC Enrollment FROM PROJECT Stadium FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What are the names and nicknames of institutions?\n### Response (TSQL):",
    "sql": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID",
    "dsql": "PROJECT T2.Name, T1.Nickname FROM JOIN AS T1 FROM championship WITH AS T2 FROM institution ON T1.Institution_ID = T2.Institution_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: Return the names of institutions, as well as their nicknames.\n### Response (TSQL):",
    "sql": "SELECT T2.Name ,  T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID",
    "dsql": "PROJECT T2.Name, T1.Nickname FROM JOIN AS T1 FROM championship WITH AS T2 FROM institution ON T1.Institution_ID = T2.Institution_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What is the nickname of the institution with the smallest enrollment?\n### Response (TSQL):",
    "sql": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC T2.Enrollment FROM PROJECT T1.Nickname FROM JOIN AS T1 FROM championship WITH AS T2 FROM institution ON T1.Institution_ID = T2.Institution_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: Return the nickname of the institution with the lowest enrollment.\n### Response (TSQL):",
    "sql": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Enrollment ASC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY ASC T2.Enrollment FROM PROJECT T1.Nickname FROM JOIN AS T1 FROM championship WITH AS T2 FROM institution ON T1.Institution_ID = T2.Institution_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: List the names of institutions in descending order of the number of championships.\n### Response (TSQL):",
    "sql": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC",
    "dsql": "ORDER BY DESC T1.Number_of_Championships FROM PROJECT T2.Name FROM JOIN AS T1 FROM championship WITH AS T2 FROM institution ON T1.Institution_ID = T2.Institution_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What are the names of institutions, ordered descending by their number of championships?\n### Response (TSQL):",
    "sql": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T1.Number_of_Championships DESC",
    "dsql": "ORDER BY DESC T1.Number_of_Championships FROM PROJECT T2.Name FROM JOIN AS T1 FROM championship WITH AS T2 FROM institution ON T1.Institution_ID = T2.Institution_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: List the names of institutions with at least one championship.\n### Response (TSQL):",
    "sql": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
    "dsql": "PROJECT T2.Name FROM SELECT WHERE T1.Number_of_Championships >= 1 FROM JOIN AS T1 FROM championship WITH AS T2 FROM institution ON T1.Institution_ID = T2.Institution_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What are the names of institutions that have 1 or more championships?\n### Response (TSQL):",
    "sql": "SELECT T2.Name FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T1.Number_of_Championships  >=  1",
    "dsql": "PROJECT T2.Name FROM SELECT WHERE T1.Number_of_Championships >= 1 FROM JOIN AS T1 FROM championship WITH AS T2 FROM institution ON T1.Institution_ID = T2.Institution_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What is the total number of championship of institution with public affiliation?\n### Response (TSQL):",
    "sql": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\"",
    "dsql": "PROJECT SUM(T1.Number_of_Championships) FROM AGGREGATE SUM(T1.Number_of_Championships) FROM SELECT WHERE T2.Affiliation = \"Public\" FROM JOIN AS T1 FROM championship WITH AS T2 FROM institution ON T1.Institution_ID = T2.Institution_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: Return the total number of championships of institutions that have a Public affiliation.\n### Response (TSQL):",
    "sql": "SELECT sum(T1.Number_of_Championships) FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID WHERE T2.Affiliation  =  \"Public\"",
    "dsql": "PROJECT SUM(T1.Number_of_Championships) FROM AGGREGATE SUM(T1.Number_of_Championships) FROM SELECT WHERE T2.Affiliation = \"Public\" FROM JOIN AS T1 FROM championship WITH AS T2 FROM institution ON T1.Institution_ID = T2.Institution_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What are different types of affiliations of institutions and the corresponding number of institutions?\n### Response (TSQL):",
    "sql": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation",
    "dsql": "PROJECT Affiliation, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Affiliation FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: How many institutions are there for each type of affiliation?\n### Response (TSQL):",
    "sql": "SELECT Affiliation ,  COUNT(*) FROM institution GROUP BY Affiliation",
    "dsql": "PROJECT Affiliation, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Affiliation FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What is the most common type of affiliation for institutions?\n### Response (TSQL):",
    "sql": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Affiliation FROM AGGREGATE COUNT(*) GROUP BY Affiliation FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: Return the most common type of affiliation across all institutions.\n### Response (TSQL):",
    "sql": "SELECT Affiliation FROM institution GROUP BY Affiliation ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Affiliation FROM AGGREGATE COUNT(*) GROUP BY Affiliation FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: In which years were more than one institution founded?\n### Response (TSQL):",
    "sql": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1",
    "dsql": "PROJECT Founded, COUNT(*) FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY Founded FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: Return the years in which more than 1 institution was founded, as well as the number of institutions founded in each of those.\n### Response (TSQL):",
    "sql": "SELECT Founded ,  COUNT(*) FROM institution GROUP BY Founded HAVING COUNT(*)  >  1",
    "dsql": "PROJECT Founded, COUNT(*) FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY Founded FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: List the nicknames of institutions in descending order of capacity.\n### Response (TSQL):",
    "sql": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC",
    "dsql": "ORDER BY DESC T2.Capacity FROM PROJECT T1.Nickname FROM JOIN AS T1 FROM championship WITH AS T2 FROM institution ON T1.Institution_ID = T2.Institution_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What are the nicknames of institutions, ordered descending by their capacities?\n### Response (TSQL):",
    "sql": "SELECT T1.Nickname FROM championship AS T1 JOIN institution AS T2 ON T1.Institution_ID  =  T2.Institution_ID ORDER BY T2.Capacity DESC",
    "dsql": "ORDER BY DESC T2.Capacity FROM PROJECT T1.Nickname FROM JOIN AS T1 FROM championship WITH AS T2 FROM institution ON T1.Institution_ID = T2.Institution_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What are the total enrollment of institutions in city `` Vancouver '' or `` Calgary '' ?\n### Response (TSQL):",
    "sql": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\"",
    "dsql": "PROJECT SUM(enrollment) FROM AGGREGATE SUM(enrollment) FROM SELECT WHERE city = \"vancouver\" OR city = \"calgary\" FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: Return all the enrollments of institutions in either the city of Vancouver or the city of Calgary .\n### Response (TSQL):",
    "sql": "select sum(enrollment) from institution where city  =  \"vancouver\" or city  =  \"calgary\"",
    "dsql": "PROJECT SUM(enrollment) FROM AGGREGATE SUM(enrollment) FROM SELECT WHERE city = \"vancouver\" OR city = \"calgary\" FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: Show the provinces that have both institutions founded before 1920 and institutions founded after 1950.\n### Response (TSQL):",
    "sql": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950",
    "dsql": "INTERSECT PROJECT Province FROM SELECT WHERE Founded < 1920 FROM institution WITH PROJECT Province FROM SELECT WHERE Founded > 1950 FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: What are the provinces that have not only institutions founded before 1920, but also institutions founded after 1950?\n### Response (TSQL):",
    "sql": "SELECT Province FROM institution WHERE Founded  <  1920 INTERSECT SELECT Province FROM institution WHERE Founded  >  1950",
    "dsql": "INTERSECT PROJECT Province FROM SELECT WHERE Founded < 1920 FROM institution WITH PROJECT Province FROM SELECT WHERE Founded > 1950 FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: How many distinct provinces are the institutions in?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT Province) FROM institution",
    "dsql": "PROJECT COUNT(DISTINCT Province) FROM AGGREGATE COUNT(DISTINCT Province) FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE institution ( Institution_ID number, Name text, Team text, City text, Province text, Founded number, Affiliation text, Enrollment number, Endowment text, Stadium text, Capacity number, PRIMARY KEY(Institution_ID)); CREATE TABLE Championship ( Institution_ID number, Nickname text, Joined number, Number_of_Championships number, PRIMARY KEY(Institution_ID), FOREIGN KEY(Institution_ID) REFERENCES institution (Institution_ID)); \n### Question: Count the number of different provinces that have institutions.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT Province) FROM institution",
    "dsql": "PROJECT COUNT(DISTINCT Province) FROM AGGREGATE COUNT(DISTINCT Province) FROM institution "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Select all details of all warehouses.\n### Response (TSQL):",
    "sql": "SELECT * FROM warehouses",
    "dsql": "PROJECT * FROM warehouses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What is all the information about the warehouses?\n### Response (TSQL):",
    "sql": "SELECT * FROM warehouses",
    "dsql": "PROJECT * FROM warehouses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find all different contents stored in New York.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
    "dsql": "PROJECT DISTINCT T1.contents FROM SELECT WHERE LOCATION = 'New York' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are all the different contents stored in boxes in New York?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE LOCATION  =  'New York'",
    "dsql": "PROJECT DISTINCT T1.contents FROM SELECT WHERE LOCATION = 'New York' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Select contents of all boxes with a value larger than $150.\n### Response (TSQL):",
    "sql": "SELECT CONTENTS FROM boxes WHERE Value  >  150",
    "dsql": "PROJECT CONTENTS FROM SELECT WHERE Value > 150 FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the contents of boxes with value greater than 150?\n### Response (TSQL):",
    "sql": "SELECT CONTENTS FROM boxes WHERE Value  >  150",
    "dsql": "PROJECT CONTENTS FROM SELECT WHERE Value > 150 FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Select the warehouse code and the average value of the boxes in each warehouse.\n### Response (TSQL):",
    "sql": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
    "dsql": "PROJECT warehouse, AVG(value) FROM AGGREGATE AVG(value), COUNT(*) GROUP BY warehouse FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What is the average value of boxes for each warehouse?\n### Response (TSQL):",
    "sql": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse",
    "dsql": "PROJECT warehouse, AVG(value) FROM AGGREGATE AVG(value), COUNT(*) GROUP BY warehouse FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the average and total values of all boxes.\n### Response (TSQL):",
    "sql": "SELECT avg(value) ,  sum(value) FROM boxes",
    "dsql": "PROJECT AVG(value), SUM(value) FROM AGGREGATE AVG(value), SUM(value) FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the average and total values across all boxes?\n### Response (TSQL):",
    "sql": "SELECT avg(value) ,  sum(value) FROM boxes",
    "dsql": "PROJECT AVG(value), SUM(value) FROM AGGREGATE AVG(value), SUM(value) FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the average and total capacity of all warehouses.\n### Response (TSQL):",
    "sql": "SELECT avg(capacity) ,  sum(capacity) FROM warehouses",
    "dsql": "PROJECT AVG(capacity), SUM(capacity) FROM AGGREGATE AVG(capacity), SUM(capacity) FROM warehouses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the average and total capacities across all warehouses?\n### Response (TSQL):",
    "sql": "SELECT avg(capacity) ,  sum(capacity) FROM warehouses",
    "dsql": "PROJECT AVG(capacity), SUM(capacity) FROM AGGREGATE AVG(capacity), SUM(capacity) FROM warehouses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the average and maximum value for each different content.\n### Response (TSQL):",
    "sql": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
    "dsql": "PROJECT AVG(value), MAX(value), CONTENTS FROM AGGREGATE MAX(value), AVG(value), COUNT(*) GROUP BY CONTENTS FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the average and maximum values for each type of content in boxes?\n### Response (TSQL):",
    "sql": "SELECT avg(value) ,  max(value) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
    "dsql": "PROJECT AVG(value), MAX(value), CONTENTS FROM AGGREGATE MAX(value), AVG(value), COUNT(*) GROUP BY CONTENTS FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the content that has the highest total values in all boxes.\n### Response (TSQL):",
    "sql": "SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC value FROM PROJECT CONTENTS FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What is the content with the greatest value across all boxes?\n### Response (TSQL):",
    "sql": "SELECT CONTENTS FROM boxes ORDER BY value DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC value FROM PROJECT CONTENTS FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Select the average value of all the boxes.\n### Response (TSQL):",
    "sql": "SELECT avg(value) FROM boxes",
    "dsql": "PROJECT AVG(value) FROM AGGREGATE AVG(value) FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What is the average value of boxes?\n### Response (TSQL):",
    "sql": "SELECT avg(value) FROM boxes",
    "dsql": "PROJECT AVG(value) FROM AGGREGATE AVG(value) FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Select all distinct contents in all the boxes.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT CONTENTS FROM boxes",
    "dsql": "PROJECT DISTINCT CONTENTS FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the different contents in boxes?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT CONTENTS FROM boxes",
    "dsql": "PROJECT DISTINCT CONTENTS FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the number of all distinct contents in all the boxes.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT CONTENTS) FROM boxes",
    "dsql": "PROJECT COUNT(DISTINCT CONTENTS) FROM AGGREGATE COUNT(DISTINCT CONTENTS) FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: How many different contents are stored in boxes?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT CONTENTS) FROM boxes",
    "dsql": "PROJECT COUNT(DISTINCT CONTENTS) FROM AGGREGATE COUNT(DISTINCT CONTENTS) FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find all distinct locations of warehouses.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT LOCATION) FROM warehouses",
    "dsql": "PROJECT COUNT(DISTINCT LOCATION) FROM AGGREGATE COUNT(DISTINCT LOCATION) FROM warehouses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the different locations of warehouses?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT LOCATION) FROM warehouses",
    "dsql": "PROJECT COUNT(DISTINCT LOCATION) FROM AGGREGATE COUNT(DISTINCT LOCATION) FROM warehouses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the code of boxes that are stored at the warehouses located at Chicago or New York.\n### Response (TSQL):",
    "sql": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
    "dsql": "PROJECT T1.code FROM SELECT WHERE T2.location = 'Chicago' OR T2.location = 'New York' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the codes of boxes stored in warehouses in either Chicago or New York?\n### Response (TSQL):",
    "sql": "SELECT T1.code FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
    "dsql": "PROJECT T1.code FROM SELECT WHERE T2.location = 'Chicago' OR T2.location = 'New York' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the total value of boxes in the warehouses located at Chicago or New York.\n### Response (TSQL):",
    "sql": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
    "dsql": "PROJECT SUM(T1.value) FROM AGGREGATE SUM(T1.value) FROM SELECT WHERE T2.location = 'Chicago' OR T2.location = 'New York' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What is the total value of boxes located in Chicago or New York?\n### Response (TSQL):",
    "sql": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' OR T2.location  =  'New York'",
    "dsql": "PROJECT SUM(T1.value) FROM AGGREGATE SUM(T1.value) FROM SELECT WHERE T2.location = 'Chicago' OR T2.location = 'New York' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find all contents present in warehouses located in Chicago and those located in New York.\n### Response (TSQL):",
    "sql": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
    "dsql": "INTERSECT PROJECT T1.contents FROM SELECT WHERE T2.location = 'Chicago' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code WITH PROJECT T1.contents FROM SELECT WHERE T2.location = 'New York' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the contents that are stored in both Chicago and New York.\n### Response (TSQL):",
    "sql": "SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago' INTERSECT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
    "dsql": "INTERSECT PROJECT T1.contents FROM SELECT WHERE T2.location = 'Chicago' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code WITH PROJECT T1.contents FROM SELECT WHERE T2.location = 'New York' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the type of contents that are not in the warehouses located at New York.\n### Response (TSQL):",
    "sql": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
    "dsql": "EXCEPT PROJECT CONTENTS FROM boxes WITH PROJECT T1.contents FROM SELECT WHERE T2.location = 'New York' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What types of contents cannot be found in warehouses in New York?\n### Response (TSQL):",
    "sql": "SELECT CONTENTS FROM boxes EXCEPT SELECT T1.contents FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'New York'",
    "dsql": "EXCEPT PROJECT CONTENTS FROM boxes WITH PROJECT T1.contents FROM SELECT WHERE T2.location = 'New York' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the location of the warehouses which have contents Rocks but not Scissors.\n### Response (TSQL):",
    "sql": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "dsql": "EXCEPT PROJECT T2.location FROM SELECT WHERE T1.contents = 'Rocks' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code WITH PROJECT T2.location FROM SELECT WHERE T1.contents = 'Scissors' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the locations of warehouses that have boxes containing Rocks but not Scissors?\n### Response (TSQL):",
    "sql": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' EXCEPT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "dsql": "EXCEPT PROJECT T2.location FROM SELECT WHERE T1.contents = 'Rocks' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code WITH PROJECT T2.location FROM SELECT WHERE T1.contents = 'Scissors' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the warehouses which store contents Rocks or Scissors.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
    "dsql": "PROJECT DISTINCT warehouse FROM SELECT WHERE CONTENTS = 'Rocks' OR CONTENTS = 'Scissors' FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the distinct warehouses that have boxes with Rocks or Scissors as contents?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT warehouse FROM boxes WHERE CONTENTS  =  'Rocks' OR CONTENTS  =  'Scissors'",
    "dsql": "PROJECT DISTINCT warehouse FROM SELECT WHERE CONTENTS = 'Rocks' OR CONTENTS = 'Scissors' FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the location of the warehouses which store contents Rocks and Scissors.\n### Response (TSQL):",
    "sql": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "dsql": "INTERSECT PROJECT T2.location FROM SELECT WHERE T1.contents = 'Rocks' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code WITH PROJECT T2.location FROM SELECT WHERE T1.contents = 'Scissors' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the locations of warehouses in which boxes that contain Rocks and Scissors are kept?\n### Response (TSQL):",
    "sql": "SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks' INTERSECT SELECT T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Scissors'",
    "dsql": "INTERSECT PROJECT T2.location FROM SELECT WHERE T1.contents = 'Rocks' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code WITH PROJECT T2.location FROM SELECT WHERE T1.contents = 'Scissors' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: List the code and contents of all boxes sorted by their values.\n### Response (TSQL):",
    "sql": "SELECT code ,  CONTENTS FROM boxes ORDER BY value",
    "dsql": "ORDER BY value FROM PROJECT code, CONTENTS FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the codes and corresponding contents of all the boxes, ordered by their values?\n### Response (TSQL):",
    "sql": "SELECT code ,  CONTENTS FROM boxes ORDER BY value",
    "dsql": "ORDER BY value FROM PROJECT code, CONTENTS FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the code and contents of the box with the lowest value.\n### Response (TSQL):",
    "sql": "SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY value FROM PROJECT code, CONTENTS FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What is the code and contents for the box that has the smallest value?\n### Response (TSQL):",
    "sql": "SELECT code ,  CONTENTS FROM boxes ORDER BY value LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY value FROM PROJECT code, CONTENTS FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the unique contents of all boxes whose value is higher than the average value of all boxes.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)",
    "dsql": "PROJECT DISTINCT CONTENTS FROM SELECT WHERE value > PROJECT AVG(value) FROM AGGREGATE AVG(value) FROM boxes FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the different contents of boxes for which the value is higher than the average value across all boxes?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT CONTENTS FROM boxes WHERE value  >  (SELECT avg(value) FROM boxes)",
    "dsql": "PROJECT DISTINCT CONTENTS FROM SELECT WHERE value > PROJECT AVG(value) FROM AGGREGATE AVG(value) FROM boxes FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: List all different types of contents ordered by contents.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS",
    "dsql": "ORDER BY CONTENTS FROM PROJECT DISTINCT CONTENTS FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the different contents of boxes, ordered alphabetically?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT CONTENTS FROM boxes ORDER BY CONTENTS",
    "dsql": "ORDER BY CONTENTS FROM PROJECT DISTINCT CONTENTS FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the code of all boxes whose value is higher than the value of any boxes with Rocks as content.\n### Response (TSQL):",
    "sql": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
    "dsql": "PROJECT code FROM SELECT WHERE value > PROJECT MIN(value) FROM AGGREGATE MIN(value) FROM SELECT WHERE CONTENTS = 'Rocks' FROM boxes FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the codes of boxes for which the value is greater than the value of any box that contains Rocks?\n### Response (TSQL):",
    "sql": "SELECT code FROM boxes WHERE value  >  (SELECT min(value) FROM boxes WHERE CONTENTS  =  'Rocks')",
    "dsql": "PROJECT code FROM SELECT WHERE value > PROJECT MIN(value) FROM AGGREGATE MIN(value) FROM SELECT WHERE CONTENTS = 'Rocks' FROM boxes FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the code and content of all boxes whose value is higher than the value of all boxes with Scissors as content.\n### Response (TSQL):",
    "sql": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
    "dsql": "PROJECT code, CONTENTS FROM SELECT WHERE value > PROJECT MAX(value) FROM AGGREGATE MAX(value) FROM SELECT WHERE CONTENTS = 'Scissors' FROM boxes FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the codes and corresponding contents of boxes for which their value is higher than the values of all boxes containing Scissors?\n### Response (TSQL):",
    "sql": "SELECT code ,  CONTENTS FROM boxes WHERE value  >  (SELECT max(value) FROM boxes WHERE CONTENTS  =  'Scissors')",
    "dsql": "PROJECT code, CONTENTS FROM SELECT WHERE value > PROJECT MAX(value) FROM AGGREGATE MAX(value) FROM SELECT WHERE CONTENTS = 'Scissors' FROM boxes FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the total value of boxes stored in the warehouse with the largest capacity.\n### Response (TSQL):",
    "sql": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC T2.capacity FROM PROJECT SUM(T1.value) FROM AGGREGATE SUM(T1.value) FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What is the total value of boxes kept in the warehouse with the greatest capacity?\n### Response (TSQL):",
    "sql": "SELECT sum(T1.value) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code ORDER BY T2.capacity DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC T2.capacity FROM PROJECT SUM(T1.value) FROM AGGREGATE SUM(T1.value) FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Select the warehouse code and the average value of the boxes only for those warehouses where the average value of the boxes is greater than 150.\n### Response (TSQL):",
    "sql": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150",
    "dsql": "PROJECT warehouse, AVG(value) FROM SELECT WHERE AVG(value) > 150 FROM AGGREGATE AVG(value), COUNT(*) GROUP BY warehouse FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the average values of boxes for each warehouse than has an average value greater than 150?\n### Response (TSQL):",
    "sql": "SELECT warehouse ,  avg(value) FROM boxes GROUP BY warehouse HAVING avg(value)  >  150",
    "dsql": "PROJECT warehouse, AVG(value) FROM SELECT WHERE AVG(value) > 150 FROM AGGREGATE AVG(value), COUNT(*) GROUP BY warehouse FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the total value and number of boxes for each content type.\n### Response (TSQL):",
    "sql": "SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
    "dsql": "PROJECT SUM(value), COUNT(*), CONTENTS FROM AGGREGATE SUM(value), COUNT(*) GROUP BY CONTENTS FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: For each content, what is the total value and number of boxes?\n### Response (TSQL):",
    "sql": "SELECT sum(value) ,  count(*) ,  CONTENTS FROM boxes GROUP BY CONTENTS",
    "dsql": "PROJECT SUM(value), COUNT(*), CONTENTS FROM AGGREGATE SUM(value), COUNT(*) GROUP BY CONTENTS FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the total, average, and maximum capacity for different locations.\n### Response (TSQL):",
    "sql": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION",
    "dsql": "PROJECT SUM(capacity), AVG(capacity), MAX(capacity), LOCATION FROM AGGREGATE MAX(capacity), AVG(capacity), COUNT(*), SUM(capacity) GROUP BY LOCATION FROM warehouses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: For each location, what are the total, average, and maximum capacities of warehouses?\n### Response (TSQL):",
    "sql": "SELECT sum(capacity) ,  avg(capacity) ,  max(capacity) ,  LOCATION FROM warehouses GROUP BY LOCATION",
    "dsql": "PROJECT SUM(capacity), AVG(capacity), MAX(capacity), LOCATION FROM AGGREGATE MAX(capacity), AVG(capacity), COUNT(*), SUM(capacity) GROUP BY LOCATION FROM warehouses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the total capacity of all warehouse locations.\n### Response (TSQL):",
    "sql": "SELECT sum(capacity) FROM warehouses",
    "dsql": "PROJECT SUM(capacity) FROM AGGREGATE SUM(capacity) FROM warehouses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What is the total capacity of all warehouses?\n### Response (TSQL):",
    "sql": "SELECT sum(capacity) FROM warehouses",
    "dsql": "PROJECT SUM(capacity) FROM AGGREGATE SUM(capacity) FROM warehouses "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the value of the most expensive boxes saved in each warehouse location.\n### Response (TSQL):",
    "sql": "SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location",
    "dsql": "PROJECT MAX(T1.value), T2.location FROM AGGREGATE MAX(T1.value), COUNT(*) GROUP BY T2.location FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: For each warehouse location, what is the value of the most expensive box?\n### Response (TSQL):",
    "sql": "SELECT max(T1.value) ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.location",
    "dsql": "PROJECT MAX(T1.value), T2.location FROM AGGREGATE MAX(T1.value), COUNT(*) GROUP BY T2.location FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Select the warehouse codes along with the number of boxes in each warehouse.\n### Response (TSQL):",
    "sql": "SELECT Warehouse ,  count(*) FROM boxes GROUP BY warehouse",
    "dsql": "PROJECT Warehouse, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY warehouse FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: How many boxes are there with each warehouse ?\n### Response (TSQL):",
    "sql": "select warehouse ,  count(*) from boxes group by warehouse",
    "dsql": "PROJECT warehouse, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY warehouse FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the number of different locations where Rocks are stored.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'",
    "dsql": "PROJECT COUNT(DISTINCT LOCATION) FROM AGGREGATE COUNT(DISTINCT LOCATION) FROM SELECT WHERE T1.contents = 'Rocks' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: In how many different warehouses are Rocks stored within boxes?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT LOCATION) FROM boxes AS T1 JOIN warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T1.contents  =  'Rocks'",
    "dsql": "PROJECT COUNT(DISTINCT LOCATION) FROM AGGREGATE COUNT(DISTINCT LOCATION) FROM SELECT WHERE T1.contents = 'Rocks' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Select the code of each box, along with the name of the city the box is located in.\n### Response (TSQL):",
    "sql": "SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code",
    "dsql": "PROJECT T1.code, T2.location FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.Warehouse = T2.Code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the codes of all boxes, as well as the locations of the warehouses they are in?\n### Response (TSQL):",
    "sql": "SELECT T1.code ,  T2.location FROM boxes AS T1 JOIN warehouses AS T2 ON T1.Warehouse  =  T2.Code",
    "dsql": "PROJECT T1.code, T2.location FROM JOIN AS T1 FROM boxes WITH AS T2 FROM warehouses ON T1.Warehouse = T2.Code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Select the codes of all the boxes located in Chicago.\n### Response (TSQL):",
    "sql": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'",
    "dsql": "PROJECT T1.code FROM SELECT WHERE T2.location = 'Chicago' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM Warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the codes of boxes stored in warehouses in Chicago?\n### Response (TSQL):",
    "sql": "SELECT T1.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location  =  'Chicago'",
    "dsql": "PROJECT T1.code FROM SELECT WHERE T2.location = 'Chicago' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM Warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the number of boxes saved in each warehouse.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse",
    "dsql": "PROJECT COUNT(*), warehouse FROM AGGREGATE COUNT(*) GROUP BY warehouse FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: How many boxes are stored in each warehouse?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  warehouse FROM boxes GROUP BY warehouse",
    "dsql": "PROJECT COUNT(*), warehouse FROM AGGREGATE COUNT(*) GROUP BY warehouse FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the number of distinct types of contents in each warehouse.\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse",
    "dsql": "PROJECT COUNT(DISTINCT CONTENTS), warehouse FROM AGGREGATE COUNT(DISTINCT CONTENTS), COUNT(*) GROUP BY warehouse FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: How many different types of contents are stored in each warehouse?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT CONTENTS) ,  warehouse FROM boxes GROUP BY warehouse",
    "dsql": "PROJECT COUNT(DISTINCT CONTENTS), warehouse FROM AGGREGATE COUNT(DISTINCT CONTENTS), COUNT(*) GROUP BY warehouse FROM boxes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Select the codes of all warehouses that are above capacity.\n### Response (TSQL):",
    "sql": "SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity",
    "dsql": "PROJECT T2.code FROM SELECT WHERE COUNT(*) > T2.capacity FROM AGGREGATE COUNT(*) GROUP BY T2.code FROM JOIN AS T1 FROM boxes WITH AS T2 FROM Warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What are the codes of warehouses that have more boxes than their capacity?\n### Response (TSQL):",
    "sql": "SELECT T2.code FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code GROUP BY T2.code HAVING count(*)  >  T2.capacity",
    "dsql": "PROJECT T2.code FROM SELECT WHERE COUNT(*) > T2.capacity FROM AGGREGATE COUNT(*) GROUP BY T2.code FROM JOIN AS T1 FROM boxes WITH AS T2 FROM Warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: Find the total values of boxes that are not in the warehouses located at Chicago.\n### Response (TSQL):",
    "sql": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'",
    "dsql": "PROJECT SUM(T1.value) FROM AGGREGATE SUM(T1.value) FROM SELECT WHERE T2.location <> 'Chicago' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM Warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Warehouses ( Code number, Location text, Capacity number, PRIMARY KEY(Code)); CREATE TABLE Boxes ( Code text, Contents text, Value number, Warehouse number, PRIMARY KEY(Code), FOREIGN KEY(Warehouse) REFERENCES Warehouses (Code)); \n### Question: What is the total value of boxes contained in any location but Chicago?\n### Response (TSQL):",
    "sql": "SELECT sum(T1.value) FROM boxes AS T1 JOIN Warehouses AS T2 ON T1.warehouse  =  T2.code WHERE T2.location != 'Chicago'",
    "dsql": "PROJECT SUM(T1.value) FROM AGGREGATE SUM(T1.value) FROM SELECT WHERE T2.location <> 'Chicago' FROM JOIN AS T1 FROM boxes WITH AS T2 FROM Warehouses ON T1.warehouse = T2.code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: Show name, city, and state for all universities in  alphabetical order of university name.\n### Response (TSQL):",
    "sql": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name",
    "dsql": "ORDER BY university_name FROM PROJECT university_name, city, state FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What are the names, cities, and states of all universities in alphabetical order (by name of the university).\n### Response (TSQL):",
    "sql": "SELECT university_name ,  city ,  state FROM University ORDER BY university_name",
    "dsql": "ORDER BY university_name FROM PROJECT university_name, city, state FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: How many universities are in Illinois or Ohio?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE state = 'Illinois' OR state = 'Ohio' FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the total number of universities located in Illinois or Ohio?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM University WHERE state  =  'Illinois' OR state  =  'Ohio'",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE state = 'Illinois' OR state = 'Ohio' FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the maximum, average, and minimum enrollment for universities?\n### Response (TSQL):",
    "sql": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University",
    "dsql": "PROJECT MAX(enrollment), AVG(enrollment), MIN(enrollment) FROM AGGREGATE AVG(enrollment), MAX(enrollment), MIN(enrollment) FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the maximum, average, and minimum enrollment for all universities?\n### Response (TSQL):",
    "sql": "SELECT max(enrollment) ,  avg(enrollment) ,  min(enrollment) FROM University",
    "dsql": "PROJECT MAX(enrollment), AVG(enrollment), MIN(enrollment) FROM AGGREGATE AVG(enrollment), MAX(enrollment), MIN(enrollment) FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: List team name for all universities with enrollments above the average.\n### Response (TSQL):",
    "sql": "SELECT team_name FROM University WHERE enrollment  >  (SELECT avg(enrollment) FROM University)",
    "dsql": "PROJECT team_name FROM SELECT WHERE enrollment > PROJECT AVG(enrollment) FROM AGGREGATE AVG(enrollment) FROM University FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What are the names of all teams from universities that have more people enrolled than average ?\n### Response (TSQL):",
    "sql": "select team_name from university where enrollment  >  (select avg(enrollment) from university)",
    "dsql": "PROJECT team_name FROM SELECT WHERE enrollment > PROJECT AVG(enrollment) FROM AGGREGATE AVG(enrollment) FROM university FROM university "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: Show all home conferences.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT home_conference FROM University",
    "dsql": "PROJECT DISTINCT home_conference FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What are the different home conferences from the university table?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT home_conference FROM University",
    "dsql": "PROJECT DISTINCT home_conference FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: Show all home conferences and the number of universities in each conference.\n### Response (TSQL):",
    "sql": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference",
    "dsql": "PROJECT home_conference, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY home_conference FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: For every home conference, how many universities attended that conference?\n### Response (TSQL):",
    "sql": "SELECT home_conference ,  count(*) FROM University GROUP BY home_conference",
    "dsql": "PROJECT home_conference, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY home_conference FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: Which state has most number of universities?\n### Response (TSQL):",
    "sql": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT state FROM AGGREGATE COUNT(*) GROUP BY state FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the state with the most universities?\n### Response (TSQL):",
    "sql": "SELECT state FROM University GROUP BY state ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT state FROM AGGREGATE COUNT(*) GROUP BY state FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: Show all home conferences with average enrollment of universities above 2000.\n### Response (TSQL):",
    "sql": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
    "dsql": "PROJECT home_conference FROM SELECT WHERE AVG(enrollment) > 2000 FROM AGGREGATE AVG(enrollment), COUNT(*) GROUP BY home_conference FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What are the home conferences that have an average university enrollment above 2000?\n### Response (TSQL):",
    "sql": "SELECT home_conference FROM University GROUP BY home_conference HAVING avg(enrollment)  >  2000",
    "dsql": "PROJECT home_conference FROM SELECT WHERE AVG(enrollment) > 2000 FROM AGGREGATE AVG(enrollment), COUNT(*) GROUP BY home_conference FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: Which conference has the least number of total enrollment?\n### Response (TSQL):",
    "sql": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY SUM(enrollment) FROM PROJECT home_conference FROM AGGREGATE COUNT(*), SUM(enrollment) GROUP BY home_conference FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What are the home conferences with the fewest number of people enrolled?\n### Response (TSQL):",
    "sql": "SELECT home_conference FROM University GROUP BY home_conference ORDER BY sum(enrollment) LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY SUM(enrollment) FROM PROJECT home_conference FROM AGGREGATE COUNT(*), SUM(enrollment) GROUP BY home_conference FROM University "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: List all major name and major code in the order of their major code\n### Response (TSQL):",
    "sql": "SELECT major_name ,  major_code FROM Major ORDER BY major_code",
    "dsql": "ORDER BY major_code FROM PROJECT major_name, major_code FROM Major "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What are the names and codes for all majors ordered by their code?\n### Response (TSQL):",
    "sql": "SELECT major_name ,  major_code FROM Major ORDER BY major_code",
    "dsql": "ORDER BY major_code FROM PROJECT major_name, major_code FROM Major "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: Show all majors and major ranks for the university with name Augustana College.\n### Response (TSQL):",
    "sql": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
    "dsql": "PROJECT T1.rank, T3.major_name FROM SELECT WHERE T2.university_name = 'Augustana College' FROM JOIN AS T2 FROM University WITH JOIN AS T1 FROM Major_Ranking WITH AS T3 FROM Major ON T1.major_id = T3.major_id ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What are the ranks and names of all majors at Augustana College?\n### Response (TSQL):",
    "sql": "SELECT T1.rank ,  T3.major_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T2.university_name  =  'Augustana College'",
    "dsql": "PROJECT T1.rank, T3.major_name FROM SELECT WHERE T2.university_name = 'Augustana College' FROM JOIN AS T2 FROM University WITH JOIN AS T1 FROM Major_Ranking WITH AS T3 FROM Major ON T1.major_id = T3.major_id ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the name, city, state of the university with a rank 1 on Accounting major?\n### Response (TSQL):",
    "sql": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
    "dsql": "PROJECT T2.university_name, T2.city, T2.state FROM SELECT WHERE T1.rank = 1 AND T3.major_name = 'Accounting' FROM JOIN AS T2 FROM University WITH JOIN AS T1 FROM Major_Ranking WITH AS T3 FROM Major ON T1.major_id = T3.major_id ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the name, city, and state of the university with number 1 ranked Accounting major?\n### Response (TSQL):",
    "sql": "SELECT T2.university_name ,  T2.city ,  T2.state FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  =  1 AND T3.major_name  =  'Accounting'",
    "dsql": "PROJECT T2.university_name, T2.city, T2.state FROM SELECT WHERE T1.rank = 1 AND T3.major_name = 'Accounting' FROM JOIN AS T2 FROM University WITH JOIN AS T1 FROM Major_Ranking WITH AS T3 FROM Major ON T1.major_id = T3.major_id ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the name of the university that has most number of majors with rank 1?\n### Response (TSQL):",
    "sql": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.university_name FROM AGGREGATE COUNT(*) GROUP BY T2.university_name FROM SELECT WHERE T1.rank = 1 FROM JOIN AS T1 FROM Major_Ranking WITH AS T2 FROM University ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the name of the university with the most majors ranked number 1?\n### Response (TSQL):",
    "sql": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1 GROUP BY T2.university_name ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.university_name FROM AGGREGATE COUNT(*) GROUP BY T2.university_name FROM SELECT WHERE T1.rank = 1 FROM JOIN AS T1 FROM Major_Ranking WITH AS T2 FROM University ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: Show all university names without a major with rank 1?\n### Response (TSQL):",
    "sql": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1",
    "dsql": "EXCEPT PROJECT university_name FROM University WITH PROJECT T2.university_name FROM SELECT WHERE T1.rank = 1 FROM JOIN AS T1 FROM Major_Ranking WITH AS T2 FROM University ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What are the names of all universities without any majors ranked number 1?\n### Response (TSQL):",
    "sql": "SELECT university_name FROM University EXCEPT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 ON T1.university_id  =  T2.university_id WHERE T1.rank  =  1",
    "dsql": "EXCEPT PROJECT university_name FROM University WITH PROJECT T2.university_name FROM SELECT WHERE T1.rank = 1 FROM JOIN AS T1 FROM Major_Ranking WITH AS T2 FROM University ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: Show all university names with both major Accounting and major Urban Education.\n### Response (TSQL):",
    "sql": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
    "dsql": "INTERSECT PROJECT T2.university_name FROM SELECT WHERE T3.major_name = 'Accounting' FROM JOIN AS T2 FROM University WITH JOIN AS T1 FROM Major_Ranking WITH AS T3 FROM Major ON T1.major_id = T3.major_id ON T1.university_id = T2.university_id WITH PROJECT T2.university_name FROM SELECT WHERE T3.major_name = 'Urban Education' FROM JOIN AS T2 FROM University WITH JOIN AS T1 FROM Major_Ranking WITH AS T3 FROM Major ON T1.major_id = T3.major_id ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What are the names of all universities that have both Accounting and Urban Education majors?\n### Response (TSQL):",
    "sql": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Accounting' INTERSECT SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T3.major_name  =  'Urban Education'",
    "dsql": "INTERSECT PROJECT T2.university_name FROM SELECT WHERE T3.major_name = 'Accounting' FROM JOIN AS T2 FROM University WITH JOIN AS T1 FROM Major_Ranking WITH AS T3 FROM Major ON T1.major_id = T3.major_id ON T1.university_id = T2.university_id WITH PROJECT T2.university_name FROM SELECT WHERE T3.major_name = 'Urban Education' FROM JOIN AS T2 FROM University WITH JOIN AS T1 FROM Major_Ranking WITH AS T3 FROM Major ON T1.major_id = T3.major_id ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the name and overall ranking of universities in Wisconsin state?\n### Response (TSQL):",
    "sql": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
    "dsql": "PROJECT T1.university_name, T2.rank FROM SELECT WHERE T1.state = 'Wisconsin' FROM JOIN AS T1 FROM University WITH AS T2 FROM Overall_ranking ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the name and rank of every university in Wisconsin?\n### Response (TSQL):",
    "sql": "SELECT T1.university_name ,  T2.rank FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T1.state  =  'Wisconsin'",
    "dsql": "PROJECT T1.university_name, T2.rank FROM SELECT WHERE T1.state = 'Wisconsin' FROM JOIN AS T1 FROM University WITH AS T2 FROM Overall_ranking ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the university name with highest research point?\n### Response (TSQL):",
    "sql": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC T2.research_point FROM PROJECT T1.university_name FROM JOIN AS T1 FROM University WITH AS T2 FROM Overall_ranking ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the name of the university with the most research points?\n### Response (TSQL):",
    "sql": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.research_point DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC T2.research_point FROM PROJECT T1.university_name FROM JOIN AS T1 FROM University WITH AS T2 FROM Overall_ranking ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: List all university names in ascending order of their reputation points.\n### Response (TSQL):",
    "sql": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point",
    "dsql": "ORDER BY T2.reputation_point FROM PROJECT T1.university_name FROM JOIN AS T1 FROM University WITH AS T2 FROM Overall_ranking ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What are the names of all universities in ascending order of reputation points?\n### Response (TSQL):",
    "sql": "SELECT T1.university_name FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.reputation_point",
    "dsql": "ORDER BY T2.reputation_point FROM PROJECT T1.university_name FROM JOIN AS T1 FROM University WITH AS T2 FROM Overall_ranking ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the name of university with major Accounting ranked 3 or above?\n### Response (TSQL):",
    "sql": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\"",
    "dsql": "PROJECT T2.university_name FROM SELECT WHERE T1.rank <= 3 AND T3.major_name = \"Accounting\" FROM JOIN AS T2 FROM University WITH JOIN AS T1 FROM Major_Ranking WITH AS T3 FROM Major ON T1.major_id = T3.major_id ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What are the names of the university with an Accounting major ranked 3 or higher?\n### Response (TSQL):",
    "sql": "SELECT T2.university_name FROM Major_Ranking AS T1 JOIN University AS T2 JOIN Major AS T3 ON T1.university_id  =  T2.university_id AND T1.major_id  =  T3.major_id WHERE T1.rank  <=  3 AND T3.major_name  =  \"Accounting\"",
    "dsql": "PROJECT T2.university_name FROM SELECT WHERE T1.rank <= 3 AND T3.major_name = \"Accounting\" FROM JOIN AS T2 FROM University WITH JOIN AS T1 FROM Major_Ranking WITH AS T3 FROM Major ON T1.major_id = T3.major_id ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the total enrollment of universities with a overall rank 5 or below?\n### Response (TSQL):",
    "sql": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
    "dsql": "PROJECT SUM(enrollment) FROM AGGREGATE SUM(enrollment) FROM SELECT WHERE T2.rank >= 5 FROM JOIN AS T1 FROM University WITH AS T2 FROM Overall_ranking ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the total number of students enrolled in an university with a rank of 5 or below?\n### Response (TSQL):",
    "sql": "SELECT sum(enrollment) FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id WHERE T2.rank  >=  5",
    "dsql": "PROJECT SUM(enrollment) FROM AGGREGATE SUM(enrollment) FROM SELECT WHERE T2.rank >= 5 FROM JOIN AS T1 FROM University WITH AS T2 FROM Overall_ranking ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: Find the name and Citation point of the universities whose reputation points are top 3 and above.\n### Response (TSQL):",
    "sql": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC T2.Reputation_point FROM PROJECT T1.University_Name, T2.Citation_point FROM JOIN AS T1 FROM University WITH AS T2 FROM Overall_ranking ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What is the name and citation point of the unversities with the top 3 reputation points?\n### Response (TSQL):",
    "sql": "SELECT T1.University_Name ,  T2.Citation_point FROM University AS T1 JOIN Overall_ranking AS T2 ON T1.university_id  =  T2.university_id ORDER BY T2.Reputation_point DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC T2.Reputation_point FROM PROJECT T1.University_Name, T2.Citation_point FROM JOIN AS T1 FROM University WITH AS T2 FROM Overall_ranking ON T1.university_id = T2.university_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: which states do have more than two universities with enrollment smaller than 3000?\n### Response (TSQL):",
    "sql": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2",
    "dsql": "PROJECT state FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY state FROM SELECT WHERE enrollment < 3000 FROM university "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE university ( University_ID number, University_Name text, City text, State text, Team_Name text, Affiliation text, Enrollment number, Home_Conference text, PRIMARY KEY(University_ID)); CREATE TABLE overall_ranking ( Rank number, University_ID number, Reputation_point number, Research_point number, Citation_point number, Total number, PRIMARY KEY(University_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); CREATE TABLE major ( Major_ID number, Major_Name text, Major_Code number, PRIMARY KEY(Major_ID)); CREATE TABLE major_ranking ( Rank number, University_ID number, Major_ID number, PRIMARY KEY(Rank), FOREIGN KEY(Major_ID) REFERENCES major (Major_ID), FOREIGN KEY(University_ID) REFERENCES university (University_ID)); \n### Question: What are the states that have more than 2 universities with an enrollment less than 3000?\n### Response (TSQL):",
    "sql": "SELECT state FROM university WHERE enrollment  <  3000 GROUP BY state HAVING count(*)  >  2",
    "dsql": "PROJECT state FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY state FROM SELECT WHERE enrollment < 3000 FROM university "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the titles of movies that don\u2019t have any rating.\n### Response (TSQL):",
    "sql": "SELECT title FROM movies WHERE rating  =  'null'",
    "dsql": "PROJECT title FROM SELECT WHERE rating = 'null' FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are the names of movies that do not have any ratings?\n### Response (TSQL):",
    "sql": "SELECT title FROM movies WHERE rating  =  'null'",
    "dsql": "PROJECT title FROM SELECT WHERE rating = 'null' FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the names of movies whose rating is \u2018G\u2019.\n### Response (TSQL):",
    "sql": "SELECT title FROM movies WHERE rating  =  'G'",
    "dsql": "PROJECT title FROM SELECT WHERE rating = 'G' FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are names of movies that have a 'G' ratings?\n### Response (TSQL):",
    "sql": "SELECT title FROM movies WHERE rating  =  'G'",
    "dsql": "PROJECT title FROM SELECT WHERE rating = 'G' FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the title of the movie that is played in the Odeon theater.\n### Response (TSQL):",
    "sql": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "dsql": "PROJECT T1.title FROM SELECT WHERE T2.name = 'Odeon' FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are the movie titles for ones that are played in the Odeon theater?\n### Response (TSQL):",
    "sql": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "dsql": "PROJECT T1.title FROM SELECT WHERE T2.name = 'Odeon' FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the names of movies that are played in any theater and the name of the corresponding theater.\n### Response (TSQL):",
    "sql": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
    "dsql": "PROJECT T1.title, T2.name FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are the names of the movies that are played in any theater and the name of the corresponding theater?\n### Response (TSQL):",
    "sql": "SELECT T1.title ,  T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
    "dsql": "PROJECT T1.title, T2.name FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the number of movies whose rating is \u2018G\u2019.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM movies WHERE rating  =  'G'",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE rating = 'G' FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: How many movies had a 'G' rating?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM movies WHERE rating  =  'G'",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE rating = 'G' FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: How many movies are playing across all theaters?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: How many movies are playing in theaters?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: How many distinct movies are on in theaters?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
    "dsql": "PROJECT COUNT(DISTINCT T1.code) FROM AGGREGATE COUNT(DISTINCT T1.code) FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: How many different movies are playing?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT T1.code) FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie",
    "dsql": "PROJECT COUNT(DISTINCT T1.code) FROM AGGREGATE COUNT(DISTINCT T1.code) FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: How many distinct movie theaters are there?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT name) FROM movietheaters",
    "dsql": "PROJECT COUNT(DISTINCT name) FROM AGGREGATE COUNT(DISTINCT name) FROM movietheaters "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: How many different movie theaters exist?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT name) FROM movietheaters",
    "dsql": "PROJECT COUNT(DISTINCT name) FROM AGGREGATE COUNT(DISTINCT name) FROM movietheaters "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the rating of the movie whose name includes the word \u2018Citizen\u2019.\n### Response (TSQL):",
    "sql": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
    "dsql": "PROJECT rating FROM SELECT WHERE title LIKE '%Citizen%' FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What is the rating of the movie what has a name including a word like 'Citizen'?\n### Response (TSQL):",
    "sql": "SELECT rating FROM movies WHERE title LIKE '%Citizen%'",
    "dsql": "PROJECT rating FROM SELECT WHERE title LIKE '%Citizen%' FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the name of the cinemas that are playing movies with either rating \u2018G\u2019 or rating \u2018PG\u2019.\n### Response (TSQL):",
    "sql": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
    "dsql": "PROJECT title FROM SELECT WHERE rating = 'G' OR rating = 'PG' FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are the names of the movie theaters that are playing 'G' or 'PG' rated movies?\n### Response (TSQL):",
    "sql": "SELECT title FROM movies WHERE rating  =  'G' OR rating  =  'PG'",
    "dsql": "PROJECT title FROM SELECT WHERE rating = 'G' OR rating = 'PG' FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the name of the movies that are played in either cinema Odeon or Imperial.\n### Response (TSQL):",
    "sql": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
    "dsql": "PROJECT T1.title FROM SELECT WHERE T2.name = 'Odeon' OR T2.name = 'Imperial' FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are the titles of all the movies that played at the Odeon or Imperial theater?\n### Response (TSQL):",
    "sql": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' OR T2.name  =  'Imperial'",
    "dsql": "PROJECT T1.title FROM SELECT WHERE T2.name = 'Odeon' OR T2.name = 'Imperial' FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the name of the movie that is on in both Odeon and Imperial theaters.\n### Response (TSQL):",
    "sql": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
    "dsql": "INTERSECT PROJECT T1.title FROM SELECT WHERE T2.name = 'Odeon' FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie WITH PROJECT T1.title FROM SELECT WHERE T2.name = 'Imperial' FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What movie is playing at both the Odeon and Imperial theater?\n### Response (TSQL):",
    "sql": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon' INTERSECT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Imperial'",
    "dsql": "INTERSECT PROJECT T1.title FROM SELECT WHERE T2.name = 'Odeon' FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie WITH PROJECT T1.title FROM SELECT WHERE T2.name = 'Imperial' FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the name of all movies that are not played in Odeon theater.\n### Response (TSQL):",
    "sql": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "dsql": "EXCEPT PROJECT title FROM movies WITH PROJECT T1.title FROM SELECT WHERE T2.name = 'Odeon' FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are the names of every movie that is not playing at the Odeon theater?\n### Response (TSQL):",
    "sql": "SELECT title FROM movies EXCEPT SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T2.name  =  'Odeon'",
    "dsql": "EXCEPT PROJECT title FROM movies WITH PROJECT T1.title FROM SELECT WHERE T2.name = 'Odeon' FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: List in alphabetical order the titles of all movies.\n### Response (TSQL):",
    "sql": "SELECT title FROM movies ORDER BY title",
    "dsql": "ORDER BY title FROM PROJECT title FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are the movie names in alphabetical order?\n### Response (TSQL):",
    "sql": "SELECT title FROM movies ORDER BY title",
    "dsql": "ORDER BY title FROM PROJECT title FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the titles of all movies sorted by their ratings.\n### Response (TSQL):",
    "sql": "SELECT title FROM movies ORDER BY rating",
    "dsql": "ORDER BY rating FROM PROJECT title FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are the movie names sorted by rating?\n### Response (TSQL):",
    "sql": "SELECT title FROM movies ORDER BY rating",
    "dsql": "ORDER BY rating FROM PROJECT title FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the name of the theater that is playing the most number of movies.\n### Response (TSQL):",
    "sql": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT name FROM AGGREGATE COUNT(*) GROUP BY name FROM movietheaters "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What is the name of the theater playing the most movies?\n### Response (TSQL):",
    "sql": "SELECT name FROM movietheaters GROUP BY name ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT name FROM AGGREGATE COUNT(*) GROUP BY name FROM movietheaters "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the name of the movie that is played in the most number of theaters.\n### Response (TSQL):",
    "sql": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.title FROM AGGREGATE COUNT(*) GROUP BY T1.title FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What is the name of the film playing at the most number of theaters?\n### Response (TSQL):",
    "sql": "SELECT T1.title FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie GROUP BY T1.title ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.title FROM AGGREGATE COUNT(*) GROUP BY T1.title FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the number of movies in each rating.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  rating FROM movies GROUP BY rating",
    "dsql": "PROJECT COUNT(*), rating FROM AGGREGATE COUNT(*) GROUP BY rating FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: How many movies exist for each rating?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  rating FROM movies GROUP BY rating",
    "dsql": "PROJECT COUNT(*), rating FROM AGGREGATE COUNT(*) GROUP BY rating FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the number of movies whose rating is not null.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
    "dsql": "PROJECT COUNT(*), rating FROM AGGREGATE COUNT(*) GROUP BY rating FROM SELECT WHERE rating <> 'null' FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: How many movies have a rating that is not null?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  rating FROM movies WHERE rating != 'null' GROUP BY rating",
    "dsql": "PROJECT COUNT(*), rating FROM AGGREGATE COUNT(*) GROUP BY rating FROM SELECT WHERE rating <> 'null' FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the name of theaters that has at least one movie playing.\n### Response (TSQL):",
    "sql": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1",
    "dsql": "PROJECT name FROM SELECT WHERE COUNT(*) >= 1 FROM AGGREGATE COUNT(*) GROUP BY name FROM movietheaters "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are the names of every theater with at least one movie playing?\n### Response (TSQL):",
    "sql": "SELECT name FROM movietheaters GROUP BY name HAVING count(*)  >=  1",
    "dsql": "PROJECT name FROM SELECT WHERE COUNT(*) >= 1 FROM AGGREGATE COUNT(*) GROUP BY name FROM movietheaters "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Select the name of all movie theaters that are not currently showing a movie.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'",
    "dsql": "PROJECT DISTINCT name FROM SELECT WHERE Movie = 'null' FROM MovieTheaters "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are the names of all cinemas not showing any movies?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT name FROM MovieTheaters WHERE Movie  =  'null'",
    "dsql": "PROJECT DISTINCT name FROM SELECT WHERE Movie = 'null' FROM MovieTheaters "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Find the name of the movie theaters that are playing the movies whose rating is \u2018G\u2019.\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
    "dsql": "PROJECT T2.name FROM SELECT WHERE T1.rating = 'G' FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are the names of theaters playing 'G' rated movies?\n### Response (TSQL):",
    "sql": "SELECT T2.name FROM movies AS T1 JOIN movietheaters AS T2 ON T1.code  =  T2.movie WHERE T1.rating  =  'G'",
    "dsql": "PROJECT T2.name FROM SELECT WHERE T1.rating = 'G' FROM JOIN AS T1 FROM movies WITH AS T2 FROM movietheaters ON T1.code = T2.movie "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Select the title of all movies.\n### Response (TSQL):",
    "sql": "SELECT title FROM movies",
    "dsql": "PROJECT title FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are all of the movie names?\n### Response (TSQL):",
    "sql": "SELECT title FROM movies",
    "dsql": "PROJECT title FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Show all the distinct ratings in the database.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT rating FROM movies",
    "dsql": "PROJECT DISTINCT rating FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are the different movie ratings?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT rating FROM movies",
    "dsql": "PROJECT DISTINCT rating FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Show all information of all unrated movies.\n### Response (TSQL):",
    "sql": "SELECT * FROM movies WHERE rating  =  'null'",
    "dsql": "PROJECT * FROM SELECT WHERE rating = 'null' FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What is all the information about the unrated movies?\n### Response (TSQL):",
    "sql": "SELECT * FROM movies WHERE rating  =  'null'",
    "dsql": "PROJECT * FROM SELECT WHERE rating = 'null' FROM movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: Show the titles of movies not currently being shown in any theaters.\n### Response (TSQL):",
    "sql": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')",
    "dsql": "PROJECT Title FROM SELECT WHERE Code NOT IN PROJECT Movie FROM SELECT WHERE Movie <> 'null' FROM MovieTheaters FROM Movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Movies ( Code number, Title text, Rating text, PRIMARY KEY(Code)); CREATE TABLE MovieTheaters ( Code number, Name text, Movie number, PRIMARY KEY(Code), FOREIGN KEY(Movie) REFERENCES Movies (Code)); \n### Question: What are the names of the movies not being shown in any theaters?\n### Response (TSQL):",
    "sql": "SELECT Title FROM Movies WHERE Code NOT IN (SELECT Movie FROM MovieTheaters WHERE Movie != 'null')",
    "dsql": "PROJECT Title FROM SELECT WHERE Code NOT IN PROJECT Movie FROM SELECT WHERE Movie <> 'null' FROM MovieTheaters FROM Movies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Who receieved the heaviest package?\n### Response (TSQL):",
    "sql": "SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC T1.Weight FROM PROJECT T2.Name FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Recipient = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the name of the client who received the heaviest package?\n### Response (TSQL):",
    "sql": "SELECT T2.Name FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber ORDER BY T1.Weight DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC T1.Weight FROM PROJECT T2.Name FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Recipient = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the total weight of all the packages that customer Leo Wong sent?\n### Response (TSQL):",
    "sql": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
    "dsql": "PROJECT SUM(T1.Weight) FROM AGGREGATE SUM(T1.Weight) FROM SELECT WHERE T2.Name = \"Leo Wong\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the total weight for all packages that Leo Wong sent?\n### Response (TSQL):",
    "sql": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
    "dsql": "PROJECT SUM(T1.Weight) FROM AGGREGATE SUM(T1.Weight) FROM SELECT WHERE T2.Name = \"Leo Wong\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the position of Amy Wong?\n### Response (TSQL):",
    "sql": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";",
    "dsql": "PROJECT POSITION FROM SELECT WHERE Name = \"Amy Wong\" FROM Employee "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What position does Amy Wong have?\n### Response (TSQL):",
    "sql": "SELECT POSITION FROM Employee WHERE Name  =  \"Amy Wong\";",
    "dsql": "PROJECT POSITION FROM SELECT WHERE Name = \"Amy Wong\" FROM Employee "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is Turanga Leela's salary and position?\n### Response (TSQL):",
    "sql": "SELECT Salary ,  POSITION FROM Employee WHERE Name  =  \"Turanga Leela\";",
    "dsql": "PROJECT Salary, POSITION FROM SELECT WHERE Name = \"Turanga Leela\" FROM Employee "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the salary and position of the employee named Turanga Leela?\n### Response (TSQL):",
    "sql": "SELECT Salary ,  POSITION FROM Employee WHERE Name  =  \"Turanga Leela\";",
    "dsql": "PROJECT Salary, POSITION FROM SELECT WHERE Name = \"Turanga Leela\" FROM Employee "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the average salary of all intern jobs?\n### Response (TSQL):",
    "sql": "SELECT avg(Salary) FROM Employee WHERE POSITION  =  \"Intern\";",
    "dsql": "PROJECT AVG(Salary) FROM AGGREGATE AVG(Salary) FROM SELECT WHERE POSITION = \"Intern\" FROM Employee "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the average salary of an intern?\n### Response (TSQL):",
    "sql": "SELECT avg(Salary) FROM Employee WHERE POSITION  =  \"Intern\";",
    "dsql": "PROJECT AVG(Salary) FROM AGGREGATE AVG(Salary) FROM SELECT WHERE POSITION = \"Intern\" FROM Employee "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What level is Physician?\n### Response (TSQL):",
    "sql": "SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  \"Physician\";",
    "dsql": "PROJECT T1.Level FROM SELECT WHERE T2.position = \"Physician\" FROM JOIN AS T1 FROM Has_Clearance WITH AS T2 FROM Employee ON T1.Employee = T2.EmployeeID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the clearance level of a physician?\n### Response (TSQL):",
    "sql": "SELECT T1.Level FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID WHERE T2.position  =  \"Physician\";",
    "dsql": "PROJECT T1.Level FROM SELECT WHERE T2.position = \"Physician\" FROM JOIN AS T1 FROM Has_Clearance WITH AS T2 FROM Employee ON T1.Employee = T2.EmployeeID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: List Package Number of all package sent by Leo Wong?\n### Response (TSQL):",
    "sql": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
    "dsql": "PROJECT T1.PackageNumber FROM SELECT WHERE T2.Name = \"Leo Wong\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the number of all packages that Leo Wong sent?\n### Response (TSQL):",
    "sql": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"Leo Wong\";",
    "dsql": "PROJECT T1.PackageNumber FROM SELECT WHERE T2.Name = \"Leo Wong\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: List all package numbers received by Leo Wong ?\n### Response (TSQL):",
    "sql": "select t1.packagenumber from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber where t2.name = \"leo wong\";",
    "dsql": "PROJECT t1.packagenumber FROM SELECT WHERE t2.name = \"leo wong\" FROM JOIN AS t1 FROM package WITH AS t2 FROM client ON t1.recipient = t2.accountnumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are all of the package numbers received by Leo Wong?\n### Response (TSQL):",
    "sql": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\";",
    "dsql": "PROJECT T1.PackageNumber FROM SELECT WHERE T2.Name = \"Leo Wong\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Recipient = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: List all package sent or received by Leo Wong.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
    "dsql": "PROJECT DISTINCT T1.PackageNumber FROM SELECT WHERE T2.Name = \"Leo Wong\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are all the different package numbers that Leo Wong sent or received?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber OR T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
    "dsql": "PROJECT DISTINCT T1.PackageNumber FROM SELECT WHERE T2.Name = \"Leo Wong\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Count the number of packages sent by Ogden Wernstrom and received by Leo Wong.\n### Response (TSQL):",
    "sql": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
    "dsql": "INTERSECT PROJECT T1.PackageNumber FROM SELECT WHERE T2.Name = \"Ogden Wernstrom\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber WITH PROJECT T1.PackageNumber FROM SELECT WHERE T2.Name = \"Leo Wong\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Recipient = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: How many packages sent by Ogden Wernstrom and received by Leo Wong?\n### Response (TSQL):",
    "sql": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name = \"Ogden Wernstrom\" INTERSECT SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Recipient  =  T2.AccountNumber WHERE T2.Name = \"Leo Wong\"",
    "dsql": "INTERSECT PROJECT T1.PackageNumber FROM SELECT WHERE T2.Name = \"Ogden Wernstrom\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber WITH PROJECT T1.PackageNumber FROM SELECT WHERE T2.Name = \"Leo Wong\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Recipient = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the contents of package sent by John Zoidfarb?\n### Response (TSQL):",
    "sql": "SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"John Zoidfarb\";",
    "dsql": "PROJECT T1.Contents FROM SELECT WHERE T2.Name = \"John Zoidfarb\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the package contents of all those sent by John Zoidfarb?\n### Response (TSQL):",
    "sql": "SELECT T1.Contents FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name  =  \"John Zoidfarb\";",
    "dsql": "PROJECT T1.Contents FROM SELECT WHERE T2.Name = \"John Zoidfarb\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the heaviest package sent by the clients which 'John' is part of their name? List package number and weight.\n### Response (TSQL):",
    "sql": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";",
    "dsql": "PROJECT T1.PackageNumber, MAX(T1.Weight) FROM AGGREGATE MAX(T1.Weight) FROM SELECT WHERE T2.Name LIKE \"John\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the package number and weight of the heaviest package that was sent by a client named John or something similar?\n### Response (TSQL):",
    "sql": "SELECT T1.PackageNumber ,  max(T1.Weight) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber WHERE T2.Name LIKE \"John\";",
    "dsql": "PROJECT T1.PackageNumber, MAX(T1.Weight) FROM AGGREGATE MAX(T1.Weight) FROM SELECT WHERE T2.Name LIKE \"John\" FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: List package number and weight of top 3 lightest packages.\n### Response (TSQL):",
    "sql": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;",
    "dsql": "LIMIT 3 FROM ORDER BY ASC Weight FROM PROJECT PackageNumber, Weight FROM PACKAGE "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the package number and weight of the 3 lightest packages?\n### Response (TSQL):",
    "sql": "SELECT PackageNumber ,  Weight FROM PACKAGE ORDER BY Weight ASC LIMIT 3;",
    "dsql": "LIMIT 3 FROM ORDER BY ASC Weight FROM PROJECT PackageNumber, Weight FROM PACKAGE "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Who sent most number of packages? List client name and number of packages sent by that client.\n### Response (TSQL):",
    "sql": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.Name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.Sender FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the name of the client who sent the most packages and how many were there?\n### Response (TSQL):",
    "sql": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender ORDER BY count(*) DESC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.Name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.Sender FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Who received least number of packages ? List client name and number of packages received by that client .\n### Response (TSQL):",
    "sql": "select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT t2.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY t1.recipient FROM JOIN AS t1 FROM package WITH AS t2 FROM client ON t1.recipient = t2.accountnumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the smallest number of packages received and by whom ?\n### Response (TSQL):",
    "sql": "select t2.name ,  count(*) from package as t1 join client as t2 on t1.recipient  =  t2.accountnumber group by t1.recipient order by count(*) limit 1;",
    "dsql": "LIMIT 1 FROM ORDER BY COUNT(*) FROM PROJECT t2.name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY t1.recipient FROM JOIN AS t1 FROM package WITH AS t2 FROM client ON t1.recipient = t2.accountnumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Who sent more than one packages? List the client's name.\n### Response (TSQL):",
    "sql": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;",
    "dsql": "PROJECT T2.Name, COUNT(*) FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T1.Sender FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the name of all clients who sent more than one package?\n### Response (TSQL):",
    "sql": "SELECT T2.Name ,  count(*) FROM PACKAGE AS T1 JOIN Client AS T2 ON T1.Sender  =  T2.AccountNumber GROUP BY T1.Sender HAVING count(*)  >  1;",
    "dsql": "PROJECT T2.Name, COUNT(*) FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY T1.Sender FROM JOIN AS T1 FROM PACKAGE WITH AS T2 FROM Client ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the Coordinates of planet Mars?\n### Response (TSQL):",
    "sql": "SELECT Coordinates FROM Planet WHERE Name  =  \"Mars\";",
    "dsql": "PROJECT Coordinates FROM SELECT WHERE Name = \"Mars\" FROM Planet "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the coordinates of the planet named Mars?\n### Response (TSQL):",
    "sql": "SELECT Coordinates FROM Planet WHERE Name  =  \"Mars\";",
    "dsql": "PROJECT Coordinates FROM SELECT WHERE Name = \"Mars\" FROM Planet "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: List all Planets' names and coordinates in alphabetical order of name.\n### Response (TSQL):",
    "sql": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
    "dsql": "ORDER BY Name FROM PROJECT Name, Coordinates FROM Planet "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the names and coordinates of all planets in alphabetical order by name?\n### Response (TSQL):",
    "sql": "SELECT Name ,  Coordinates FROM Planet ORDER BY Name",
    "dsql": "ORDER BY Name FROM PROJECT Name, Coordinates FROM Planet "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: List all shipment id under Phillip J. Fry's management.\n### Response (TSQL):",
    "sql": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = \"Phillip J. Fry\";",
    "dsql": "PROJECT T1.ShipmentID FROM SELECT WHERE T2.Name = \"Phillip J. Fry\" FROM JOIN AS T1 FROM Shipment WITH AS T2 FROM Employee ON T1.Manager = T2.EmployeeID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the shipment IDs of every delivery managed by Phillip J Fry?\n### Response (TSQL):",
    "sql": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID WHERE T2.Name = \"Phillip J. Fry\";",
    "dsql": "PROJECT T1.ShipmentID FROM SELECT WHERE T2.Name = \"Phillip J. Fry\" FROM JOIN AS T1 FROM Shipment WITH AS T2 FROM Employee ON T1.Manager = T2.EmployeeID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: List the dates of all shipments.\n### Response (TSQL):",
    "sql": "SELECT Date FROM Shipment;",
    "dsql": "PROJECT Date FROM Shipment "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the dates of every shipment in the database?\n### Response (TSQL):",
    "sql": "SELECT Date FROM Shipment;",
    "dsql": "PROJECT Date FROM Shipment "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: List all shipment ids for the planet Mars.\n### Response (TSQL):",
    "sql": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  \"Mars\";",
    "dsql": "PROJECT T1.ShipmentID FROM SELECT WHERE T2.Name = \"Mars\" FROM JOIN AS T1 FROM Shipment WITH AS T2 FROM Planet ON T1.Planet = T2.PlanetID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the shipment ids for the planet Mars?\n### Response (TSQL):",
    "sql": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID WHERE T2.Name  =  \"Mars\";",
    "dsql": "PROJECT T1.ShipmentID FROM SELECT WHERE T2.Name = \"Mars\" FROM JOIN AS T1 FROM Shipment WITH AS T2 FROM Planet ON T1.Planet = T2.PlanetID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: List all shipment ids for the planet Mars and under the management of Turanga Leela.\n### Response (TSQL):",
    "sql": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\";",
    "dsql": "PROJECT T1.ShipmentID FROM SELECT WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\" FROM JOIN AS T1 FROM Shipment WITH JOIN AS T2 FROM Planet WITH AS T1 FROM Shipment ON T3.EmployeeID = T1.Manager ON T1.Planet = T2.PlanetID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the ids of all shipments on the planet Mars that are managed by Turanga Leela?\n### Response (TSQL):",
    "sql": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\";",
    "dsql": "PROJECT T1.ShipmentID FROM SELECT WHERE T2.Name = \"Mars\" AND T3.Name = \"Turanga Leela\" FROM JOIN AS T1 FROM Shipment WITH JOIN AS T2 FROM Planet WITH AS T1 FROM Shipment ON T3.EmployeeID = T1.Manager ON T1.Planet = T2.PlanetID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: List all shipment ids on the planet Mars or under the management of Turanga Leela.\n### Response (TSQL):",
    "sql": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\";",
    "dsql": "PROJECT T1.ShipmentID FROM SELECT WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\" FROM JOIN AS T1 FROM Shipment WITH JOIN AS T2 FROM Planet WITH AS T1 FROM Shipment ON T3.EmployeeID = T1.Manager ON T1.Planet = T2.PlanetID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the ids for all shipments on the planet Mars that Turanga Leela manages?\n### Response (TSQL):",
    "sql": "SELECT T1.ShipmentID FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID JOIN Employee AS T3 ON T3.EmployeeID = T1.Manager WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\";",
    "dsql": "PROJECT T1.ShipmentID FROM SELECT WHERE T2.Name = \"Mars\" OR T3.Name = \"Turanga Leela\" FROM JOIN AS T1 FROM Shipment WITH JOIN AS T2 FROM Planet WITH AS T1 FROM Shipment ON T3.EmployeeID = T1.Manager ON T1.Planet = T2.PlanetID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the total shipments in each planet? List the planet name and total shipments.\n### Response (TSQL):",
    "sql": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
    "dsql": "PROJECT T2.Name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.Planet FROM JOIN AS T1 FROM Shipment WITH AS T2 FROM Planet ON T1.Planet = T2.PlanetID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: How many shipments take place on each planet?\n### Response (TSQL):",
    "sql": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet;",
    "dsql": "PROJECT T2.Name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.Planet FROM JOIN AS T1 FROM Shipment WITH AS T2 FROM Planet ON T1.Planet = T2.PlanetID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Which planet has most shipments? List the planet name.\n### Response (TSQL):",
    "sql": "SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.Name FROM AGGREGATE COUNT(*) GROUP BY T1.Planet FROM JOIN AS T1 FROM Shipment WITH AS T2 FROM Planet ON T1.Planet = T2.PlanetID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the name of the planet with the most shipments?\n### Response (TSQL):",
    "sql": "SELECT T2.Name FROM Shipment AS T1 JOIN Planet AS T2 ON T1.Planet = T2.PlanetID GROUP BY T1.Planet ORDER BY count(*) DESC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T2.Name FROM AGGREGATE COUNT(*) GROUP BY T1.Planet FROM JOIN AS T1 FROM Shipment WITH AS T2 FROM Planet ON T1.Planet = T2.PlanetID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: List the manger's name and number of shipments under his management.\n### Response (TSQL):",
    "sql": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;",
    "dsql": "PROJECT T2.Name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.Manager FROM JOIN AS T1 FROM Shipment WITH AS T2 FROM Employee ON T1.Manager = T2.EmployeeID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the number of shipments managed and names of each manager?\n### Response (TSQL):",
    "sql": "SELECT T2.Name ,  count(*) FROM Shipment AS T1 JOIN Employee AS T2 ON T1.Manager = T2.EmployeeID GROUP BY T1.Manager;",
    "dsql": "PROJECT T2.Name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY T1.Manager FROM JOIN AS T1 FROM Shipment WITH AS T2 FROM Employee ON T1.Manager = T2.EmployeeID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Calculate total weight of package shipped on Mars.\n### Response (TSQL):",
    "sql": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
    "dsql": "PROJECT SUM(T1.Weight) FROM AGGREGATE SUM(T1.Weight) FROM SELECT WHERE T3.Name = \"Mars\" FROM JOIN AS T1 FROM PACKAGE WITH JOIN AS T2 FROM Shipment WITH AS T3 FROM Planet ON T2.Planet = T3.PlanetID ON T1.Shipment = T2.ShipmentID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: what is the total weight of all packages shipped on Mars?\n### Response (TSQL):",
    "sql": "SELECT sum(T1.Weight) FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
    "dsql": "PROJECT SUM(T1.Weight) FROM AGGREGATE SUM(T1.Weight) FROM SELECT WHERE T3.Name = \"Mars\" FROM JOIN AS T1 FROM PACKAGE WITH JOIN AS T2 FROM Shipment WITH AS T3 FROM Planet ON T2.Planet = T3.PlanetID ON T1.Shipment = T2.ShipmentID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Calculate total weight of package shipped in each planet . show the name of each planet .\n### Response (TSQL):",
    "sql": "select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;",
    "dsql": "PROJECT t3.name, SUM(t1.weight) FROM AGGREGATE SUM(t1.weight), COUNT(*) GROUP BY t2.planet FROM JOIN AS t1 FROM package WITH JOIN AS t2 FROM shipment WITH AS t3 FROM planet ON t2.planet = t3.planetid ON t1.shipment = t2.shipmentid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: what is the total package weight for each planet, list its name ?\n### Response (TSQL):",
    "sql": "select t3.name ,  sum(t1.weight) from package as t1 join shipment as t2 on t1.shipment = t2.shipmentid join planet as t3 on t2.planet = t3.planetid group by t2.planet;",
    "dsql": "PROJECT t3.name, SUM(t1.weight) FROM AGGREGATE SUM(t1.weight), COUNT(*) GROUP BY t2.planet FROM JOIN AS t1 FROM package WITH JOIN AS t2 FROM shipment WITH AS t3 FROM planet ON t2.planet = t3.planetid ON t1.shipment = t2.shipmentid "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Which planet has total weight of shipment greater than 30? List planet name.\n### Response (TSQL):",
    "sql": "SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;",
    "dsql": "PROJECT T3.Name FROM SELECT WHERE SUM(T1.Weight) > 30 FROM AGGREGATE COUNT(*), SUM(T1.Weight) GROUP BY T2.Planet FROM JOIN AS T1 FROM PACKAGE WITH JOIN AS T2 FROM Shipment WITH AS T3 FROM Planet ON T2.Planet = T3.PlanetID ON T1.Shipment = T2.ShipmentID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the names of all planets tjat have a total shipment weight greater than 30?\n### Response (TSQL):",
    "sql": "SELECT T3.Name FROM PACKAGE AS T1 JOIN Shipment AS T2 ON T1.Shipment = T2.ShipmentID JOIN Planet AS T3 ON T2.Planet = T3.PlanetID GROUP BY T2.Planet HAVING sum(T1.Weight)  >  30;",
    "dsql": "PROJECT T3.Name FROM SELECT WHERE SUM(T1.Weight) > 30 FROM AGGREGATE COUNT(*), SUM(T1.Weight) GROUP BY T2.Planet FROM JOIN AS T1 FROM PACKAGE WITH JOIN AS T2 FROM Shipment WITH AS T3 FROM Planet ON T2.Planet = T3.PlanetID ON T1.Shipment = T2.ShipmentID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: List package number of package shipped in planet Omicron Persei 8 and sent by Zapp Brannigan.\n### Response (TSQL):",
    "sql": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\";",
    "dsql": "PROJECT T1.PackageNumber FROM SELECT WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\" FROM JOIN AS T2 FROM Client WITH JOIN AS T1 FROM PACKAGE WITH JOIN AS T3 FROM Shipment WITH AS T4 FROM Planet ON T3.Planet = T4.PlanetID ON T1.Shipment = T3.ShipmentID ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the number of packages sent by Zapp Brannigan and shipped on the Omicron Persei 8?\n### Response (TSQL):",
    "sql": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\";",
    "dsql": "PROJECT T1.PackageNumber FROM SELECT WHERE T2.Name = \"Zapp Brannigan\" AND T4.Name = \"Omicron Persei 8\" FROM JOIN AS T2 FROM Client WITH JOIN AS T1 FROM PACKAGE WITH JOIN AS T3 FROM Shipment WITH AS T4 FROM Planet ON T3.Planet = T4.PlanetID ON T1.Shipment = T3.ShipmentID ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: List package number of packages shipped in Omicron Persei 8 planet or sent by Zapp Brannigan.\n### Response (TSQL):",
    "sql": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";",
    "dsql": "PROJECT T1.PackageNumber FROM SELECT WHERE T2.Name = \"Zapp Brannigan\" OR T4.Name = \"Omicron Persei 8\" FROM JOIN AS T2 FROM Client WITH JOIN AS T1 FROM PACKAGE WITH JOIN AS T3 FROM Shipment WITH AS T4 FROM Planet ON T3.Planet = T4.PlanetID ON T1.Shipment = T3.ShipmentID ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the number of packages shipped on Omicron Persei 8 planet or sent by Zapp Brannigan?\n### Response (TSQL):",
    "sql": "SELECT T1.PackageNumber FROM PACKAGE AS T1 JOIN Client AS T2 ON  T1.Sender = T2.AccountNumber JOIN Shipment AS T3 ON T1.Shipment = T3.ShipmentID JOIN Planet AS T4 ON T3.Planet = T4.PlanetID WHERE T2.Name  =  \"Zapp Brannigan\" OR T4.Name  =  \"Omicron Persei 8\";",
    "dsql": "PROJECT T1.PackageNumber FROM SELECT WHERE T2.Name = \"Zapp Brannigan\" OR T4.Name = \"Omicron Persei 8\" FROM JOIN AS T2 FROM Client WITH JOIN AS T1 FROM PACKAGE WITH JOIN AS T3 FROM Shipment WITH AS T4 FROM Planet ON T3.Planet = T4.PlanetID ON T1.Shipment = T3.ShipmentID ON T1.Sender = T2.AccountNumber "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Which packages have weight between 10 and 30? List the package number and weight.\n### Response (TSQL):",
    "sql": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;",
    "dsql": "PROJECT PackageNumber, Weight FROM SELECT WHERE Weight BETWEEN 10 AND 30 FROM PACKAGE "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the package numbers and weights that are between 10 and 30?\n### Response (TSQL):",
    "sql": "SELECT PackageNumber ,  Weight FROM PACKAGE WHERE Weight BETWEEN 10 AND 30;",
    "dsql": "PROJECT PackageNumber, Weight FROM SELECT WHERE Weight BETWEEN 10 AND 30 FROM PACKAGE "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Which employees do not have clearance in Mars? List employee's name.\n### Response (TSQL):",
    "sql": "SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
    "dsql": "EXCEPT PROJECT Name FROM Employee WITH PROJECT T2.Name FROM SELECT WHERE T3.Name = \"Mars\" FROM JOIN AS T2 FROM Employee WITH JOIN AS T1 FROM Has_Clearance WITH AS T3 FROM Planet ON T1.Planet = T3.PlanetID ON T1.Employee = T2.EmployeeID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the names of all employees who don't have clearance on Mars?\n### Response (TSQL):",
    "sql": "SELECT Name FROM Employee EXCEPT SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name = \"Mars\";",
    "dsql": "EXCEPT PROJECT Name FROM Employee WITH PROJECT T2.Name FROM SELECT WHERE T3.Name = \"Mars\" FROM JOIN AS T2 FROM Employee WITH JOIN AS T1 FROM Has_Clearance WITH AS T3 FROM Planet ON T1.Planet = T3.PlanetID ON T1.Employee = T2.EmployeeID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Which employees have clearance in Omega III? List employees' name.\n### Response (TSQL):",
    "sql": "SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  \"Omega III\";",
    "dsql": "PROJECT T2.Name FROM SELECT WHERE T3.Name = \"Omega III\" FROM JOIN AS T2 FROM Employee WITH JOIN AS T1 FROM Has_Clearance WITH AS T3 FROM Planet ON T1.Planet = T3.PlanetID ON T1.Employee = T2.EmployeeID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the names of all employees with clearance on Omega III?\n### Response (TSQL):",
    "sql": "SELECT T2.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID WHERE T3.Name  =  \"Omega III\";",
    "dsql": "PROJECT T2.Name FROM SELECT WHERE T3.Name = \"Omega III\" FROM JOIN AS T2 FROM Employee WITH JOIN AS T1 FROM Has_Clearance WITH AS T3 FROM Planet ON T1.Planet = T3.PlanetID ON T1.Employee = T2.EmployeeID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Which planets that have exact one employee has clearance? List planets' name.\n### Response (TSQL):",
    "sql": "SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;",
    "dsql": "PROJECT T3.Name FROM SELECT WHERE COUNT(*) = 1 FROM AGGREGATE COUNT(*) GROUP BY T1.Planet FROM JOIN AS T2 FROM Employee WITH JOIN AS T1 FROM Has_Clearance WITH AS T3 FROM Planet ON T1.Planet = T3.PlanetID ON T1.Employee = T2.EmployeeID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the names of all planets with one employee that has clearance?\n### Response (TSQL):",
    "sql": "SELECT T3.Name FROM Has_Clearance AS T1 JOIN Employee AS T2 ON T1.Employee = T2.EmployeeID JOIN Planet AS T3 ON T1.Planet = T3.PlanetID GROUP BY T1.Planet HAVING count(*)  =  1;",
    "dsql": "PROJECT T3.Name FROM SELECT WHERE COUNT(*) = 1 FROM AGGREGATE COUNT(*) GROUP BY T1.Planet FROM JOIN AS T2 FROM Employee WITH JOIN AS T1 FROM Has_Clearance WITH AS T3 FROM Planet ON T1.Planet = T3.PlanetID ON T1.Employee = T2.EmployeeID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Which employees have salaries between 5000 and 10000? List employees' name.\n### Response (TSQL):",
    "sql": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
    "dsql": "PROJECT Name FROM SELECT WHERE Salary BETWEEN 5000 AND 10000 FROM Employee "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the employees's names for those that have salaries between 5000 and 10000?\n### Response (TSQL):",
    "sql": "SELECT Name FROM Employee WHERE Salary BETWEEN 5000 AND 10000",
    "dsql": "PROJECT Name FROM SELECT WHERE Salary BETWEEN 5000 AND 10000 FROM Employee "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Find the name of employees whose salary is above the average salary or more than 5000.\n### Response (TSQL):",
    "sql": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)",
    "dsql": "PROJECT Name FROM SELECT WHERE Salary > 5000 OR Salary > PROJECT AVG(salary) FROM AGGREGATE AVG(salary) FROM employee FROM Employee "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What are the names of all employees who have a salary greater than average or more than 5000?\n### Response (TSQL):",
    "sql": "SELECT Name FROM Employee WHERE Salary  >  5000 OR Salary  >  (SELECT avg(salary) FROM employee)",
    "dsql": "PROJECT Name FROM SELECT WHERE Salary > 5000 OR Salary > PROJECT AVG(salary) FROM AGGREGATE AVG(salary) FROM employee FROM Employee "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: Find the number of employees who do not have clearance in Mars .\n### Response (TSQL):",
    "sql": "select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = \"mars\" );",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE employeeid NOT IN PROJECT t2.employeeid FROM SELECT WHERE t3.name = \"mars\" FROM JOIN AS t2 FROM employee WITH JOIN AS t1 FROM has_clearance WITH AS t3 FROM planet ON t1.planet = t3.planetid ON t1.employee = t2.employeeid FROM employee "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Employee ( EmployeeID number, Name text, Position text, Salary number, Remarks text, PRIMARY KEY(EmployeeID)); CREATE TABLE Planet ( PlanetID number, Name text, Coordinates number, PRIMARY KEY(PlanetID)); CREATE TABLE Shipment ( ShipmentID number, Date time, Manager number, Planet number, PRIMARY KEY(ShipmentID), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Manager) REFERENCES Employee (EmployeeID)); CREATE TABLE Has_Clearance ( Employee number, Planet number, Level number, PRIMARY KEY(Employee), FOREIGN KEY(Planet) REFERENCES Planet (PlanetID), FOREIGN KEY(Employee) REFERENCES Employee (EmployeeID)); CREATE TABLE Client ( AccountNumber number, Name text, PRIMARY KEY(AccountNumber)); CREATE TABLE Package ( Shipment number, PackageNumber number, Contents text, Weight number, Sender number, Recipient number, PRIMARY KEY(Shipment), FOREIGN KEY(Recipient) REFERENCES Client (AccountNumber), FOREIGN KEY(Sender) REFERENCES Client (AccountNumber), FOREIGN KEY(Shipment) REFERENCES Shipment (ShipmentID)); \n### Question: What is the number of employees that do not have clearance on Mars ?\n### Response (TSQL):",
    "sql": "select count(*) from employee where employeeid not in ( select t2.employeeid from has_clearance as t1 join employee as t2 on t1.employee = t2.employeeid join planet as t3 on t1.planet = t3.planetid where t3.name = \"mars\" );",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE employeeid NOT IN PROJECT t2.employeeid FROM SELECT WHERE t3.name = \"mars\" FROM JOIN AS t2 FROM employee WITH JOIN AS t1 FROM has_clearance WITH AS t3 FROM planet ON t1.planet = t3.planetid ON t1.employee = t2.employeeid FROM employee "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: How many games are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM game",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM game "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Count the number of games.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM game",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM game "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: List the Title and Developers of all games ordered by units sold from large to small.\n### Response (TSQL):",
    "sql": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC",
    "dsql": "ORDER BY DESC Units_sold_Millions FROM PROJECT Title, Developers FROM game "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are the titles and developers of all games, sorted by units sold descending?\n### Response (TSQL):",
    "sql": "SELECT Title ,  Developers FROM game ORDER BY Units_sold_Millions DESC",
    "dsql": "ORDER BY DESC Units_sold_Millions FROM PROJECT Title, Developers FROM game "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What is the average units sold in millions of the games that are not developed by Nintendo?\n### Response (TSQL):",
    "sql": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
    "dsql": "PROJECT AVG(Units_sold_Millions) FROM AGGREGATE AVG(Units_sold_Millions) FROM SELECT WHERE developers <> 'Nintendo' FROM game "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Return the average number of units sold in millions for games not developed by Nintendo.\n### Response (TSQL):",
    "sql": "SELECT avg(Units_sold_Millions) FROM game WHERE developers != 'Nintendo'",
    "dsql": "PROJECT AVG(Units_sold_Millions) FROM AGGREGATE AVG(Units_sold_Millions) FROM SELECT WHERE developers <> 'Nintendo' FROM game "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are the names and market districts of all platforms?\n### Response (TSQL):",
    "sql": "SELECT Platform_name ,  Market_district FROM platform",
    "dsql": "PROJECT Platform_name, Market_district FROM platform "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Return all platform names and corresponding market districts.\n### Response (TSQL):",
    "sql": "SELECT Platform_name ,  Market_district FROM platform",
    "dsql": "PROJECT Platform_name, Market_district FROM platform "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are the names and id of platforms whose download rank is 1?\n### Response (TSQL):",
    "sql": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
    "dsql": "PROJECT Platform_name, Platform_ID FROM SELECT WHERE Download_rank = 1 FROM platform "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Return the names and ids of all platforms with the download rank of 1.\n### Response (TSQL):",
    "sql": "SELECT Platform_name ,  Platform_ID FROM platform WHERE Download_rank  =  1",
    "dsql": "PROJECT Platform_name, Platform_ID FROM SELECT WHERE Download_rank = 1 FROM platform "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are the maximum and minimum rank of the year of players.\n### Response (TSQL):",
    "sql": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player",
    "dsql": "PROJECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM AGGREGATE MIN(Rank_of_the_year), MAX(Rank_of_the_year) FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Give the maximum and minimum rank of the year across all players.\n### Response (TSQL):",
    "sql": "SELECT max(Rank_of_the_year) ,  min(Rank_of_the_year) FROM player",
    "dsql": "PROJECT MAX(Rank_of_the_year), MIN(Rank_of_the_year) FROM AGGREGATE MIN(Rank_of_the_year), MAX(Rank_of_the_year) FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: How many players have rank of the year smaller than 3?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Rank_of_the_year <= 3 FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Count the number of players that have a rank of year of at most 3.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM player WHERE Rank_of_the_year  <=  3",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE Rank_of_the_year <= 3 FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: List all player names in ascending alphabetical order.\n### Response (TSQL):",
    "sql": "SELECT Player_name FROM player ORDER BY Player_name ASC",
    "dsql": "ORDER BY ASC Player_name FROM PROJECT Player_name FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are the names of all players in alphabetical order?\n### Response (TSQL):",
    "sql": "SELECT Player_name FROM player ORDER BY Player_name ASC",
    "dsql": "ORDER BY ASC Player_name FROM PROJECT Player_name FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: List names and colleges of all players in descending order of rank of the year.\n### Response (TSQL):",
    "sql": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC",
    "dsql": "ORDER BY DESC Rank_of_the_year FROM PROJECT Player_name, College FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are the names and colleges of all players, ordered by rank of year descending?\n### Response (TSQL):",
    "sql": "SELECT Player_name ,  College FROM player ORDER BY Rank_of_the_year DESC",
    "dsql": "ORDER BY DESC Rank_of_the_year FROM PROJECT Player_name, College FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Please show the names and rank of players that have played the game titled \"Super Mario World\".\n### Response (TSQL):",
    "sql": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\"",
    "dsql": "PROJECT T3.Player_name, T3.rank_of_the_year FROM SELECT WHERE T1.Title = \"Super Mario World\" FROM JOIN AS T1 FROM game WITH JOIN AS T2 FROM game_player WITH AS T3 FROM player ON T2.Player_ID = T3.Player_ID ON T1.Game_ID = T2.Game_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are the names and ranks of players who have played the game with the title \"Super Mario World\"?\n### Response (TSQL):",
    "sql": "SELECT T3.Player_name ,  T3.rank_of_the_year FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T1.Title  =  \"Super Mario World\"",
    "dsql": "PROJECT T3.Player_name, T3.rank_of_the_year FROM SELECT WHERE T1.Title = \"Super Mario World\" FROM JOIN AS T1 FROM game WITH JOIN AS T2 FROM game_player WITH AS T3 FROM player ON T2.Player_ID = T3.Player_ID ON T1.Game_ID = T2.Game_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Show the distinct developer of games played by players that go to college \"Auburn\".\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
    "dsql": "PROJECT DISTINCT T1.Developers FROM SELECT WHERE T3.College = \"Auburn\" FROM JOIN AS T1 FROM game WITH JOIN AS T2 FROM game_player WITH AS T3 FROM player ON T2.Player_ID = T3.Player_ID ON T1.Game_ID = T2.Game_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are the different developers of games that are played by players that attend Auburn college?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.Developers FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
    "dsql": "PROJECT DISTINCT T1.Developers FROM SELECT WHERE T3.College = \"Auburn\" FROM JOIN AS T1 FROM game WITH JOIN AS T2 FROM game_player WITH AS T3 FROM player ON T2.Player_ID = T3.Player_ID ON T1.Game_ID = T2.Game_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What is the average number of units sold in millions of games played by players with position \"Guard\"?\n### Response (TSQL):",
    "sql": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
    "dsql": "PROJECT AVG(Units_sold_Millions) FROM AGGREGATE AVG(Units_sold_Millions) FROM SELECT WHERE T3.Position = \"Guard\" FROM JOIN AS T1 FROM game WITH JOIN AS T2 FROM game_player WITH AS T3 FROM player ON T2.Player_ID = T3.Player_ID ON T1.Game_ID = T2.Game_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Return the average number of units sold in millions among games played by players who have the position Guard.\n### Response (TSQL):",
    "sql": "SELECT avg(Units_sold_Millions) FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
    "dsql": "PROJECT AVG(Units_sold_Millions) FROM AGGREGATE AVG(Units_sold_Millions) FROM SELECT WHERE T3.Position = \"Guard\" FROM JOIN AS T1 FROM game WITH JOIN AS T2 FROM game_player WITH AS T3 FROM player ON T2.Player_ID = T3.Player_ID ON T1.Game_ID = T2.Game_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Please list the title and platform name of games.\n### Response (TSQL):",
    "sql": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID",
    "dsql": "PROJECT T1.Title, T2.Platform_name FROM JOIN AS T1 FROM game WITH AS T2 FROM platform ON T1.Platform_ID = T2.Platform_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are the titles and platform names of all games?\n### Response (TSQL):",
    "sql": "SELECT T1.Title ,  T2.Platform_name FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID",
    "dsql": "PROJECT T1.Title, T2.Platform_name FROM JOIN AS T1 FROM game WITH AS T2 FROM platform ON T1.Platform_ID = T2.Platform_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Please list the title of games with platforms that have market district in Asia or USA.\n### Response (TSQL):",
    "sql": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\"",
    "dsql": "PROJECT T1.Title FROM SELECT WHERE T2.Market_district = \"Asia\" OR T2.Market_district = \"USA\" FROM JOIN AS T1 FROM game WITH AS T2 FROM platform ON T1.Platform_ID = T2.Platform_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are the titles of games that have platforms in the market districts of Asia or the USA?\n### Response (TSQL):",
    "sql": "SELECT T1.Title FROM game AS T1 JOIN platform AS T2 ON T1.Platform_ID  =  T2.Platform_ID WHERE T2.Market_district  =  \"Asia\" OR T2.Market_district  =  \"USA\"",
    "dsql": "PROJECT T1.Title FROM SELECT WHERE T2.Market_district = \"Asia\" OR T2.Market_district = \"USA\" FROM JOIN AS T1 FROM game WITH AS T2 FROM platform ON T1.Platform_ID = T2.Platform_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: List the name of each franchise and the number of games belonging to that franchise.\n### Response (TSQL):",
    "sql": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise",
    "dsql": "PROJECT Franchise, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Franchise FROM game "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: How many games are there from each Franchise?\n### Response (TSQL):",
    "sql": "SELECT Franchise ,  COUNT(*) FROM game GROUP BY Franchise",
    "dsql": "PROJECT Franchise, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY Franchise FROM game "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: List the name of franchise that have the most number of games.\n### Response (TSQL):",
    "sql": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Franchise FROM AGGREGATE COUNT(*) GROUP BY Franchise FROM game "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Which franchise has the most games?\n### Response (TSQL):",
    "sql": "SELECT Franchise FROM game GROUP BY Franchise ORDER BY COUNT(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT Franchise FROM AGGREGATE COUNT(*) GROUP BY Franchise FROM game "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: List the names of franchises that have at least two games.\n### Response (TSQL):",
    "sql": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2",
    "dsql": "PROJECT Franchise FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY Franchise FROM game "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are the names of franchises that have two or more games?\n### Response (TSQL):",
    "sql": "SELECT Franchise FROM game GROUP BY Franchise HAVING COUNT(*)  >=  2",
    "dsql": "PROJECT Franchise FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY Franchise FROM game "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: List the name of players that do not play any game.\n### Response (TSQL):",
    "sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
    "dsql": "PROJECT Player_name FROM SELECT WHERE Player_ID NOT IN PROJECT Player_ID FROM game_player FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are the names of players who do not play any games?\n### Response (TSQL):",
    "sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM game_player)",
    "dsql": "PROJECT Player_name FROM SELECT WHERE Player_ID NOT IN PROJECT Player_ID FROM game_player FROM player "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Show the title of games that are played by both players from college \"Oklahoma\" and players from college \"Auburn\".\n### Response (TSQL):",
    "sql": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
    "dsql": "INTERSECT PROJECT T1.Title FROM SELECT WHERE T3.College = \"Oklahoma\" FROM JOIN AS T1 FROM game WITH JOIN AS T2 FROM game_player WITH AS T3 FROM player ON T2.Player_ID = T3.Player_ID ON T1.Game_ID = T2.Game_ID WITH PROJECT T1.Title FROM SELECT WHERE T3.College = \"Auburn\" FROM JOIN AS T1 FROM game WITH JOIN AS T2 FROM game_player WITH AS T3 FROM player ON T2.Player_ID = T3.Player_ID ON T1.Game_ID = T2.Game_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are the titles of games that are played by players from Oklahoma college or Auburn college?\n### Response (TSQL):",
    "sql": "SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Oklahoma\" INTERSECT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.College  =  \"Auburn\"",
    "dsql": "INTERSECT PROJECT T1.Title FROM SELECT WHERE T3.College = \"Oklahoma\" FROM JOIN AS T1 FROM game WITH JOIN AS T2 FROM game_player WITH AS T3 FROM player ON T2.Player_ID = T3.Player_ID ON T1.Game_ID = T2.Game_ID WITH PROJECT T1.Title FROM SELECT WHERE T3.College = \"Auburn\" FROM JOIN AS T1 FROM game WITH JOIN AS T2 FROM game_player WITH AS T3 FROM player ON T2.Player_ID = T3.Player_ID ON T1.Game_ID = T2.Game_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Show all distinct franchises of games.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT Franchise FROM game",
    "dsql": "PROJECT DISTINCT Franchise FROM game "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are all the distinct franchises?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT Franchise FROM game",
    "dsql": "PROJECT DISTINCT Franchise FROM game "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: Show the title of games that are not played by any player who is in the Guard position.\n### Response (TSQL):",
    "sql": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
    "dsql": "EXCEPT PROJECT Title FROM game WITH PROJECT T1.Title FROM SELECT WHERE T3.Position = \"Guard\" FROM JOIN AS T1 FROM game WITH JOIN AS T2 FROM game_player WITH AS T3 FROM player ON T2.Player_ID = T3.Player_ID ON T1.Game_ID = T2.Game_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE platform ( Platform_ID number, Platform_name text, Market_district text, Download_rank number, PRIMARY KEY(Platform_ID)); CREATE TABLE game ( Game_ID number, Title text, Release_Date text, Franchise text, Developers text, Platform_ID number, Units_sold_Millions number, PRIMARY KEY(Game_ID), FOREIGN KEY(Platform_ID) REFERENCES platform (Platform_ID)); CREATE TABLE player ( Player_ID number, Rank_of_the_year number, Player_name text, Position text, College text, PRIMARY KEY(Player_ID)); CREATE TABLE game_player ( Player_ID number, Game_ID number, If_active others, PRIMARY KEY(Player_ID), FOREIGN KEY(Game_ID) REFERENCES game (Game_ID), FOREIGN KEY(Player_ID) REFERENCES player (Player_ID)); \n### Question: What are the titles of games not played by any players who play the Guard position?\n### Response (TSQL):",
    "sql": "SELECT Title FROM game EXCEPT SELECT T1.Title FROM game AS T1 JOIN game_player AS T2 ON T1.Game_ID  =  T2.Game_ID JOIN player AS T3 ON T2.Player_ID  =  T3.Player_ID WHERE T3.Position  =  \"Guard\"",
    "dsql": "EXCEPT PROJECT Title FROM game WITH PROJECT T1.Title FROM SELECT WHERE T3.Position = \"Guard\" FROM JOIN AS T1 FROM game WITH JOIN AS T2 FROM game_player WITH AS T3 FROM player ON T2.Player_ID = T3.Player_ID ON T1.Game_ID = T2.Game_ID "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: list all the names of press in descending order of the profit of the year.\n### Response (TSQL):",
    "sql": "SELECT name FROM press ORDER BY Year_Profits_billion DESC",
    "dsql": "ORDER BY DESC Year_Profits_billion FROM PROJECT name FROM press "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Sorted all the press by year profits in descending order, and return press names.\n### Response (TSQL):",
    "sql": "SELECT name FROM press ORDER BY Year_Profits_billion DESC",
    "dsql": "ORDER BY DESC Year_Profits_billion FROM PROJECT name FROM press "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: What are the names of the publishers that made more than 15 billion profits each year or 1 billion each month?\n### Response (TSQL):",
    "sql": "SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1",
    "dsql": "PROJECT name FROM SELECT WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1 FROM press "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the press whose yearly profit is more than 15 billion or whose monthly profit is more than 1 billion. Return the press names.\n### Response (TSQL):",
    "sql": "SELECT name FROM press WHERE Year_Profits_billion  >  15 OR Month_Profits_billion  >  1",
    "dsql": "PROJECT name FROM SELECT WHERE Year_Profits_billion > 15 OR Month_Profits_billion > 1 FROM press "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: what are the average and maximum profit of a year for all presses?\n### Response (TSQL):",
    "sql": "SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press",
    "dsql": "PROJECT AVG(Year_Profits_billion), MAX(Year_Profits_billion) FROM AGGREGATE MAX(Year_Profits_billion), AVG(Year_Profits_billion) FROM press "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the average and maximum yearly profit for each press.\n### Response (TSQL):",
    "sql": "SELECT avg(Year_Profits_billion) ,  max(Year_Profits_billion) FROM press",
    "dsql": "PROJECT AVG(Year_Profits_billion), MAX(Year_Profits_billion) FROM AGGREGATE MAX(Year_Profits_billion), AVG(Year_Profits_billion) FROM press "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the name of the publisher whose monthly profit is the highest.\n### Response (TSQL):",
    "sql": "SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC Month_Profits_billion FROM PROJECT name FROM press "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Which press has the largest monthly profit? Give me the press name.\n### Response (TSQL):",
    "sql": "SELECT name FROM press ORDER BY Month_Profits_billion DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC Month_Profits_billion FROM PROJECT name FROM press "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the name of the publisher whose monthly profit is the highest or the lowest.\n### Response (TSQL):",
    "sql": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)",
    "dsql": "PROJECT name FROM SELECT WHERE Month_Profits_billion = PROJECT MIN(Month_Profits_billion) FROM AGGREGATE MIN(Month_Profits_billion) FROM press OR Month_Profits_billion = PROJECT MAX(Month_Profits_billion) FROM AGGREGATE MAX(Month_Profits_billion) FROM press FROM press "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: What are the names of the press that makes the highest monthly profit or the lowest monthly profit?\n### Response (TSQL):",
    "sql": "SELECT name FROM press WHERE Month_Profits_billion  =  (SELECT min(Month_Profits_billion) FROM press) OR Month_Profits_billion  =  (SELECT max(Month_Profits_billion) FROM press)",
    "dsql": "PROJECT name FROM SELECT WHERE Month_Profits_billion = PROJECT MIN(Month_Profits_billion) FROM AGGREGATE MIN(Month_Profits_billion) FROM press OR Month_Profits_billion = PROJECT MAX(Month_Profits_billion) FROM AGGREGATE MAX(Month_Profits_billion) FROM press FROM press "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: how many authors are under age 30?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM author WHERE age  <  30",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE age < 30 FROM author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Count the number of authors of age below 30.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM author WHERE age  <  30",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE age < 30 FROM author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: find the average age of authors for each gender.\n### Response (TSQL):",
    "sql": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
    "dsql": "PROJECT AVG(age), gender FROM AGGREGATE AVG(age), COUNT(*) GROUP BY gender FROM author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: For each gender, return gender and the average age of authors.\n### Response (TSQL):",
    "sql": "SELECT avg(age) ,  gender FROM author GROUP BY gender",
    "dsql": "PROJECT AVG(age), gender FROM AGGREGATE AVG(age), COUNT(*) GROUP BY gender FROM author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: find the number of authors who are older than 30 for each gender.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender",
    "dsql": "PROJECT COUNT(*), gender FROM AGGREGATE COUNT(*) GROUP BY gender FROM SELECT WHERE age > 30 FROM author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: How many authors are of age above 30 for each gender?\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  gender FROM author WHERE age  >  30 GROUP BY gender",
    "dsql": "PROJECT COUNT(*), gender FROM AGGREGATE COUNT(*) GROUP BY gender FROM SELECT WHERE age > 30 FROM author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: List all book titles in the order of their release date from the most recent to the past.\n### Response (TSQL):",
    "sql": "SELECT title FROM book ORDER BY release_date DESC",
    "dsql": "ORDER BY DESC release_date FROM PROJECT title FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Sort all the books in descending order of release date, and return the book titles.\n### Response (TSQL):",
    "sql": "SELECT title FROM book ORDER BY release_date DESC",
    "dsql": "ORDER BY DESC release_date FROM PROJECT title FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the number of books for each series.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  book_series FROM book GROUP BY book_series",
    "dsql": "PROJECT COUNT(*), book_series FROM AGGREGATE COUNT(*) GROUP BY book_series FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: How many books does each book series have? Return the counts and book series.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  book_series FROM book GROUP BY book_series",
    "dsql": "PROJECT COUNT(*), book_series FROM AGGREGATE COUNT(*) GROUP BY book_series FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the titles and publish dates of the top 5 best sale books.\n### Response (TSQL):",
    "sql": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5",
    "dsql": "LIMIT 5 FROM ORDER BY DESC sale_amount FROM PROJECT title, release_date FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: What are the 5 best books in terms of sale amount? Give me their titles and release dates.\n### Response (TSQL):",
    "sql": "SELECT title ,  release_date FROM book ORDER BY sale_amount DESC LIMIT 5",
    "dsql": "LIMIT 5 FROM ORDER BY DESC sale_amount FROM PROJECT title, release_date FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the book series that have some book selling more than 1000 and some book less 500.\n### Response (TSQL):",
    "sql": "SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500",
    "dsql": "INTERSECT PROJECT book_series FROM SELECT WHERE sale_amount > 1000 FROM book WITH PROJECT book_series FROM SELECT WHERE sale_amount < 500 FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Which book series contain both books with sale amount above 1000 and books with sale amount below 500?\n### Response (TSQL):",
    "sql": "SELECT book_series FROM book WHERE sale_amount  >  1000 INTERSECT SELECT book_series FROM book WHERE sale_amount  <  500",
    "dsql": "INTERSECT PROJECT book_series FROM SELECT WHERE sale_amount > 1000 FROM book WITH PROJECT book_series FROM SELECT WHERE sale_amount < 500 FROM book "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the name of authors who publish their books in both \"MM\" and \"LT\" series.\n### Response (TSQL):",
    "sql": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
    "dsql": "INTERSECT PROJECT t1.name FROM SELECT WHERE t2.book_series = 'MM' FROM JOIN AS t1 FROM author WITH AS t2 FROM book ON t1.author_id = t2.author_id WITH PROJECT t1.name FROM SELECT WHERE t2.book_series = 'LT' FROM JOIN AS t1 FROM author WITH AS t2 FROM book ON t1.author_id = t2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Which authors publish books in both \"MM\" and \"LT\" series? Give me the author names.\n### Response (TSQL):",
    "sql": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'MM' INTERSECT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id WHERE t2.book_series  =  'LT'",
    "dsql": "INTERSECT PROJECT t1.name FROM SELECT WHERE t2.book_series = 'MM' FROM JOIN AS t1 FROM author WITH AS t2 FROM book ON t1.author_id = t2.author_id WITH PROJECT t1.name FROM SELECT WHERE t2.book_series = 'LT' FROM JOIN AS t1 FROM author WITH AS t2 FROM book ON t1.author_id = t2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the name and age of the authors who do not have any book in the record.\n### Response (TSQL):",
    "sql": "SELECT name ,  age FROM author WHERE author_id NOT IN (SELECT author_id FROM book)",
    "dsql": "PROJECT name, age FROM SELECT WHERE author_id NOT IN PROJECT author_id FROM book FROM author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Which authors in the record have not published any books ? Give me their names .\n### Response (TSQL):",
    "sql": "select name from author where author_id not in (select author_id from book)",
    "dsql": "PROJECT name FROM SELECT WHERE author_id NOT IN PROJECT author_id FROM book FROM author "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the names of authors who have more than one book in the database.\n### Response (TSQL):",
    "sql": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1",
    "dsql": "PROJECT t1.name FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY t2.author_id FROM JOIN AS t1 FROM author WITH AS t2 FROM book ON t1.author_id = t2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Which authors have published more than 1 book according to the database? Give me their names.\n### Response (TSQL):",
    "sql": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id HAVING count(*)  >  1",
    "dsql": "PROJECT t1.name FROM SELECT WHERE COUNT(*) > 1 FROM AGGREGATE COUNT(*) GROUP BY t2.author_id FROM JOIN AS t1 FROM author WITH AS t2 FROM book ON t1.author_id = t2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the title, author name, and publisher name for the top 3 best sales books.\n### Response (TSQL):",
    "sql": "SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC t2.sale_amount FROM PROJECT t1.name, t2.title, t3.name FROM JOIN AS t1 FROM author WITH JOIN AS t2 FROM book WITH AS t3 FROM press ON t2.press_id = t3.press_id ON t1.author_id = t2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: What are the 3 best selling books? Show their titles, author names, and press names.\n### Response (TSQL):",
    "sql": "SELECT t1.name ,  t2.title ,  t3.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id ORDER BY t2.sale_amount DESC LIMIT 3",
    "dsql": "LIMIT 3 FROM ORDER BY DESC t2.sale_amount FROM PROJECT t1.name, t2.title, t3.name FROM JOIN AS t1 FROM author WITH JOIN AS t2 FROM book WITH AS t3 FROM press ON t2.press_id = t3.press_id ON t1.author_id = t2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the name and total book sale amount of each press.\n### Response (TSQL):",
    "sql": "SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id",
    "dsql": "PROJECT SUM(t1.sale_amount), t2.name FROM AGGREGATE SUM(t1.sale_amount), COUNT(*) GROUP BY t1.press_id FROM JOIN AS t1 FROM book WITH AS t2 FROM press ON t1.press_id = t2.press_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: What are the name and total book sale amount of each press?\n### Response (TSQL):",
    "sql": "SELECT sum(t1.sale_amount) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t1.press_id",
    "dsql": "PROJECT SUM(t1.sale_amount), t2.name FROM AGGREGATE SUM(t1.sale_amount), COUNT(*) GROUP BY t1.press_id FROM JOIN AS t1 FROM book WITH AS t2 FROM press ON t1.press_id = t2.press_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the number of books that are sold more than 1000 for each publisher. List the press name as well.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name",
    "dsql": "PROJECT COUNT(*), t2.name FROM AGGREGATE COUNT(*) GROUP BY t2.name FROM SELECT WHERE sale_amount > 1000 FROM JOIN AS t1 FROM book WITH AS t2 FROM press ON t1.press_id = t2.press_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: For each press, return its name and the number of books that have sale amount above 1000.\n### Response (TSQL):",
    "sql": "SELECT count(*) ,  t2.name FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id WHERE sale_amount  >  1000 GROUP BY t2.name",
    "dsql": "PROJECT COUNT(*), t2.name FROM AGGREGATE COUNT(*) GROUP BY t2.name FROM SELECT WHERE sale_amount > 1000 FROM JOIN AS t1 FROM book WITH AS t2 FROM press ON t1.press_id = t2.press_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: What is the name of the author of best selling book?\n### Response (TSQL):",
    "sql": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC t2.sale_amount FROM PROJECT t1.name FROM JOIN AS t1 FROM author WITH AS t2 FROM book ON t1.author_id = t2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Who wrote the best selling book? Give me the author name.\n### Response (TSQL):",
    "sql": "SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id ORDER BY t2.sale_amount DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC t2.sale_amount FROM PROJECT t1.name FROM JOIN AS t1 FROM author WITH AS t2 FROM book ON t1.author_id = t2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: find the name and gender of the author who published the most books.\n### Response (TSQL):",
    "sql": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t1.name, t1.gender FROM AGGREGATE COUNT(*) GROUP BY t2.author_id FROM JOIN AS t1 FROM author WITH AS t2 FROM book ON t1.author_id = t2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Who wrote the largest number of books? Give me the author name and gender.\n### Response (TSQL):",
    "sql": "SELECT t1.name ,  t1.gender FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id GROUP BY t2.author_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT t1.name, t1.gender FROM AGGREGATE COUNT(*) GROUP BY t2.author_id FROM JOIN AS t1 FROM author WITH AS t2 FROM book ON t1.author_id = t2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the names of the authors who did not have any book with the \"Accor\" press.\n### Response (TSQL):",
    "sql": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'",
    "dsql": "EXCEPT PROJECT name FROM author WITH PROJECT t1.name FROM SELECT WHERE t3.name = 'Accor' FROM JOIN AS t1 FROM author WITH JOIN AS t2 FROM book WITH AS t3 FROM press ON t2.press_id = t3.press_id ON t1.author_id = t2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Which authors have never published under the \"Accor\" press? Give me their names.\n### Response (TSQL):",
    "sql": "SELECT name FROM author EXCEPT SELECT t1.name FROM author AS t1 JOIN book AS t2 ON t1.author_id  =  t2.author_id JOIN press AS t3 ON t2.press_id  =  t3.press_id WHERE t3.name  =  'Accor'",
    "dsql": "EXCEPT PROJECT name FROM author WITH PROJECT t1.name FROM SELECT WHERE t3.name = 'Accor' FROM JOIN AS t1 FROM author WITH JOIN AS t2 FROM book WITH AS t3 FROM press ON t2.press_id = t3.press_id ON t1.author_id = t2.author_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the name and the yearly profit in billion for press that published more than two books.\n### Response (TSQL):",
    "sql": "SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2",
    "dsql": "PROJECT t2.name, t2.Year_Profits_billion FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY t2.press_id FROM JOIN AS t1 FROM book WITH AS t2 FROM press ON t1.press_id = t2.press_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE author ( Author_ID number, Name text, Age number, Gender text, PRIMARY KEY(Author_ID)); CREATE TABLE press ( Press_ID number, Name text, Month_Profits_billion number, Year_Profits_billion number, PRIMARY KEY(Press_ID)); CREATE TABLE book ( Book_ID number, Title text, Book_Series text, Author_ID number, Press_ID number, Sale_Amount text, Release_date text, PRIMARY KEY(Book_ID), FOREIGN KEY(Press_ID) REFERENCES press (Press_ID), FOREIGN KEY(Author_ID) REFERENCES author (Author_ID)); \n### Question: Find the press that published more than two books, and return its name and yearly profit in billion.\n### Response (TSQL):",
    "sql": "SELECT t2.name ,  t2.Year_Profits_billion FROM book AS t1 JOIN press AS t2 ON t1.press_id  =  t2.press_id GROUP BY t2.press_id HAVING count(*)  >  2",
    "dsql": "PROJECT t2.name, t2.Year_Profits_billion FROM SELECT WHERE COUNT(*) > 2 FROM AGGREGATE COUNT(*) GROUP BY t2.press_id FROM JOIN AS t1 FROM book WITH AS t2 FROM press ON t1.press_id = t2.press_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: How many authors do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Authors",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Authors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show all author names.\n### Response (TSQL):",
    "sql": "SELECT author_name FROM Authors",
    "dsql": "PROJECT author_name FROM Authors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show the names and other details for all authors.\n### Response (TSQL):",
    "sql": "SELECT author_name ,  other_details FROM Authors",
    "dsql": "PROJECT author_name, other_details FROM Authors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show the other details for the author Addison Denesik.\n### Response (TSQL):",
    "sql": "SELECT other_details FROM Authors WHERE author_name  =  \"Addison Denesik\"",
    "dsql": "PROJECT other_details FROM SELECT WHERE author_name = \"Addison Denesik\" FROM Authors "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show the number of documents.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Documents",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Documents "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Who is the author of the document with id 4?\n### Response (TSQL):",
    "sql": "SELECT author_name FROM Documents WHERE document_id  =  4",
    "dsql": "PROJECT author_name FROM SELECT WHERE document_id = 4 FROM Documents "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Who is the author of the document \"Travel to Brazil\"?\n### Response (TSQL):",
    "sql": "SELECT author_name FROM Documents WHERE document_name  =  \"Travel to Brazil\"",
    "dsql": "PROJECT author_name FROM SELECT WHERE document_name = \"Travel to Brazil\" FROM Documents "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: How many documents does has the author Era Kerluke written?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Documents WHERE author_name  =  \"Era Kerluke\"",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE author_name = \"Era Kerluke\" FROM Documents "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show the names and descriptions for all documents.\n### Response (TSQL):",
    "sql": "SELECT document_name ,  document_description FROM Documents",
    "dsql": "PROJECT document_name, document_description FROM Documents "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show the ids and names for all documents by author Bianka Cummings.\n### Response (TSQL):",
    "sql": "SELECT document_id ,  document_name FROM Documents WHERE author_name  =  \"Bianka Cummings\"",
    "dsql": "PROJECT document_id, document_name FROM SELECT WHERE author_name = \"Bianka Cummings\" FROM Documents "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show the author name and details for the document \"Travel to China\".\n### Response (TSQL):",
    "sql": "SELECT T2.author_name ,  T2.other_details FROM Documents AS T1 JOIN Authors AS T2 ON T1.author_name  =  T2.author_name WHERE document_name  =  \"Travel to China\"",
    "dsql": "PROJECT T2.author_name, T2.other_details FROM SELECT WHERE document_name = \"Travel to China\" FROM JOIN AS T1 FROM Documents WITH AS T2 FROM Authors ON T1.author_name = T2.author_name "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show all author names and number of documents corresponding to each.\n### Response (TSQL):",
    "sql": "SELECT author_name ,  count(*) FROM Documents GROUP BY author_name",
    "dsql": "PROJECT author_name, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY author_name FROM Documents "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: What is the name of the author with most number of documents?\n### Response (TSQL):",
    "sql": "SELECT author_name FROM Documents GROUP BY author_name ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT author_name FROM AGGREGATE COUNT(*) GROUP BY author_name FROM Documents "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show the names for authors with at least two documents.\n### Response (TSQL):",
    "sql": "SELECT author_name FROM Documents GROUP BY author_name HAVING count(*)  >=  2",
    "dsql": "PROJECT author_name FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY author_name FROM Documents "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: How many business processes do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Business_processes",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Business_processes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show the next process id, process name, process description for process with id 9.\n### Response (TSQL):",
    "sql": "SELECT next_process_id ,  process_name ,  process_description FROM Business_processes WHERE process_id  =  9",
    "dsql": "PROJECT next_process_id, process_name, process_description FROM SELECT WHERE process_id = 9 FROM Business_processes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: What is the process name for the next process of the process with id 9?\n### Response (TSQL):",
    "sql": "SELECT process_name FROM Business_processes WHERE process_id  =  (SELECT next_process_id FROM Business_processes WHERE process_id  =  9)",
    "dsql": "PROJECT process_name FROM SELECT WHERE process_id = PROJECT next_process_id FROM SELECT WHERE process_id = 9 FROM Business_processes FROM Business_processes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show the number of process outcomes.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Process_outcomes",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Process_outcomes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: List the codes and descriptions for all process outcomes.\n### Response (TSQL):",
    "sql": "SELECT process_outcome_code ,  process_outcome_description FROM Process_outcomes",
    "dsql": "PROJECT process_outcome_code, process_outcome_description FROM Process_outcomes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: What is the description for the process outcome code working?\n### Response (TSQL):",
    "sql": "SELECT process_outcome_description FROM Process_outcomes WHERE process_outcome_code  =  \"working\"",
    "dsql": "PROJECT process_outcome_description FROM SELECT WHERE process_outcome_code = \"working\" FROM Process_outcomes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show the number of process status.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Process_status",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Process_status "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: List the codes and descriptions for all process status.\n### Response (TSQL):",
    "sql": "SELECT process_status_code ,  process_status_description FROM Process_status",
    "dsql": "PROJECT process_status_code, process_status_description FROM Process_status "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: What is the description for process status code ct?\n### Response (TSQL):",
    "sql": "SELECT process_status_description FROM Process_status WHERE process_status_code  =  \"ct\"",
    "dsql": "PROJECT process_status_description FROM SELECT WHERE process_status_code = \"ct\" FROM Process_status "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: How many staff do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Staff",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show the ids and details for all staff.\n### Response (TSQL):",
    "sql": "SELECT staff_id ,  staff_details FROM Staff",
    "dsql": "PROJECT staff_id, staff_details FROM Staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: What are the details for the staff member with id 100.\n### Response (TSQL):",
    "sql": "SELECT staff_details FROM Staff WHERE staff_id  =  100",
    "dsql": "PROJECT staff_details FROM SELECT WHERE staff_id = 100 FROM Staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show the number of staff roles.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Ref_staff_roles",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Ref_staff_roles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: List the codes and descriptions for all staff roles.\n### Response (TSQL):",
    "sql": "SELECT staff_role_code ,  staff_role_description FROM Ref_staff_roles",
    "dsql": "PROJECT staff_role_code, staff_role_description FROM Ref_staff_roles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: What is the description for staff role code HR?\n### Response (TSQL):",
    "sql": "SELECT staff_role_description FROM Ref_staff_roles WHERE staff_role_code  =  \"HR\"",
    "dsql": "PROJECT staff_role_description FROM SELECT WHERE staff_role_code = \"HR\" FROM Ref_staff_roles "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: How many documents have a process?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT document_id) FROM Documents_processes",
    "dsql": "PROJECT COUNT(DISTINCT document_id) FROM AGGREGATE COUNT(DISTINCT document_id) FROM Documents_processes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: List all process ids with a document.\n### Response (TSQL):",
    "sql": "SELECT DISTINCT process_id FROM Documents_processes",
    "dsql": "PROJECT DISTINCT process_id FROM Documents_processes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show all document ids without a process.\n### Response (TSQL):",
    "sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_processes",
    "dsql": "EXCEPT PROJECT document_id FROM Documents WITH PROJECT document_id FROM Documents_processes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: List all process ids with no document.\n### Response (TSQL):",
    "sql": "SELECT process_id FROM Business_processes EXCEPT SELECT process_id FROM Documents_processes",
    "dsql": "EXCEPT PROJECT process_id FROM Business_processes WITH PROJECT process_id FROM Documents_processes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: What is the process outcome description and process status description for the document with id 0?\n### Response (TSQL):",
    "sql": "SELECT T2.process_outcome_description ,  T3.process_status_description FROM Documents_processes AS T1 JOIN Process_outcomes AS T2 ON T1.process_outcome_code  =  T2.process_outcome_code JOIN Process_Status AS T3 ON T1.process_status_code  =  T3.process_status_code WHERE T1.document_id  =  0",
    "dsql": "PROJECT T2.process_outcome_description, T3.process_status_description FROM SELECT WHERE T1.document_id = 0 FROM JOIN AS T2 FROM Process_outcomes WITH JOIN AS T1 FROM Documents_processes WITH AS T3 FROM Process_Status ON T1.process_status_code = T3.process_status_code ON T1.process_outcome_code = T2.process_outcome_code "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: What is the process name for the document \"Travel to Brazil\"?\n### Response (TSQL):",
    "sql": "SELECT T3.process_name FROM Documents_processes AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id JOIN Business_processes AS T3 ON T1.process_id  =  T3.process_id WHERE T2.document_name  =  \"Travel to Brazil\"",
    "dsql": "PROJECT T3.process_name FROM SELECT WHERE T2.document_name = \"Travel to Brazil\" FROM JOIN AS T2 FROM Documents WITH JOIN AS T1 FROM Documents_processes WITH AS T3 FROM Business_processes ON T1.process_id = T3.process_id ON T1.document_id = T2.document_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show all process ids and the number of documents in each process.\n### Response (TSQL):",
    "sql": "SELECT process_id ,  count(*) FROM Documents_processes GROUP BY process_id",
    "dsql": "PROJECT process_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY process_id FROM Documents_processes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: How many staff are the document with id 0 and process with id 9.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Staff_in_processes WHERE document_id  =  0 AND process_id  =  9",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE document_id = 0 AND process_id = 9 FROM Staff_in_processes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show all staff ids and the number of document processes for each staff.\n### Response (TSQL):",
    "sql": "SELECT staff_id ,  count(*) FROM Staff_in_processes GROUP BY staff_id",
    "dsql": "PROJECT staff_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY staff_id FROM Staff_in_processes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: Show all staff role codes and the number of document processes for each role.\n### Response (TSQL):",
    "sql": "SELECT staff_role_code ,  count(*) FROM Staff_in_processes GROUP BY staff_role_code",
    "dsql": "PROJECT staff_role_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY staff_role_code FROM Staff_in_processes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Staff ( staff_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Ref_Staff_Roles ( staff_role_code text, staff_role_description text, PRIMARY KEY(staff_role_code)); CREATE TABLE Process_Outcomes ( process_outcome_code text, process_outcome_description text, PRIMARY KEY(process_outcome_code)); CREATE TABLE Process_Status ( process_status_code text, process_status_description text, PRIMARY KEY(process_status_code)); CREATE TABLE Authors ( author_name text, other_details text, PRIMARY KEY(author_name)); CREATE TABLE Documents ( document_id number, author_name text, document_name text, document_description text, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(author_name) REFERENCES Authors (author_name)); CREATE TABLE Business_Processes ( process_id number, next_process_id number, process_name text, process_description text, other_details text, PRIMARY KEY(process_id)); CREATE TABLE Documents_Processes ( document_id number, process_id number, process_outcome_code text, process_status_code text, PRIMARY KEY(document_id), FOREIGN KEY(process_status_code) REFERENCES Process_Status (process_status_code), FOREIGN KEY(process_outcome_code) REFERENCES Process_Outcomes (process_outcome_code), FOREIGN KEY(process_id) REFERENCES Business_Processes (process_id), FOREIGN KEY(document_id) REFERENCES Documents (document_id)); CREATE TABLE Staff_in_Processes ( document_id number, process_id number, staff_id number, staff_role_code text, date_from time, date_to time, other_details text, PRIMARY KEY(document_id), FOREIGN KEY(staff_role_code) REFERENCES Ref_Staff_Roles (staff_role_code), FOREIGN KEY(document_id) REFERENCES Documents_Processes (document_id), FOREIGN KEY(process_id) REFERENCES Documents_Processes (process_id), FOREIGN KEY(staff_id) REFERENCES Staff (staff_id)); \n### Question: How many different roles does the staff with id 3 have?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT staff_role_code) FROM Staff_in_processes WHERE staff_id  =  3",
    "dsql": "PROJECT COUNT(DISTINCT staff_role_code) FROM AGGREGATE COUNT(DISTINCT staff_role_code) FROM SELECT WHERE staff_id = 3 FROM Staff_in_processes "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many agencies do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Agencies",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Agencies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Count the number of agencies.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Agencies",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Agencies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show all agency ids and details.\n### Response (TSQL):",
    "sql": "SELECT agency_id ,  agency_details FROM Agencies",
    "dsql": "PROJECT agency_id, agency_details FROM Agencies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are all the agency ids and details?\n### Response (TSQL):",
    "sql": "SELECT agency_id ,  agency_details FROM Agencies",
    "dsql": "PROJECT agency_id, agency_details FROM Agencies "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show the number of clients.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Clients",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Clients "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many clients are there?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Clients",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Clients "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: List all client ids and client details.\n### Response (TSQL):",
    "sql": "SELECT client_id ,  client_details FROM Clients",
    "dsql": "PROJECT client_id, client_details FROM Clients "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are all the client ids and details?\n### Response (TSQL):",
    "sql": "SELECT client_id ,  client_details FROM Clients",
    "dsql": "PROJECT client_id, client_details FROM Clients "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show agency ids and the number of clients for each agency.\n### Response (TSQL):",
    "sql": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id",
    "dsql": "PROJECT agency_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY agency_id FROM Clients "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many clients does each agency have?\n### Response (TSQL):",
    "sql": "SELECT agency_id ,  count(*) FROM Clients GROUP BY agency_id",
    "dsql": "PROJECT agency_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY agency_id FROM Clients "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What is the agency id and details with most number of clients?\n### Response (TSQL):",
    "sql": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.agency_id, T1.agency_details FROM AGGREGATE COUNT(*) GROUP BY T1.agency_id FROM JOIN AS T1 FROM Agencies WITH AS T2 FROM Clients ON T1.agency_id = T2.agency_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Return the agency id and details for the agency with the greatest number of clients.\n### Response (TSQL):",
    "sql": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.agency_id, T1.agency_details FROM AGGREGATE COUNT(*) GROUP BY T1.agency_id FROM JOIN AS T1 FROM Agencies WITH AS T2 FROM Clients ON T1.agency_id = T2.agency_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show agency ids and details with at least 2 clients.\n### Response (TSQL):",
    "sql": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2",
    "dsql": "PROJECT T1.agency_id, T1.agency_details FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.agency_id FROM JOIN AS T1 FROM Agencies WITH AS T2 FROM Clients ON T1.agency_id = T2.agency_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the agency ids and details agencies with at least 2 clients?\n### Response (TSQL):",
    "sql": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id HAVING count(*)  >=  2",
    "dsql": "PROJECT T1.agency_id, T1.agency_details FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY T1.agency_id FROM JOIN AS T1 FROM Agencies WITH AS T2 FROM Clients ON T1.agency_id = T2.agency_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show agency details for client with detail 'Mac'.\n### Response (TSQL):",
    "sql": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
    "dsql": "PROJECT T2.agency_details FROM SELECT WHERE T1.client_details = 'Mac' FROM JOIN AS T1 FROM Clients WITH AS T2 FROM Agencies ON T1.agency_id = T2.agency_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the agency details for clients with the detail Mac?\n### Response (TSQL):",
    "sql": "SELECT T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id WHERE T1.client_details  =  'Mac'",
    "dsql": "PROJECT T2.agency_details FROM SELECT WHERE T1.client_details = 'Mac' FROM JOIN AS T1 FROM Clients WITH AS T2 FROM Agencies ON T1.agency_id = T2.agency_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show details for all clients and the details of their corresponding agents.\n### Response (TSQL):",
    "sql": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id",
    "dsql": "PROJECT T1.client_details, T2.agency_details FROM JOIN AS T1 FROM Clients WITH AS T2 FROM Agencies ON T1.agency_id = T2.agency_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the client details for each client and the corresponding details of their agencies?\n### Response (TSQL):",
    "sql": "SELECT T1.client_details ,  T2.agency_details FROM Clients AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id",
    "dsql": "PROJECT T1.client_details, T2.agency_details FROM JOIN AS T1 FROM Clients WITH AS T2 FROM Agencies ON T1.agency_id = T2.agency_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show all sic codes and the number of clients with each code.\n### Response (TSQL):",
    "sql": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code",
    "dsql": "PROJECT sic_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY sic_code FROM Clients "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many clients are there for each sic code?\n### Response (TSQL):",
    "sql": "SELECT sic_code ,  count(*) FROM Clients GROUP BY sic_code",
    "dsql": "PROJECT sic_code, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY sic_code FROM Clients "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show all client ids and details with sic code \"Bad\".\n### Response (TSQL):",
    "sql": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";",
    "dsql": "PROJECT client_id, client_details FROM SELECT WHERE sic_code = \"Bad\" FROM Clients "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the client ideas and details for clients with the sic code Bad?\n### Response (TSQL):",
    "sql": "SELECT client_id ,  client_details FROM Clients WHERE sic_code  =  \"Bad\";",
    "dsql": "PROJECT client_id, client_details FROM SELECT WHERE sic_code = \"Bad\" FROM Clients "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show all agency ids and details for agencies with a client.\n### Response (TSQL):",
    "sql": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id",
    "dsql": "PROJECT T1.agency_id, T1.agency_details FROM JOIN AS T1 FROM Agencies WITH AS T2 FROM Clients ON T1.agency_id = T2.agency_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the agency ids and agency details for all agencies who have a client?\n### Response (TSQL):",
    "sql": "SELECT T1.agency_id ,  T1.agency_details FROM Agencies AS T1 JOIN Clients AS T2 ON T1.agency_id  =  T2.agency_id",
    "dsql": "PROJECT T1.agency_id, T1.agency_details FROM JOIN AS T1 FROM Agencies WITH AS T2 FROM Clients ON T1.agency_id = T2.agency_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show all agency ids without any client.\n### Response (TSQL):",
    "sql": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
    "dsql": "EXCEPT PROJECT agency_id FROM Agencies WITH PROJECT agency_id FROM Clients "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are ids of agencies that do not have any clients?\n### Response (TSQL):",
    "sql": "SELECT agency_id FROM Agencies EXCEPT SELECT agency_id FROM Clients",
    "dsql": "EXCEPT PROJECT agency_id FROM Agencies WITH PROJECT agency_id FROM Clients "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many invoices do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Invoices",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Invoices "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Count the number of invoices.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Invoices",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Invoices "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show ids, status codes, and details for all invoices for clients.\n### Response (TSQL):",
    "sql": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices",
    "dsql": "PROJECT invoice_id, invoice_status, invoice_details FROM Invoices "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the ids, statuses, and details for all invoices?\n### Response (TSQL):",
    "sql": "SELECT invoice_id ,  invoice_status ,  invoice_details FROM Invoices",
    "dsql": "PROJECT invoice_id, invoice_status, invoice_details FROM Invoices "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show all client ids and the number of invoices for each client.\n### Response (TSQL):",
    "sql": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id",
    "dsql": "PROJECT client_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY client_id FROM Invoices "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many invoices are there for each client id?\n### Response (TSQL):",
    "sql": "SELECT client_id ,  count(*) FROM Invoices GROUP BY client_id",
    "dsql": "PROJECT client_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY client_id FROM Invoices "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: List the client id and detail with most number of invoices.\n### Response (TSQL):",
    "sql": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.client_id, T2.client_details FROM AGGREGATE COUNT(*) GROUP BY T1.client_id FROM JOIN AS T1 FROM Invoices WITH AS T2 FROM Clients ON T1.client_id = T2.client_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the client id and details for the client with the most invoices?\n### Response (TSQL):",
    "sql": "SELECT T1.client_id ,  T2.client_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.client_id, T2.client_details FROM AGGREGATE COUNT(*) GROUP BY T1.client_id FROM JOIN AS T1 FROM Invoices WITH AS T2 FROM Clients ON T1.client_id = T2.client_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are client ids for clients with at least 2 invoices.\n### Response (TSQL):",
    "sql": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2",
    "dsql": "PROJECT client_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY client_id FROM Invoices "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Return the client ids for clients with two or more invoices?\n### Response (TSQL):",
    "sql": "SELECT client_id FROM Invoices GROUP BY client_id HAVING count(*)  >=  2",
    "dsql": "PROJECT client_id FROM SELECT WHERE COUNT(*) >= 2 FROM AGGREGATE COUNT(*) GROUP BY client_id FROM Invoices "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show all invoice status codes and the number of invoices with each status.\n### Response (TSQL):",
    "sql": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status",
    "dsql": "PROJECT invoice_status, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY invoice_status FROM Invoices "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many invoices are there for each status code?\n### Response (TSQL):",
    "sql": "SELECT invoice_status ,  count(*) FROM Invoices GROUP BY invoice_status",
    "dsql": "PROJECT invoice_status, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY invoice_status FROM Invoices "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What is the invoice status code with most number of invoices.\n### Response (TSQL):",
    "sql": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT invoice_status FROM AGGREGATE COUNT(*) GROUP BY invoice_status FROM Invoices "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Return the invoice status that has the most invoices.\n### Response (TSQL):",
    "sql": "SELECT invoice_status FROM Invoices GROUP BY invoice_status ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT invoice_status FROM AGGREGATE COUNT(*) GROUP BY invoice_status FROM Invoices "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show all invoice status codes and details and the corresponding client id and details and agency id and details.\n### Response (TSQL):",
    "sql": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id",
    "dsql": "PROJECT T1.invoice_status, T1.invoice_details, T2.client_id, T2.client_details, T3.agency_id, T3.agency_details FROM JOIN AS T1 FROM Invoices WITH JOIN AS T2 FROM Clients WITH AS T3 FROM Agencies ON T2.agency_id = T3.agency_id ON T1.client_id = T2.client_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the invoice status, invoice details, and corresponding client ids and details and agency id and details?\n### Response (TSQL):",
    "sql": "SELECT T1.invoice_status ,  T1.invoice_details ,  T2.client_id ,  T2.client_details ,  T3.agency_id ,  T3.agency_details FROM Invoices AS T1 JOIN Clients AS T2 ON T1.client_id  =  T2.client_id JOIN Agencies AS T3 ON T2.agency_id  =  T3.agency_id",
    "dsql": "PROJECT T1.invoice_status, T1.invoice_details, T2.client_id, T2.client_details, T3.agency_id, T3.agency_details FROM JOIN AS T1 FROM Invoices WITH JOIN AS T2 FROM Clients WITH AS T3 FROM Agencies ON T2.agency_id = T3.agency_id ON T1.client_id = T2.client_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: List all meeting type codes and details.\n### Response (TSQL):",
    "sql": "SELECT meeting_type ,  other_details FROM meetings",
    "dsql": "PROJECT meeting_type, other_details FROM meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are all meeting types and other details?\n### Response (TSQL):",
    "sql": "SELECT meeting_type ,  other_details FROM meetings",
    "dsql": "PROJECT meeting_type, other_details FROM meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show all meeting outcomes and purposes.\n### Response (TSQL):",
    "sql": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings",
    "dsql": "PROJECT meeting_outcome, purpose_of_meeting FROM meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are all meeting outcomes and purposes?\n### Response (TSQL):",
    "sql": "SELECT meeting_outcome ,  purpose_of_meeting FROM meetings",
    "dsql": "PROJECT meeting_outcome, purpose_of_meeting FROM meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show all payment ids and details for invoices whose status is 'Working'.\n### Response (TSQL):",
    "sql": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
    "dsql": "PROJECT T1.payment_id, T1.payment_details FROM SELECT WHERE T2.invoice_status = 'Working' FROM JOIN AS T1 FROM Payments WITH AS T2 FROM Invoices ON T1.invoice_id = T2.invoice_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are all payment ids and payment details for invoices with status Working?\n### Response (TSQL):",
    "sql": "SELECT T1.payment_id ,  T1.payment_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id WHERE T2.invoice_status  =  'Working'",
    "dsql": "PROJECT T1.payment_id, T1.payment_details FROM SELECT WHERE T2.invoice_status = 'Working' FROM JOIN AS T1 FROM Payments WITH AS T2 FROM Invoices ON T1.invoice_id = T2.invoice_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show all invoice ids and statuses without a payment.\n### Response (TSQL):",
    "sql": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
    "dsql": "EXCEPT PROJECT invoice_id, invoice_status FROM Invoices WITH PROJECT T1.invoice_id, T1.invoice_status FROM JOIN AS T1 FROM Invoices WITH AS T2 FROM Payments ON T1.invoice_id = T2.invoice_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the invoice ids and statuses for invoices without a payment?\n### Response (TSQL):",
    "sql": "SELECT invoice_id ,  invoice_status FROM Invoices EXCEPT SELECT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
    "dsql": "EXCEPT PROJECT invoice_id, invoice_status FROM Invoices WITH PROJECT T1.invoice_id, T1.invoice_status FROM JOIN AS T1 FROM Invoices WITH AS T2 FROM Payments ON T1.invoice_id = T2.invoice_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many payments do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Payments",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Payments "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Count the number of payments.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Payments",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Payments "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: List all payment ids and its corresponding invoice ids and details.\n### Response (TSQL):",
    "sql": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments",
    "dsql": "PROJECT payment_id, invoice_id, payment_details FROM Payments "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the payment ids, invoice ids, and payment details for all payments?\n### Response (TSQL):",
    "sql": "SELECT payment_id ,  invoice_id ,  payment_details FROM Payments",
    "dsql": "PROJECT payment_id, invoice_id, payment_details FROM Payments "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show all the different invoice ids and statuses of the payments\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
    "dsql": "PROJECT DISTINCT T1.invoice_id, T1.invoice_status FROM JOIN AS T1 FROM Invoices WITH AS T2 FROM Payments ON T1.invoice_id = T2.invoice_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the distinct invoice ids and statuses for all payments?\n### Response (TSQL):",
    "sql": "SELECT DISTINCT T1.invoice_id ,  T1.invoice_status FROM Invoices AS T1 JOIN Payments AS T2 ON T1.invoice_id  =  T2.invoice_id",
    "dsql": "PROJECT DISTINCT T1.invoice_id, T1.invoice_status FROM JOIN AS T1 FROM Invoices WITH AS T2 FROM Payments ON T1.invoice_id = T2.invoice_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show all invoice ids and the number of payments for each invoice.\n### Response (TSQL):",
    "sql": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id",
    "dsql": "PROJECT invoice_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY invoice_id FROM Payments "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many payments are there for each invoice?\n### Response (TSQL):",
    "sql": "SELECT invoice_id ,  count(*) FROM Payments GROUP BY invoice_id",
    "dsql": "PROJECT invoice_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY invoice_id FROM Payments "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What is the invoice id, status code, and details for the invoice with most number of payments.\n### Response (TSQL):",
    "sql": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.invoice_id, T2.invoice_status, T2.invoice_details FROM AGGREGATE COUNT(*) GROUP BY T1.invoice_id FROM JOIN AS T1 FROM Payments WITH AS T2 FROM Invoices ON T1.invoice_id = T2.invoice_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Return the invoice ids, statuses, and details for invoices with the most payments?\n### Response (TSQL):",
    "sql": "SELECT T1.invoice_id ,  T2.invoice_status ,  T2.invoice_details FROM Payments AS T1 JOIN Invoices AS T2 ON T1.invoice_id  =  T2.invoice_id GROUP BY T1.invoice_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.invoice_id, T2.invoice_status, T2.invoice_details FROM AGGREGATE COUNT(*) GROUP BY T1.invoice_id FROM JOIN AS T1 FROM Payments WITH AS T2 FROM Invoices ON T1.invoice_id = T2.invoice_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many staff do we have?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Staff",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Count the number of staff.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Staff",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM Staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show the agency ids and the number of staff in each agent?\n### Response (TSQL):",
    "sql": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id",
    "dsql": "PROJECT agency_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY agency_id FROM Staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Return the agency ids and number of staff in each.\n### Response (TSQL):",
    "sql": "SELECT agency_id ,  count(*) FROM Staff GROUP BY agency_id",
    "dsql": "PROJECT agency_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY agency_id FROM Staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What is the agent id and details for the agency with most staff?\n### Response (TSQL):",
    "sql": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.agency_id, T2.agency_details FROM AGGREGATE COUNT(*) GROUP BY T1.agency_id FROM JOIN AS T1 FROM Staff WITH AS T2 FROM Agencies ON T1.agency_id = T2.agency_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Return the id and detail for the agency with the most staff.\n### Response (TSQL):",
    "sql": "SELECT T1.agency_id ,  T2.agency_details FROM Staff AS T1 JOIN Agencies AS T2 ON T1.agency_id  =  T2.agency_id GROUP BY T1.agency_id ORDER BY count(*) DESC LIMIT 1",
    "dsql": "LIMIT 1 FROM ORDER BY DESC COUNT(*) FROM PROJECT T1.agency_id, T2.agency_details FROM AGGREGATE COUNT(*) GROUP BY T1.agency_id FROM JOIN AS T1 FROM Staff WITH AS T2 FROM Agencies ON T1.agency_id = T2.agency_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show meeting outcome codes and the number of meeting in each outcome.\n### Response (TSQL):",
    "sql": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome",
    "dsql": "PROJECT meeting_outcome, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY meeting_outcome FROM Meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many meetings had each meeting outcome?\n### Response (TSQL):",
    "sql": "SELECT meeting_outcome ,  count(*) FROM Meetings GROUP BY meeting_outcome",
    "dsql": "PROJECT meeting_outcome, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY meeting_outcome FROM Meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: List the client ids and the number of meeting for each client.\n### Response (TSQL):",
    "sql": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id",
    "dsql": "PROJECT client_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY client_id FROM Meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many meetings are there for each client id?\n### Response (TSQL):",
    "sql": "SELECT client_id ,  count(*) FROM Meetings GROUP BY client_id",
    "dsql": "PROJECT client_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY client_id FROM Meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show the meeting type codes and the number of meeting for each client.\n### Response (TSQL):",
    "sql": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type",
    "dsql": "PROJECT meeting_type, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY meeting_type FROM Meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many meetings are there for each meeting type?\n### Response (TSQL):",
    "sql": "SELECT meeting_type ,  count(*) FROM Meetings GROUP BY meeting_type",
    "dsql": "PROJECT meeting_type, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY meeting_type FROM Meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show all meeting ids, meeting outcomes, meeting types and the details of the client atttending it.\n### Response (TSQL):",
    "sql": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
    "dsql": "PROJECT T1.meeting_id, T1.meeting_outcome, T1.meeting_type, T2.client_details FROM JOIN AS T1 FROM meetings WITH AS T2 FROM clients ON T1.client_id = T2.client_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the meeting ids, meeting outcomes, meeting types, and client details for all meetings?\n### Response (TSQL):",
    "sql": "SELECT T1.meeting_id ,  T1.meeting_outcome ,  T1.meeting_type ,  T2.client_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id",
    "dsql": "PROJECT T1.meeting_id, T1.meeting_outcome, T1.meeting_type, T2.client_details FROM JOIN AS T1 FROM meetings WITH AS T2 FROM clients ON T1.client_id = T2.client_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show the meeting ids and the number of staff in each meeting.\n### Response (TSQL):",
    "sql": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
    "dsql": "PROJECT meeting_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY meeting_id FROM Staff_in_meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Count the number of staff in each meeting by meeting id.\n### Response (TSQL):",
    "sql": "SELECT meeting_id ,  count(*) FROM Staff_in_meetings GROUP BY meeting_id",
    "dsql": "PROJECT meeting_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY meeting_id FROM Staff_in_meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Show the staff id and the number of meetings attended by the staff who attended some meeting but had the lowest attendance.\n### Response (TSQL):",
    "sql": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT staff_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY staff_id FROM Staff_in_meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What is the staff id of the staff who attended the least meetings but attended some meeting?\n### Response (TSQL):",
    "sql": "SELECT staff_id ,  count(*) FROM Staff_in_meetings GROUP BY staff_id ORDER BY count(*) ASC LIMIT 1;",
    "dsql": "LIMIT 1 FROM ORDER BY ASC COUNT(*) FROM PROJECT staff_id, COUNT(*) FROM AGGREGATE COUNT(*) GROUP BY staff_id FROM Staff_in_meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many staff have attended a meeting?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings",
    "dsql": "PROJECT COUNT(DISTINCT staff_id) FROM AGGREGATE COUNT(DISTINCT staff_id) FROM Staff_in_meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Return the number of distinct staff who have attended a meeting?\n### Response (TSQL):",
    "sql": "SELECT count(DISTINCT staff_id) FROM Staff_in_meetings",
    "dsql": "PROJECT COUNT(DISTINCT staff_id) FROM AGGREGATE COUNT(DISTINCT staff_id) FROM Staff_in_meetings "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: How many staff did not attend any meeting?\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE staff_id NOT IN PROJECT staff_id FROM Staff_in_meetings FROM Staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Count the number of staff who did not attend any meeting.\n### Response (TSQL):",
    "sql": "SELECT count(*) FROM Staff WHERE staff_id NOT IN ( SELECT staff_id FROM Staff_in_meetings )",
    "dsql": "PROJECT COUNT(*) FROM AGGREGATE COUNT(*) FROM SELECT WHERE staff_id NOT IN PROJECT staff_id FROM Staff_in_meetings FROM Staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the ids and details of the clients who have attended any meeting or have any invoice?\n### Response (TSQL):",
    "sql": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
    "dsql": "UNION PROJECT T1.client_id, T1.client_details FROM JOIN AS T1 FROM Clients WITH AS T2 FROM meetings ON T1.client_id = T2.client_id WITH PROJECT T1.client_id, T1.client_details FROM JOIN AS T1 FROM Clients WITH AS T2 FROM invoices ON T1.client_id = T2.client_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Return the ids and details of clients who have attended a meeting or had an invoice.\n### Response (TSQL):",
    "sql": "SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id UNION SELECT T1.client_id ,  T1.client_details FROM Clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
    "dsql": "UNION PROJECT T1.client_id, T1.client_details FROM JOIN AS T1 FROM Clients WITH AS T2 FROM meetings ON T1.client_id = T2.client_id WITH PROJECT T1.client_id, T1.client_details FROM JOIN AS T1 FROM Clients WITH AS T2 FROM invoices ON T1.client_id = T2.client_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the ids and details of the staff who have attended at least 1 meetings and have the detail with letter 's'?\n### Response (TSQL):",
    "sql": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1",
    "dsql": "PROJECT staff_id, staff_details FROM SELECT WHERE COUNT(*) >= 1 FROM AGGREGATE COUNT(*) GROUP BY staff_id FROM SELECT WHERE staff_details LIKE \"%s%\" FROM staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Return the ids and details of staff who have attended at least 1 meeting and have an s in their staff details?\n### Response (TSQL):",
    "sql": "SELECT staff_id ,  staff_details FROM staff WHERE staff_details LIKE \"%s%\" GROUP BY staff_id HAVING count(*)  >=  1",
    "dsql": "PROJECT staff_id, staff_details FROM SELECT WHERE COUNT(*) >= 1 FROM AGGREGATE COUNT(*) GROUP BY staff_id FROM SELECT WHERE staff_details LIKE \"%s%\" FROM staff "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the id, sic code and agency id of the client who has attended 1 meeting and has any invoice.\n### Response (TSQL):",
    "sql": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
    "dsql": "INTERSECT PROJECT T1.client_id, T1.sic_code, T1.agency_id FROM SELECT WHERE COUNT(*) = 1 FROM AGGREGATE COUNT(*) GROUP BY T1.client_id FROM JOIN AS T1 FROM clients WITH AS T2 FROM meetings ON T1.client_id = T2.client_id WITH PROJECT T1.client_id, T1.sic_code, T1.agency_id FROM JOIN AS T1 FROM clients WITH AS T2 FROM invoices ON T1.client_id = T2.client_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: Return the ids, sic codes, and agency ids of clients who have attended 1 meeting and had an invoice.\n### Response (TSQL):",
    "sql": "SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN meetings AS T2 ON T1.client_id  =  T2.client_id GROUP BY T1.client_id HAVING count(*)  =  1 INTERSECT SELECT T1.client_id ,  T1.sic_code ,  T1.agency_id FROM clients AS T1 JOIN invoices AS T2 ON T1.client_id  =  T2.client_id",
    "dsql": "INTERSECT PROJECT T1.client_id, T1.sic_code, T1.agency_id FROM SELECT WHERE COUNT(*) = 1 FROM AGGREGATE COUNT(*) GROUP BY T1.client_id FROM JOIN AS T1 FROM clients WITH AS T2 FROM meetings ON T1.client_id = T2.client_id WITH PROJECT T1.client_id, T1.sic_code, T1.agency_id FROM JOIN AS T1 FROM clients WITH AS T2 FROM invoices ON T1.client_id = T2.client_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: List the start time, end time of each meeting, and the corresponding client detail and staff detail.\n### Response (TSQL):",
    "sql": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id",
    "dsql": "PROJECT T1.start_date_time, T1.end_date_time, T2.client_details, T4.staff_details FROM JOIN AS T2 FROM clients WITH JOIN AS T1 FROM meetings WITH JOIN AS T3 FROM staff_in_meetings WITH AS T4 FROM staff ON T3.staff_id = T4.staff_id ON T1.meeting_id = T3.meeting_id ON T1.client_id = T2.client_id "
  },
  {
    "prompt": "### System Prompt: You are an intelligent AI specialized in generating TSQL queries. TSQL is a domain-specific language similar to SQL but with different ordering and syntax to make it closer to natural language. Your task is to help users formulate TSQL queries to retrieve specific information from the tables below. Please convert the following question into TSQL, keeping the table structure in mind. \n### Tables: CREATE TABLE Agencies ( agency_id number, agency_details text, PRIMARY KEY(agency_id)); CREATE TABLE Staff ( staff_id number, agency_id number, staff_details text, PRIMARY KEY(staff_id)); CREATE TABLE Clients ( client_id number, agency_id number, sic_code text, client_details text, PRIMARY KEY(client_id), FOREIGN KEY(agency_id) REFERENCES Agencies (agency_id)); CREATE TABLE Invoices ( invoice_id number, client_id number, invoice_status text, invoice_details text, PRIMARY KEY(invoice_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Meetings ( meeting_id number, client_id number, meeting_outcome text, meeting_type text, billable_yn text, start_date_time time, end_date_time time, purpose_of_meeting text, other_details text, PRIMARY KEY(meeting_id), FOREIGN KEY(client_id) REFERENCES Clients (client_id)); CREATE TABLE Payments ( payment_id number, invoice_id number, payment_details text, FOREIGN KEY(invoice_id) REFERENCES Invoices (invoice_id)); CREATE TABLE Staff_in_Meetings ( meeting_id number, staff_id number, FOREIGN KEY(staff_id) REFERENCES Staff (staff_id), FOREIGN KEY(meeting_id) REFERENCES Meetings (meeting_id)); \n### Question: What are the start and end times of each meeting, as well as the corresponding client and staff details the attendees?\n### Response (TSQL):",
    "sql": "SELECT T1.start_date_time ,  T1.end_date_time ,  T2.client_details ,  T4.staff_details FROM meetings AS T1 JOIN clients AS T2 ON T1.client_id  =  T2.client_id JOIN staff_in_meetings AS T3 ON T1.meeting_id  =  T3.meeting_id JOIN staff AS T4 ON T3.staff_id  =  T4.staff_id",
    "dsql": "PROJECT T1.start_date_time, T1.end_date_time, T2.client_details, T4.staff_details FROM JOIN AS T2 FROM clients WITH JOIN AS T1 FROM meetings WITH JOIN AS T3 FROM staff_in_meetings WITH AS T4 FROM staff ON T3.staff_id = T4.staff_id ON T1.meeting_id = T3.meeting_id ON T1.client_id = T2.client_id "
  }
]